// DO NOT EDIT!
// Dart generated by Buffman ðŸ’ª
// Versions:
//		Buffman: 0.0.1
//		Flatc: v25.2.10
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable, constant_identifier_names

library services;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;

import './notification_service_services.notification__generated.dart' as services_notification_;
import './notification_service_services.send_notification_request__generated.dart' as services_send_notification_request_;

import './address_common_generated.dart' as common;
import './status_common_generated.dart' as common;
import './timestamp_common_generated.dart' as common;
import './user_service_services_generated.dart' as services;

enum NotificationType {
  NOTIFICATION_TYPE_UNKNOWN(0),
  NOTIFICATION_TYPE_EMAIL(1),
  NOTIFICATION_TYPE_SMS(2),
  NOTIFICATION_TYPE_PUSH(3),
  NOTIFICATION_TYPE_IN_APP(4);

  final int value;
  const NotificationType(this.value);

  factory NotificationType.fromValue(int value) {
    switch (value) {
      case 0: return NotificationType.NOTIFICATION_TYPE_UNKNOWN;
      case 1: return NotificationType.NOTIFICATION_TYPE_EMAIL;
      case 2: return NotificationType.NOTIFICATION_TYPE_SMS;
      case 3: return NotificationType.NOTIFICATION_TYPE_PUSH;
      case 4: return NotificationType.NOTIFICATION_TYPE_IN_APP;
      default: throw StateError('Invalid value $value for bit flag enum');
    }
  }

  static NotificationType? _createOrNull(int? value) =>
      value == null ? null : NotificationType.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 4;
  static const fb.Reader<NotificationType> reader = _NotificationTypeReader();
}

class _NotificationTypeReader extends fb.Reader<NotificationType> {
  const _NotificationTypeReader();

  @override
  int get size => 4;

  @override
  NotificationType read(fb.BufferContext bc, int offset) =>
      NotificationType.fromValue(const fb.Int32Reader().read(bc, offset));
}

enum Priority {
  PRIORITY_LOW(0),
  PRIORITY_MEDIUM(1),
  PRIORITY_HIGH(2),
  PRIORITY_URGENT(3);

  final int value;
  const Priority(this.value);

  factory Priority.fromValue(int value) {
    switch (value) {
      case 0: return Priority.PRIORITY_LOW;
      case 1: return Priority.PRIORITY_MEDIUM;
      case 2: return Priority.PRIORITY_HIGH;
      case 3: return Priority.PRIORITY_URGENT;
      default: throw StateError('Invalid value $value for bit flag enum');
    }
  }

  static Priority? _createOrNull(int? value) =>
      value == null ? null : Priority.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 3;
  static const fb.Reader<Priority> reader = _PriorityReader();
}

class _PriorityReader extends fb.Reader<Priority> {
  const _PriorityReader();

  @override
  int get size => 4;

  @override
  Priority read(fb.BufferContext bc, int offset) =>
      Priority.fromValue(const fb.Int32Reader().read(bc, offset));
}

class Notification {
  Notification._(this._bc, this._bcOffset);
  factory Notification(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Notification> reader = _NotificationReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get notificationId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get recipientUserId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  NotificationType get type => NotificationType.fromValue(const fb.Int32Reader().vTableGet(_bc, _bcOffset, 8, 0));
  String? get title => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  String? get content => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 12);
  Priority get priority => Priority.fromValue(const fb.Int32Reader().vTableGet(_bc, _bcOffset, 14, 0));
  Status get status => Status.fromValue(const fb.Int32Reader().vTableGet(_bc, _bcOffset, 16, 0));
  common.Timestamp? get createdAt => common.Timestamp.reader.vTableGetNullable(_bc, _bcOffset, 18);
  common.Timestamp? get sentAt => common.Timestamp.reader.vTableGetNullable(_bc, _bcOffset, 20);
  List<services_notification_.MetadataEntry>? get metadata => const fb.ListReader<services_notification_.MetadataEntry>(services_notification_.MetadataEntry.reader).vTableGetNullable(_bc, _bcOffset, 22);

  @override
  String toString() {
    return 'Notification{notificationId: ${notificationId}, recipientUserId: ${recipientUserId}, type: ${type}, title: ${title}, content: ${content}, priority: ${priority}, status: ${status}, createdAt: ${createdAt}, sentAt: ${sentAt}, metadata: ${metadata}}';
  }
}

class _NotificationReader extends fb.TableReader<Notification> {
  const _NotificationReader();

  @override
  Notification createObject(fb.BufferContext bc, int offset) => 
    Notification._(bc, offset);
}

class NotificationBuilder {
  NotificationBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(10);
  }

  int addNotificationIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addRecipientUserIdOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addType(NotificationType? type) {
    fbBuilder.addInt32(2, type?.value);
    return fbBuilder.offset;
  }
  int addTitleOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addContentOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addPriority(Priority? priority) {
    fbBuilder.addInt32(5, priority?.value);
    return fbBuilder.offset;
  }
  int addStatus(Status? status) {
    fbBuilder.addInt32(6, status?.value);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addSentAtOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }
  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(9, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NotificationObjectBuilder extends fb.ObjectBuilder {
  final String? _notificationId;
  final String? _recipientUserId;
  final NotificationType? _type;
  final String? _title;
  final String? _content;
  final Priority? _priority;
  final Status? _status;
  final common.TimestampObjectBuilder? _createdAt;
  final common.TimestampObjectBuilder? _sentAt;
  final List<services_notification_.MetadataEntryObjectBuilder>? _metadata;

  NotificationObjectBuilder({
    String? notificationId,
    String? recipientUserId,
    NotificationType? type,
    String? title,
    String? content,
    Priority? priority,
    Status? status,
    common.TimestampObjectBuilder? createdAt,
    common.TimestampObjectBuilder? sentAt,
    List<services_notification_.MetadataEntryObjectBuilder>? metadata,
  })
      : _notificationId = notificationId,
        _recipientUserId = recipientUserId,
        _type = type,
        _title = title,
        _content = content,
        _priority = priority,
        _status = status,
        _createdAt = createdAt,
        _sentAt = sentAt,
        _metadata = metadata;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? notificationIdOffset = _notificationId == null ? null
        : fbBuilder.writeString(_notificationId!);
    final int? recipientUserIdOffset = _recipientUserId == null ? null
        : fbBuilder.writeString(_recipientUserId!);
    final int? titleOffset = _title == null ? null
        : fbBuilder.writeString(_title!);
    final int? contentOffset = _content == null ? null
        : fbBuilder.writeString(_content!);
    final int? createdAtOffset = _createdAt?.getOrCreateOffset(fbBuilder);
    final int? sentAtOffset = _sentAt?.getOrCreateOffset(fbBuilder);
    final int? metadataOffset = _metadata == null ? null
        : fbBuilder.writeList(_metadata!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(10);
    fbBuilder.addOffset(0, notificationIdOffset);
    fbBuilder.addOffset(1, recipientUserIdOffset);
    fbBuilder.addInt32(2, _type?.value);
    fbBuilder.addOffset(3, titleOffset);
    fbBuilder.addOffset(4, contentOffset);
    fbBuilder.addInt32(5, _priority?.value);
    fbBuilder.addInt32(6, _status?.value);
    fbBuilder.addOffset(7, createdAtOffset);
    fbBuilder.addOffset(8, sentAtOffset);
    fbBuilder.addOffset(9, metadataOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class SendNotificationRequest {
  SendNotificationRequest._(this._bc, this._bcOffset);
  factory SendNotificationRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SendNotificationRequest> reader = _SendNotificationRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get recipientUserId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  NotificationType get type => NotificationType.fromValue(const fb.Int32Reader().vTableGet(_bc, _bcOffset, 6, 0));
  String? get title => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get content => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  Priority get priority => Priority.fromValue(const fb.Int32Reader().vTableGet(_bc, _bcOffset, 12, 0));
  List<services_send_notification_request_.MetadataEntry>? get metadata => const fb.ListReader<services_send_notification_request_.MetadataEntry>(services_send_notification_request_.MetadataEntry.reader).vTableGetNullable(_bc, _bcOffset, 14);

  @override
  String toString() {
    return 'SendNotificationRequest{recipientUserId: ${recipientUserId}, type: ${type}, title: ${title}, content: ${content}, priority: ${priority}, metadata: ${metadata}}';
  }
}

class _SendNotificationRequestReader extends fb.TableReader<SendNotificationRequest> {
  const _SendNotificationRequestReader();

  @override
  SendNotificationRequest createObject(fb.BufferContext bc, int offset) => 
    SendNotificationRequest._(bc, offset);
}

class SendNotificationRequestBuilder {
  SendNotificationRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(6);
  }

  int addRecipientUserIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addType(NotificationType? type) {
    fbBuilder.addInt32(1, type?.value);
    return fbBuilder.offset;
  }
  int addTitleOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addContentOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addPriority(Priority? priority) {
    fbBuilder.addInt32(4, priority?.value);
    return fbBuilder.offset;
  }
  int addMetadataOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SendNotificationRequestObjectBuilder extends fb.ObjectBuilder {
  final String? _recipientUserId;
  final NotificationType? _type;
  final String? _title;
  final String? _content;
  final Priority? _priority;
  final List<services_send_notification_request_.MetadataEntryObjectBuilder>? _metadata;

  SendNotificationRequestObjectBuilder({
    String? recipientUserId,
    NotificationType? type,
    String? title,
    String? content,
    Priority? priority,
    List<services_send_notification_request_.MetadataEntryObjectBuilder>? metadata,
  })
      : _recipientUserId = recipientUserId,
        _type = type,
        _title = title,
        _content = content,
        _priority = priority,
        _metadata = metadata;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? recipientUserIdOffset = _recipientUserId == null ? null
        : fbBuilder.writeString(_recipientUserId!);
    final int? titleOffset = _title == null ? null
        : fbBuilder.writeString(_title!);
    final int? contentOffset = _content == null ? null
        : fbBuilder.writeString(_content!);
    final int? metadataOffset = _metadata == null ? null
        : fbBuilder.writeList(_metadata!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(6);
    fbBuilder.addOffset(0, recipientUserIdOffset);
    fbBuilder.addInt32(1, _type?.value);
    fbBuilder.addOffset(2, titleOffset);
    fbBuilder.addOffset(3, contentOffset);
    fbBuilder.addInt32(4, _priority?.value);
    fbBuilder.addOffset(5, metadataOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class SendNotificationResponse {
  SendNotificationResponse._(this._bc, this._bcOffset);
  factory SendNotificationResponse(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SendNotificationResponse> reader = _SendNotificationResponseReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get notificationId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  bool get success => const fb.BoolReader().vTableGet(_bc, _bcOffset, 6, false);
  String? get message => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'SendNotificationResponse{notificationId: ${notificationId}, success: ${success}, message: ${message}}';
  }
}

class _SendNotificationResponseReader extends fb.TableReader<SendNotificationResponse> {
  const _SendNotificationResponseReader();

  @override
  SendNotificationResponse createObject(fb.BufferContext bc, int offset) => 
    SendNotificationResponse._(bc, offset);
}

class SendNotificationResponseBuilder {
  SendNotificationResponseBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addNotificationIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSuccess(bool? success) {
    fbBuilder.addBool(1, success);
    return fbBuilder.offset;
  }
  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SendNotificationResponseObjectBuilder extends fb.ObjectBuilder {
  final String? _notificationId;
  final bool? _success;
  final String? _message;

  SendNotificationResponseObjectBuilder({
    String? notificationId,
    bool? success,
    String? message,
  })
      : _notificationId = notificationId,
        _success = success,
        _message = message;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? notificationIdOffset = _notificationId == null ? null
        : fbBuilder.writeString(_notificationId!);
    final int? messageOffset = _message == null ? null
        : fbBuilder.writeString(_message!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, notificationIdOffset);
    fbBuilder.addBool(1, _success);
    fbBuilder.addOffset(2, messageOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class GetUserNotificationsRequest {
  GetUserNotificationsRequest._(this._bc, this._bcOffset);
  factory GetUserNotificationsRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<GetUserNotificationsRequest> reader = _GetUserNotificationsRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get userId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  int get limit => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  int get offset => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 8, 0);
  Status get statusFilter => Status.fromValue(const fb.Int32Reader().vTableGet(_bc, _bcOffset, 10, 0));

  @override
  String toString() {
    return 'GetUserNotificationsRequest{userId: ${userId}, limit: ${limit}, offset: ${offset}, statusFilter: ${statusFilter}}';
  }
}

class _GetUserNotificationsRequestReader extends fb.TableReader<GetUserNotificationsRequest> {
  const _GetUserNotificationsRequestReader();

  @override
  GetUserNotificationsRequest createObject(fb.BufferContext bc, int offset) => 
    GetUserNotificationsRequest._(bc, offset);
}

class GetUserNotificationsRequestBuilder {
  GetUserNotificationsRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addUserIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addLimit(int? limit) {
    fbBuilder.addInt32(1, limit);
    return fbBuilder.offset;
  }
  int addOffset(int? offset) {
    fbBuilder.addInt32(2, offset);
    return fbBuilder.offset;
  }
  int addStatusFilter(Status? statusFilter) {
    fbBuilder.addInt32(3, statusFilter?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class GetUserNotificationsRequestObjectBuilder extends fb.ObjectBuilder {
  final String? _userId;
  final int? _limit;
  final int? _offset;
  final Status? _statusFilter;

  GetUserNotificationsRequestObjectBuilder({
    String? userId,
    int? limit,
    int? offset,
    Status? statusFilter,
  })
      : _userId = userId,
        _limit = limit,
        _offset = offset,
        _statusFilter = statusFilter;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? userIdOffset = _userId == null ? null
        : fbBuilder.writeString(_userId!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, userIdOffset);
    fbBuilder.addInt32(1, _limit);
    fbBuilder.addInt32(2, _offset);
    fbBuilder.addInt32(3, _statusFilter?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class GetUserNotificationsResponse {
  GetUserNotificationsResponse._(this._bc, this._bcOffset);
  factory GetUserNotificationsResponse(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<GetUserNotificationsResponse> reader = _GetUserNotificationsResponseReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<Notification>? get notifications => const fb.ListReader<Notification>(Notification.reader).vTableGetNullable(_bc, _bcOffset, 4);
  int get totalCount => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  User? get userInfo => User.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'GetUserNotificationsResponse{notifications: ${notifications}, totalCount: ${totalCount}, userInfo: ${userInfo}}';
  }
}

class _GetUserNotificationsResponseReader extends fb.TableReader<GetUserNotificationsResponse> {
  const _GetUserNotificationsResponseReader();

  @override
  GetUserNotificationsResponse createObject(fb.BufferContext bc, int offset) => 
    GetUserNotificationsResponse._(bc, offset);
}

class GetUserNotificationsResponseBuilder {
  GetUserNotificationsResponseBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addNotificationsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addTotalCount(int? totalCount) {
    fbBuilder.addInt32(1, totalCount);
    return fbBuilder.offset;
  }
  int addUserInfoOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class GetUserNotificationsResponseObjectBuilder extends fb.ObjectBuilder {
  final List<NotificationObjectBuilder>? _notifications;
  final int? _totalCount;
  final UserObjectBuilder? _userInfo;

  GetUserNotificationsResponseObjectBuilder({
    List<NotificationObjectBuilder>? notifications,
    int? totalCount,
    UserObjectBuilder? userInfo,
  })
      : _notifications = notifications,
        _totalCount = totalCount,
        _userInfo = userInfo;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? notificationsOffset = _notifications == null ? null
        : fbBuilder.writeList(_notifications!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? userInfoOffset = _userInfo?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, notificationsOffset);
    fbBuilder.addInt32(1, _totalCount);
    fbBuilder.addOffset(2, userInfoOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class MarkNotificationAsReadRequest {
  MarkNotificationAsReadRequest._(this._bc, this._bcOffset);
  factory MarkNotificationAsReadRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<MarkNotificationAsReadRequest> reader = _MarkNotificationAsReadRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get notificationId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get userId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'MarkNotificationAsReadRequest{notificationId: ${notificationId}, userId: ${userId}}';
  }
}

class _MarkNotificationAsReadRequestReader extends fb.TableReader<MarkNotificationAsReadRequest> {
  const _MarkNotificationAsReadRequestReader();

  @override
  MarkNotificationAsReadRequest createObject(fb.BufferContext bc, int offset) => 
    MarkNotificationAsReadRequest._(bc, offset);
}

class MarkNotificationAsReadRequestBuilder {
  MarkNotificationAsReadRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addNotificationIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addUserIdOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MarkNotificationAsReadRequestObjectBuilder extends fb.ObjectBuilder {
  final String? _notificationId;
  final String? _userId;

  MarkNotificationAsReadRequestObjectBuilder({
    String? notificationId,
    String? userId,
  })
      : _notificationId = notificationId,
        _userId = userId;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? notificationIdOffset = _notificationId == null ? null
        : fbBuilder.writeString(_notificationId!);
    final int? userIdOffset = _userId == null ? null
        : fbBuilder.writeString(_userId!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, notificationIdOffset);
    fbBuilder.addOffset(1, userIdOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class MarkNotificationAsReadResponse {
  MarkNotificationAsReadResponse._(this._bc, this._bcOffset);
  factory MarkNotificationAsReadResponse(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<MarkNotificationAsReadResponse> reader = _MarkNotificationAsReadResponseReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  bool get success => const fb.BoolReader().vTableGet(_bc, _bcOffset, 4, false);
  String? get message => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'MarkNotificationAsReadResponse{success: ${success}, message: ${message}}';
  }
}

class _MarkNotificationAsReadResponseReader extends fb.TableReader<MarkNotificationAsReadResponse> {
  const _MarkNotificationAsReadResponseReader();

  @override
  MarkNotificationAsReadResponse createObject(fb.BufferContext bc, int offset) => 
    MarkNotificationAsReadResponse._(bc, offset);
}

class MarkNotificationAsReadResponseBuilder {
  MarkNotificationAsReadResponseBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addSuccess(bool? success) {
    fbBuilder.addBool(0, success);
    return fbBuilder.offset;
  }
  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MarkNotificationAsReadResponseObjectBuilder extends fb.ObjectBuilder {
  final bool? _success;
  final String? _message;

  MarkNotificationAsReadResponseObjectBuilder({
    bool? success,
    String? message,
  })
      : _success = success,
        _message = message;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? messageOffset = _message == null ? null
        : fbBuilder.writeString(_message!);
    fbBuilder.startTable(2);
    fbBuilder.addBool(0, _success);
    fbBuilder.addOffset(1, messageOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
