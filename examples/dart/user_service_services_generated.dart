// DO NOT EDIT!
// dart generated by Buffman ðŸ’ª
// Versions:
//		Buffman: 1.0.0
//		Flatc: v25.2.10
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable, constant_identifier_names

library services;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


import './address_common_generated.dart' as common;
import './status_common_generated.dart' as common;
import './timestamp_common_generated.dart' as common;

class User {
  User._(this._bc, this._bcOffset);
  factory User(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<User> reader = _UserReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get userId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get email => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get firstName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get lastName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  common.Address? get address => common.Address.reader.vTableGetNullable(_bc, _bcOffset, 12);
  Status get status => Status.fromValue(const fb.Int32Reader().vTableGet(_bc, _bcOffset, 14, 0));
  common.Timestamp? get createdAt => common.Timestamp.reader.vTableGetNullable(_bc, _bcOffset, 16);
  common.Timestamp? get updatedAt => common.Timestamp.reader.vTableGetNullable(_bc, _bcOffset, 18);
  List<String>? get roles => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 20);

  @override
  String toString() {
    return 'User{userId: ${userId}, email: ${email}, firstName: ${firstName}, lastName: ${lastName}, address: ${address}, status: ${status}, createdAt: ${createdAt}, updatedAt: ${updatedAt}, roles: ${roles}}';
  }
}

class _UserReader extends fb.TableReader<User> {
  const _UserReader();

  @override
  User createObject(fb.BufferContext bc, int offset) => 
    User._(bc, offset);
}

class UserBuilder {
  UserBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(9);
  }

  int addUserIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addEmailOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addFirstNameOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addLastNameOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addAddressOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addStatus(Status? status) {
    fbBuilder.addInt32(5, status?.value);
    return fbBuilder.offset;
  }
  int addCreatedAtOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addUpdatedAtOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }
  int addRolesOffset(int? offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class UserObjectBuilder extends fb.ObjectBuilder {
  final String? _userId;
  final String? _email;
  final String? _firstName;
  final String? _lastName;
  final common.AddressObjectBuilder? _address;
  final Status? _status;
  final common.TimestampObjectBuilder? _createdAt;
  final common.TimestampObjectBuilder? _updatedAt;
  final List<String>? _roles;

  UserObjectBuilder({
    String? userId,
    String? email,
    String? firstName,
    String? lastName,
    common.AddressObjectBuilder? address,
    Status? status,
    common.TimestampObjectBuilder? createdAt,
    common.TimestampObjectBuilder? updatedAt,
    List<String>? roles,
  })
      : _userId = userId,
        _email = email,
        _firstName = firstName,
        _lastName = lastName,
        _address = address,
        _status = status,
        _createdAt = createdAt,
        _updatedAt = updatedAt,
        _roles = roles;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? userIdOffset = _userId == null ? null
        : fbBuilder.writeString(_userId!);
    final int? emailOffset = _email == null ? null
        : fbBuilder.writeString(_email!);
    final int? firstNameOffset = _firstName == null ? null
        : fbBuilder.writeString(_firstName!);
    final int? lastNameOffset = _lastName == null ? null
        : fbBuilder.writeString(_lastName!);
    final int? addressOffset = _address?.getOrCreateOffset(fbBuilder);
    final int? createdAtOffset = _createdAt?.getOrCreateOffset(fbBuilder);
    final int? updatedAtOffset = _updatedAt?.getOrCreateOffset(fbBuilder);
    final int? rolesOffset = _roles == null ? null
        : fbBuilder.writeList(_roles!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(9);
    fbBuilder.addOffset(0, userIdOffset);
    fbBuilder.addOffset(1, emailOffset);
    fbBuilder.addOffset(2, firstNameOffset);
    fbBuilder.addOffset(3, lastNameOffset);
    fbBuilder.addOffset(4, addressOffset);
    fbBuilder.addInt32(5, _status?.value);
    fbBuilder.addOffset(6, createdAtOffset);
    fbBuilder.addOffset(7, updatedAtOffset);
    fbBuilder.addOffset(8, rolesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class CreateUserRequest {
  CreateUserRequest._(this._bc, this._bcOffset);
  factory CreateUserRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<CreateUserRequest> reader = _CreateUserRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get email => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get firstName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get lastName => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  common.Address? get address => common.Address.reader.vTableGetNullable(_bc, _bcOffset, 10);
  List<String>? get roles => const fb.ListReader<String>(fb.StringReader()).vTableGetNullable(_bc, _bcOffset, 12);

  @override
  String toString() {
    return 'CreateUserRequest{email: ${email}, firstName: ${firstName}, lastName: ${lastName}, address: ${address}, roles: ${roles}}';
  }
}

class _CreateUserRequestReader extends fb.TableReader<CreateUserRequest> {
  const _CreateUserRequestReader();

  @override
  CreateUserRequest createObject(fb.BufferContext bc, int offset) => 
    CreateUserRequest._(bc, offset);
}

class CreateUserRequestBuilder {
  CreateUserRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(5);
  }

  int addEmailOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addFirstNameOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addLastNameOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addAddressOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addRolesOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CreateUserRequestObjectBuilder extends fb.ObjectBuilder {
  final String? _email;
  final String? _firstName;
  final String? _lastName;
  final common.AddressObjectBuilder? _address;
  final List<String>? _roles;

  CreateUserRequestObjectBuilder({
    String? email,
    String? firstName,
    String? lastName,
    common.AddressObjectBuilder? address,
    List<String>? roles,
  })
      : _email = email,
        _firstName = firstName,
        _lastName = lastName,
        _address = address,
        _roles = roles;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? emailOffset = _email == null ? null
        : fbBuilder.writeString(_email!);
    final int? firstNameOffset = _firstName == null ? null
        : fbBuilder.writeString(_firstName!);
    final int? lastNameOffset = _lastName == null ? null
        : fbBuilder.writeString(_lastName!);
    final int? addressOffset = _address?.getOrCreateOffset(fbBuilder);
    final int? rolesOffset = _roles == null ? null
        : fbBuilder.writeList(_roles!.map(fbBuilder.writeString).toList());
    fbBuilder.startTable(5);
    fbBuilder.addOffset(0, emailOffset);
    fbBuilder.addOffset(1, firstNameOffset);
    fbBuilder.addOffset(2, lastNameOffset);
    fbBuilder.addOffset(3, addressOffset);
    fbBuilder.addOffset(4, rolesOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class CreateUserResponse {
  CreateUserResponse._(this._bc, this._bcOffset);
  factory CreateUserResponse(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<CreateUserResponse> reader = _CreateUserResponseReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  User? get user => User.reader.vTableGetNullable(_bc, _bcOffset, 4);
  bool get success => const fb.BoolReader().vTableGet(_bc, _bcOffset, 6, false);
  String? get message => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'CreateUserResponse{user: ${user}, success: ${success}, message: ${message}}';
  }
}

class _CreateUserResponseReader extends fb.TableReader<CreateUserResponse> {
  const _CreateUserResponseReader();

  @override
  CreateUserResponse createObject(fb.BufferContext bc, int offset) => 
    CreateUserResponse._(bc, offset);
}

class CreateUserResponseBuilder {
  CreateUserResponseBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addUserOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addSuccess(bool? success) {
    fbBuilder.addBool(1, success);
    return fbBuilder.offset;
  }
  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class CreateUserResponseObjectBuilder extends fb.ObjectBuilder {
  final UserObjectBuilder? _user;
  final bool? _success;
  final String? _message;

  CreateUserResponseObjectBuilder({
    UserObjectBuilder? user,
    bool? success,
    String? message,
  })
      : _user = user,
        _success = success,
        _message = message;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? userOffset = _user?.getOrCreateOffset(fbBuilder);
    final int? messageOffset = _message == null ? null
        : fbBuilder.writeString(_message!);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, userOffset);
    fbBuilder.addBool(1, _success);
    fbBuilder.addOffset(2, messageOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class GetUserRequest {
  GetUserRequest._(this._bc, this._bcOffset);
  factory GetUserRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<GetUserRequest> reader = _GetUserRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get userId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'GetUserRequest{userId: ${userId}}';
  }
}

class _GetUserRequestReader extends fb.TableReader<GetUserRequest> {
  const _GetUserRequestReader();

  @override
  GetUserRequest createObject(fb.BufferContext bc, int offset) => 
    GetUserRequest._(bc, offset);
}

class GetUserRequestBuilder {
  GetUserRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addUserIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class GetUserRequestObjectBuilder extends fb.ObjectBuilder {
  final String? _userId;

  GetUserRequestObjectBuilder({
    String? userId,
  })
      : _userId = userId;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? userIdOffset = _userId == null ? null
        : fbBuilder.writeString(_userId!);
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, userIdOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class GetUserResponse {
  GetUserResponse._(this._bc, this._bcOffset);
  factory GetUserResponse(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<GetUserResponse> reader = _GetUserResponseReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  User? get user => User.reader.vTableGetNullable(_bc, _bcOffset, 4);
  bool get found => const fb.BoolReader().vTableGet(_bc, _bcOffset, 6, false);

  @override
  String toString() {
    return 'GetUserResponse{user: ${user}, found: ${found}}';
  }
}

class _GetUserResponseReader extends fb.TableReader<GetUserResponse> {
  const _GetUserResponseReader();

  @override
  GetUserResponse createObject(fb.BufferContext bc, int offset) => 
    GetUserResponse._(bc, offset);
}

class GetUserResponseBuilder {
  GetUserResponseBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addUserOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addFound(bool? found) {
    fbBuilder.addBool(1, found);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class GetUserResponseObjectBuilder extends fb.ObjectBuilder {
  final UserObjectBuilder? _user;
  final bool? _found;

  GetUserResponseObjectBuilder({
    UserObjectBuilder? user,
    bool? found,
  })
      : _user = user,
        _found = found;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? userOffset = _user?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, userOffset);
    fbBuilder.addBool(1, _found);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class UpdateUserStatusRequest {
  UpdateUserStatusRequest._(this._bc, this._bcOffset);
  factory UpdateUserStatusRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<UpdateUserStatusRequest> reader = _UpdateUserStatusRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get userId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  Status get newStatus => Status.fromValue(const fb.Int32Reader().vTableGet(_bc, _bcOffset, 6, 0));

  @override
  String toString() {
    return 'UpdateUserStatusRequest{userId: ${userId}, newStatus: ${newStatus}}';
  }
}

class _UpdateUserStatusRequestReader extends fb.TableReader<UpdateUserStatusRequest> {
  const _UpdateUserStatusRequestReader();

  @override
  UpdateUserStatusRequest createObject(fb.BufferContext bc, int offset) => 
    UpdateUserStatusRequest._(bc, offset);
}

class UpdateUserStatusRequestBuilder {
  UpdateUserStatusRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addUserIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addNewStatus(Status? newStatus) {
    fbBuilder.addInt32(1, newStatus?.value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class UpdateUserStatusRequestObjectBuilder extends fb.ObjectBuilder {
  final String? _userId;
  final Status? _newStatus;

  UpdateUserStatusRequestObjectBuilder({
    String? userId,
    Status? newStatus,
  })
      : _userId = userId,
        _newStatus = newStatus;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? userIdOffset = _userId == null ? null
        : fbBuilder.writeString(_userId!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, userIdOffset);
    fbBuilder.addInt32(1, _newStatus?.value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class UpdateUserStatusResponse {
  UpdateUserStatusResponse._(this._bc, this._bcOffset);
  factory UpdateUserStatusResponse(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<UpdateUserStatusResponse> reader = _UpdateUserStatusResponseReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  bool get success => const fb.BoolReader().vTableGet(_bc, _bcOffset, 4, false);
  String? get message => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'UpdateUserStatusResponse{success: ${success}, message: ${message}}';
  }
}

class _UpdateUserStatusResponseReader extends fb.TableReader<UpdateUserStatusResponse> {
  const _UpdateUserStatusResponseReader();

  @override
  UpdateUserStatusResponse createObject(fb.BufferContext bc, int offset) => 
    UpdateUserStatusResponse._(bc, offset);
}

class UpdateUserStatusResponseBuilder {
  UpdateUserStatusResponseBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addSuccess(bool? success) {
    fbBuilder.addBool(0, success);
    return fbBuilder.offset;
  }
  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class UpdateUserStatusResponseObjectBuilder extends fb.ObjectBuilder {
  final bool? _success;
  final String? _message;

  UpdateUserStatusResponseObjectBuilder({
    bool? success,
    String? message,
  })
      : _success = success,
        _message = message;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? messageOffset = _message == null ? null
        : fbBuilder.writeString(_message!);
    fbBuilder.startTable(2);
    fbBuilder.addBool(0, _success);
    fbBuilder.addOffset(1, messageOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
