// DO NOT EDIT!
// dart generated by Buffman ðŸ’ª
// Versions:
//		Buffman: 1.0.0
//		Flatc: v25.2.10
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable, constant_identifier_names

library services;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;

import './analytics_service_services.system_metrics_response__generated.dart' as services_system_metrics_response_;
import './analytics_service_services.user_activity__generated.dart' as services_user_activity_;

import './address_common_generated.dart' as common;
import './notification_service_services.notification__generated.dart' as services_notification_;
import './notification_service_services.send_notification_request__generated.dart' as services_send_notification_request_;
import './notification_service_services_generated.dart' as services;
import './status_common_generated.dart' as common;
import './timestamp_common_generated.dart' as common;
import './user_service_services_generated.dart' as services;

class UserActivity {
  UserActivity._(this._bc, this._bcOffset);
  factory UserActivity(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<UserActivity> reader = _UserActivityReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get activityId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  String? get userId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);
  String? get action => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 8);
  String? get resource => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 10);
  common.Timestamp? get timestamp => common.Timestamp.reader.vTableGetNullable(_bc, _bcOffset, 12);
  List<services_user_activity_.PropertiesEntry>? get properties => const fb.ListReader<services_user_activity_.PropertiesEntry>(services_user_activity_.PropertiesEntry.reader).vTableGetNullable(_bc, _bcOffset, 14);
  String? get sessionId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 16);

  @override
  String toString() {
    return 'UserActivity{activityId: ${activityId}, userId: ${userId}, action: ${action}, resource: ${resource}, timestamp: ${timestamp}, properties: ${properties}, sessionId: ${sessionId}}';
  }
}

class _UserActivityReader extends fb.TableReader<UserActivity> {
  const _UserActivityReader();

  @override
  UserActivity createObject(fb.BufferContext bc, int offset) => 
    UserActivity._(bc, offset);
}

class UserActivityBuilder {
  UserActivityBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(7);
  }

  int addActivityIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addUserIdOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addActionOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addResourceOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }
  int addTimestampOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addPropertiesOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addSessionIdOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class UserActivityObjectBuilder extends fb.ObjectBuilder {
  final String? _activityId;
  final String? _userId;
  final String? _action;
  final String? _resource;
  final common.TimestampObjectBuilder? _timestamp;
  final List<services_user_activity_.PropertiesEntryObjectBuilder>? _properties;
  final String? _sessionId;

  UserActivityObjectBuilder({
    String? activityId,
    String? userId,
    String? action,
    String? resource,
    common.TimestampObjectBuilder? timestamp,
    List<services_user_activity_.PropertiesEntryObjectBuilder>? properties,
    String? sessionId,
  })
      : _activityId = activityId,
        _userId = userId,
        _action = action,
        _resource = resource,
        _timestamp = timestamp,
        _properties = properties,
        _sessionId = sessionId;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? activityIdOffset = _activityId == null ? null
        : fbBuilder.writeString(_activityId!);
    final int? userIdOffset = _userId == null ? null
        : fbBuilder.writeString(_userId!);
    final int? actionOffset = _action == null ? null
        : fbBuilder.writeString(_action!);
    final int? resourceOffset = _resource == null ? null
        : fbBuilder.writeString(_resource!);
    final int? timestampOffset = _timestamp?.getOrCreateOffset(fbBuilder);
    final int? propertiesOffset = _properties == null ? null
        : fbBuilder.writeList(_properties!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? sessionIdOffset = _sessionId == null ? null
        : fbBuilder.writeString(_sessionId!);
    fbBuilder.startTable(7);
    fbBuilder.addOffset(0, activityIdOffset);
    fbBuilder.addOffset(1, userIdOffset);
    fbBuilder.addOffset(2, actionOffset);
    fbBuilder.addOffset(3, resourceOffset);
    fbBuilder.addOffset(4, timestampOffset);
    fbBuilder.addOffset(5, propertiesOffset);
    fbBuilder.addOffset(6, sessionIdOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class NotificationMetrics {
  NotificationMetrics._(this._bc, this._bcOffset);
  factory NotificationMetrics(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<NotificationMetrics> reader = _NotificationMetricsReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get notificationId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  NotificationType get type => NotificationType.fromValue(const fb.Int32Reader().vTableGet(_bc, _bcOffset, 6, 0));
  bool get delivered => const fb.BoolReader().vTableGet(_bc, _bcOffset, 8, false);
  bool get opened => const fb.BoolReader().vTableGet(_bc, _bcOffset, 10, false);
  bool get clicked => const fb.BoolReader().vTableGet(_bc, _bcOffset, 12, false);
  common.Timestamp? get deliveredAt => common.Timestamp.reader.vTableGetNullable(_bc, _bcOffset, 14);
  common.Timestamp? get openedAt => common.Timestamp.reader.vTableGetNullable(_bc, _bcOffset, 16);
  common.Timestamp? get clickedAt => common.Timestamp.reader.vTableGetNullable(_bc, _bcOffset, 18);

  @override
  String toString() {
    return 'NotificationMetrics{notificationId: ${notificationId}, type: ${type}, delivered: ${delivered}, opened: ${opened}, clicked: ${clicked}, deliveredAt: ${deliveredAt}, openedAt: ${openedAt}, clickedAt: ${clickedAt}}';
  }
}

class _NotificationMetricsReader extends fb.TableReader<NotificationMetrics> {
  const _NotificationMetricsReader();

  @override
  NotificationMetrics createObject(fb.BufferContext bc, int offset) => 
    NotificationMetrics._(bc, offset);
}

class NotificationMetricsBuilder {
  NotificationMetricsBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(8);
  }

  int addNotificationIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addType(NotificationType? type) {
    fbBuilder.addInt32(1, type?.value);
    return fbBuilder.offset;
  }
  int addDelivered(bool? delivered) {
    fbBuilder.addBool(2, delivered);
    return fbBuilder.offset;
  }
  int addOpened(bool? opened) {
    fbBuilder.addBool(3, opened);
    return fbBuilder.offset;
  }
  int addClicked(bool? clicked) {
    fbBuilder.addBool(4, clicked);
    return fbBuilder.offset;
  }
  int addDeliveredAtOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }
  int addOpenedAtOffset(int? offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }
  int addClickedAtOffset(int? offset) {
    fbBuilder.addOffset(7, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class NotificationMetricsObjectBuilder extends fb.ObjectBuilder {
  final String? _notificationId;
  final NotificationType? _type;
  final bool? _delivered;
  final bool? _opened;
  final bool? _clicked;
  final common.TimestampObjectBuilder? _deliveredAt;
  final common.TimestampObjectBuilder? _openedAt;
  final common.TimestampObjectBuilder? _clickedAt;

  NotificationMetricsObjectBuilder({
    String? notificationId,
    NotificationType? type,
    bool? delivered,
    bool? opened,
    bool? clicked,
    common.TimestampObjectBuilder? deliveredAt,
    common.TimestampObjectBuilder? openedAt,
    common.TimestampObjectBuilder? clickedAt,
  })
      : _notificationId = notificationId,
        _type = type,
        _delivered = delivered,
        _opened = opened,
        _clicked = clicked,
        _deliveredAt = deliveredAt,
        _openedAt = openedAt,
        _clickedAt = clickedAt;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? notificationIdOffset = _notificationId == null ? null
        : fbBuilder.writeString(_notificationId!);
    final int? deliveredAtOffset = _deliveredAt?.getOrCreateOffset(fbBuilder);
    final int? openedAtOffset = _openedAt?.getOrCreateOffset(fbBuilder);
    final int? clickedAtOffset = _clickedAt?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(8);
    fbBuilder.addOffset(0, notificationIdOffset);
    fbBuilder.addInt32(1, _type?.value);
    fbBuilder.addBool(2, _delivered);
    fbBuilder.addBool(3, _opened);
    fbBuilder.addBool(4, _clicked);
    fbBuilder.addOffset(5, deliveredAtOffset);
    fbBuilder.addOffset(6, openedAtOffset);
    fbBuilder.addOffset(7, clickedAtOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class UserAnalyticsRequest {
  UserAnalyticsRequest._(this._bc, this._bcOffset);
  factory UserAnalyticsRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<UserAnalyticsRequest> reader = _UserAnalyticsRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get userId => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  common.Timestamp? get startDate => common.Timestamp.reader.vTableGetNullable(_bc, _bcOffset, 6);
  common.Timestamp? get endDate => common.Timestamp.reader.vTableGetNullable(_bc, _bcOffset, 8);

  @override
  String toString() {
    return 'UserAnalyticsRequest{userId: ${userId}, startDate: ${startDate}, endDate: ${endDate}}';
  }
}

class _UserAnalyticsRequestReader extends fb.TableReader<UserAnalyticsRequest> {
  const _UserAnalyticsRequestReader();

  @override
  UserAnalyticsRequest createObject(fb.BufferContext bc, int offset) => 
    UserAnalyticsRequest._(bc, offset);
}

class UserAnalyticsRequestBuilder {
  UserAnalyticsRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(3);
  }

  int addUserIdOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addStartDateOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addEndDateOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class UserAnalyticsRequestObjectBuilder extends fb.ObjectBuilder {
  final String? _userId;
  final common.TimestampObjectBuilder? _startDate;
  final common.TimestampObjectBuilder? _endDate;

  UserAnalyticsRequestObjectBuilder({
    String? userId,
    common.TimestampObjectBuilder? startDate,
    common.TimestampObjectBuilder? endDate,
  })
      : _userId = userId,
        _startDate = startDate,
        _endDate = endDate;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? userIdOffset = _userId == null ? null
        : fbBuilder.writeString(_userId!);
    final int? startDateOffset = _startDate?.getOrCreateOffset(fbBuilder);
    final int? endDateOffset = _endDate?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(3);
    fbBuilder.addOffset(0, userIdOffset);
    fbBuilder.addOffset(1, startDateOffset);
    fbBuilder.addOffset(2, endDateOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class UserAnalyticsResponse {
  UserAnalyticsResponse._(this._bc, this._bcOffset);
  factory UserAnalyticsResponse(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<UserAnalyticsResponse> reader = _UserAnalyticsResponseReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  User? get user => User.reader.vTableGetNullable(_bc, _bcOffset, 4);
  List<UserActivity>? get activities => const fb.ListReader<UserActivity>(UserActivity.reader).vTableGetNullable(_bc, _bcOffset, 6);
  List<NotificationMetrics>? get notificationMetrics => const fb.ListReader<NotificationMetrics>(NotificationMetrics.reader).vTableGetNullable(_bc, _bcOffset, 8);
  int get totalActivities => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 10, 0);
  int get totalNotificationsSent => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 12, 0);
  int get totalNotificationsOpened => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 14, 0);

  @override
  String toString() {
    return 'UserAnalyticsResponse{user: ${user}, activities: ${activities}, notificationMetrics: ${notificationMetrics}, totalActivities: ${totalActivities}, totalNotificationsSent: ${totalNotificationsSent}, totalNotificationsOpened: ${totalNotificationsOpened}}';
  }
}

class _UserAnalyticsResponseReader extends fb.TableReader<UserAnalyticsResponse> {
  const _UserAnalyticsResponseReader();

  @override
  UserAnalyticsResponse createObject(fb.BufferContext bc, int offset) => 
    UserAnalyticsResponse._(bc, offset);
}

class UserAnalyticsResponseBuilder {
  UserAnalyticsResponseBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(6);
  }

  int addUserOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addActivitiesOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }
  int addNotificationMetricsOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addTotalActivities(int? totalActivities) {
    fbBuilder.addInt32(3, totalActivities);
    return fbBuilder.offset;
  }
  int addTotalNotificationsSent(int? totalNotificationsSent) {
    fbBuilder.addInt32(4, totalNotificationsSent);
    return fbBuilder.offset;
  }
  int addTotalNotificationsOpened(int? totalNotificationsOpened) {
    fbBuilder.addInt32(5, totalNotificationsOpened);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class UserAnalyticsResponseObjectBuilder extends fb.ObjectBuilder {
  final UserObjectBuilder? _user;
  final List<UserActivityObjectBuilder>? _activities;
  final List<NotificationMetricsObjectBuilder>? _notificationMetrics;
  final int? _totalActivities;
  final int? _totalNotificationsSent;
  final int? _totalNotificationsOpened;

  UserAnalyticsResponseObjectBuilder({
    UserObjectBuilder? user,
    List<UserActivityObjectBuilder>? activities,
    List<NotificationMetricsObjectBuilder>? notificationMetrics,
    int? totalActivities,
    int? totalNotificationsSent,
    int? totalNotificationsOpened,
  })
      : _user = user,
        _activities = activities,
        _notificationMetrics = notificationMetrics,
        _totalActivities = totalActivities,
        _totalNotificationsSent = totalNotificationsSent,
        _totalNotificationsOpened = totalNotificationsOpened;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? userOffset = _user?.getOrCreateOffset(fbBuilder);
    final int? activitiesOffset = _activities == null ? null
        : fbBuilder.writeList(_activities!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? notificationMetricsOffset = _notificationMetrics == null ? null
        : fbBuilder.writeList(_notificationMetrics!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(6);
    fbBuilder.addOffset(0, userOffset);
    fbBuilder.addOffset(1, activitiesOffset);
    fbBuilder.addOffset(2, notificationMetricsOffset);
    fbBuilder.addInt32(3, _totalActivities);
    fbBuilder.addInt32(4, _totalNotificationsSent);
    fbBuilder.addInt32(5, _totalNotificationsOpened);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class SystemMetricsRequest {
  SystemMetricsRequest._(this._bc, this._bcOffset);
  factory SystemMetricsRequest(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SystemMetricsRequest> reader = _SystemMetricsRequestReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  common.Timestamp? get startDate => common.Timestamp.reader.vTableGetNullable(_bc, _bcOffset, 4);
  common.Timestamp? get endDate => common.Timestamp.reader.vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'SystemMetricsRequest{startDate: ${startDate}, endDate: ${endDate}}';
  }
}

class _SystemMetricsRequestReader extends fb.TableReader<SystemMetricsRequest> {
  const _SystemMetricsRequestReader();

  @override
  SystemMetricsRequest createObject(fb.BufferContext bc, int offset) => 
    SystemMetricsRequest._(bc, offset);
}

class SystemMetricsRequestBuilder {
  SystemMetricsRequestBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addStartDateOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addEndDateOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SystemMetricsRequestObjectBuilder extends fb.ObjectBuilder {
  final common.TimestampObjectBuilder? _startDate;
  final common.TimestampObjectBuilder? _endDate;

  SystemMetricsRequestObjectBuilder({
    common.TimestampObjectBuilder? startDate,
    common.TimestampObjectBuilder? endDate,
  })
      : _startDate = startDate,
        _endDate = endDate;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? startDateOffset = _startDate?.getOrCreateOffset(fbBuilder);
    final int? endDateOffset = _endDate?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, startDateOffset);
    fbBuilder.addOffset(1, endDateOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class SystemMetricsResponse {
  SystemMetricsResponse._(this._bc, this._bcOffset);
  factory SystemMetricsResponse(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<SystemMetricsResponse> reader = _SystemMetricsResponseReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get totalUsers => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  int get activeUsers => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 6, 0);
  int get totalNotificationsSent => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 8, 0);
  double get notificationOpenRate => const fb.Float64Reader().vTableGet(_bc, _bcOffset, 10, 0.0);
  List<services_system_metrics_response_.ActivityCountsEntry>? get activityCounts => const fb.ListReader<services_system_metrics_response_.ActivityCountsEntry>(services_system_metrics_response_.ActivityCountsEntry.reader).vTableGetNullable(_bc, _bcOffset, 12);
  common.Timestamp? get generatedAt => common.Timestamp.reader.vTableGetNullable(_bc, _bcOffset, 14);

  @override
  String toString() {
    return 'SystemMetricsResponse{totalUsers: ${totalUsers}, activeUsers: ${activeUsers}, totalNotificationsSent: ${totalNotificationsSent}, notificationOpenRate: ${notificationOpenRate}, activityCounts: ${activityCounts}, generatedAt: ${generatedAt}}';
  }
}

class _SystemMetricsResponseReader extends fb.TableReader<SystemMetricsResponse> {
  const _SystemMetricsResponseReader();

  @override
  SystemMetricsResponse createObject(fb.BufferContext bc, int offset) => 
    SystemMetricsResponse._(bc, offset);
}

class SystemMetricsResponseBuilder {
  SystemMetricsResponseBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(6);
  }

  int addTotalUsers(int? totalUsers) {
    fbBuilder.addInt32(0, totalUsers);
    return fbBuilder.offset;
  }
  int addActiveUsers(int? activeUsers) {
    fbBuilder.addInt32(1, activeUsers);
    return fbBuilder.offset;
  }
  int addTotalNotificationsSent(int? totalNotificationsSent) {
    fbBuilder.addInt32(2, totalNotificationsSent);
    return fbBuilder.offset;
  }
  int addNotificationOpenRate(double? notificationOpenRate) {
    fbBuilder.addFloat64(3, notificationOpenRate);
    return fbBuilder.offset;
  }
  int addActivityCountsOffset(int? offset) {
    fbBuilder.addOffset(4, offset);
    return fbBuilder.offset;
  }
  int addGeneratedAtOffset(int? offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class SystemMetricsResponseObjectBuilder extends fb.ObjectBuilder {
  final int? _totalUsers;
  final int? _activeUsers;
  final int? _totalNotificationsSent;
  final double? _notificationOpenRate;
  final List<services_system_metrics_response_.ActivityCountsEntryObjectBuilder>? _activityCounts;
  final common.TimestampObjectBuilder? _generatedAt;

  SystemMetricsResponseObjectBuilder({
    int? totalUsers,
    int? activeUsers,
    int? totalNotificationsSent,
    double? notificationOpenRate,
    List<services_system_metrics_response_.ActivityCountsEntryObjectBuilder>? activityCounts,
    common.TimestampObjectBuilder? generatedAt,
  })
      : _totalUsers = totalUsers,
        _activeUsers = activeUsers,
        _totalNotificationsSent = totalNotificationsSent,
        _notificationOpenRate = notificationOpenRate,
        _activityCounts = activityCounts,
        _generatedAt = generatedAt;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? activityCountsOffset = _activityCounts == null ? null
        : fbBuilder.writeList(_activityCounts!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    final int? generatedAtOffset = _generatedAt?.getOrCreateOffset(fbBuilder);
    fbBuilder.startTable(6);
    fbBuilder.addInt32(0, _totalUsers);
    fbBuilder.addInt32(1, _activeUsers);
    fbBuilder.addInt32(2, _totalNotificationsSent);
    fbBuilder.addFloat64(3, _notificationOpenRate);
    fbBuilder.addOffset(4, activityCountsOffset);
    fbBuilder.addOffset(5, generatedAtOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class TrackUserActivityResponse {
  TrackUserActivityResponse._(this._bc, this._bcOffset);
  factory TrackUserActivityResponse(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<TrackUserActivityResponse> reader = _TrackUserActivityResponseReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  bool get success => const fb.BoolReader().vTableGet(_bc, _bcOffset, 4, false);
  String? get message => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'TrackUserActivityResponse{success: ${success}, message: ${message}}';
  }
}

class _TrackUserActivityResponseReader extends fb.TableReader<TrackUserActivityResponse> {
  const _TrackUserActivityResponseReader();

  @override
  TrackUserActivityResponse createObject(fb.BufferContext bc, int offset) => 
    TrackUserActivityResponse._(bc, offset);
}

class TrackUserActivityResponseBuilder {
  TrackUserActivityResponseBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addSuccess(bool? success) {
    fbBuilder.addBool(0, success);
    return fbBuilder.offset;
  }
  int addMessageOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class TrackUserActivityResponseObjectBuilder extends fb.ObjectBuilder {
  final bool? _success;
  final String? _message;

  TrackUserActivityResponseObjectBuilder({
    bool? success,
    String? message,
  })
      : _success = success,
        _message = message;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? messageOffset = _message == null ? null
        : fbBuilder.writeString(_message!);
    fbBuilder.startTable(2);
    fbBuilder.addBool(0, _success);
    fbBuilder.addOffset(1, messageOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
