// DO NOT EDIT!
// Dart generated by Buffman ðŸ’ª
// Versions:
//		Buffman: 1.0.0
//		Flatc: v25.2.10
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable, constant_identifier_names

library services.system_metrics_response_;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;

import './analytics_service_services_generated.dart' as services;
import './analytics_service_services.user_activity__generated.dart' as services_user_activity_;

import './address_common_generated.dart' as common;
import './notification_service_services.notification__generated.dart' as services_notification_;
import './notification_service_services.send_notification_request__generated.dart' as services_send_notification_request_;
import './notification_service_services_generated.dart' as services;
import './status_common_generated.dart' as common;
import './timestamp_common_generated.dart' as common;
import './user_service_services_generated.dart' as services;

class ActivityCountsEntry {
  ActivityCountsEntry._(this._bc, this._bcOffset);
  factory ActivityCountsEntry(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<ActivityCountsEntry> reader = _ActivityCountsEntryReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get key => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  int get value => const fb.Int32Reader().vTableGet(_bc, _bcOffset, 6, 0);

  @override
  String toString() {
    return 'ActivityCountsEntry{key: ${key}, value: ${value}}';
  }
}

class _ActivityCountsEntryReader extends fb.TableReader<ActivityCountsEntry> {
  const _ActivityCountsEntryReader();

  @override
  ActivityCountsEntry createObject(fb.BufferContext bc, int offset) => 
    ActivityCountsEntry._(bc, offset);
}

class ActivityCountsEntryBuilder {
  ActivityCountsEntryBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addKeyOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addValue(int? value) {
    fbBuilder.addInt32(1, value);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class ActivityCountsEntryObjectBuilder extends fb.ObjectBuilder {
  final String? _key;
  final int? _value;

  ActivityCountsEntryObjectBuilder({
    String? key,
    int? value,
  })
      : _key = key,
        _value = value;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? keyOffset = _key == null ? null
        : fbBuilder.writeString(_key!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, keyOffset);
    fbBuilder.addInt32(1, _value);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
