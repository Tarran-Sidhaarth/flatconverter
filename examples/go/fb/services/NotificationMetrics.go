// DO NOT EDIT!
// go generated by Buffman ðŸ’ª
// Versions:
// 		Buffman: 1.0.0
// 		Flatc: v25.2.10

package services

import (
	flatbuffers "github.com/google/flatbuffers/go"

	common "example.com/buffman/fb/common"
)

type NotificationMetrics struct {
	_tab flatbuffers.Table
}

func GetRootAsNotificationMetrics(buf []byte, offset flatbuffers.UOffsetT) *NotificationMetrics {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &NotificationMetrics{}
	x.Init(buf, n+offset)
	return x
}

func FinishNotificationMetricsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsNotificationMetrics(buf []byte, offset flatbuffers.UOffsetT) *NotificationMetrics {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &NotificationMetrics{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedNotificationMetricsBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *NotificationMetrics) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *NotificationMetrics) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *NotificationMetrics) NotificationId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *NotificationMetrics) Type() NotificationType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return NotificationType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *NotificationMetrics) MutateType(n NotificationType) bool {
	return rcv._tab.MutateInt32Slot(6, int32(n))
}

func (rcv *NotificationMetrics) Delivered() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *NotificationMetrics) MutateDelivered(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func (rcv *NotificationMetrics) Opened() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *NotificationMetrics) MutateOpened(n bool) bool {
	return rcv._tab.MutateBoolSlot(10, n)
}

func (rcv *NotificationMetrics) Clicked() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *NotificationMetrics) MutateClicked(n bool) bool {
	return rcv._tab.MutateBoolSlot(12, n)
}

func (rcv *NotificationMetrics) DeliveredAt(obj *common.Timestamp) *common.Timestamp {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(common.Timestamp)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *NotificationMetrics) OpenedAt(obj *common.Timestamp) *common.Timestamp {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(common.Timestamp)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *NotificationMetrics) ClickedAt(obj *common.Timestamp) *common.Timestamp {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(common.Timestamp)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func NotificationMetricsStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func NotificationMetricsAddNotificationId(builder *flatbuffers.Builder, notificationId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(notificationId), 0)
}
func NotificationMetricsAddType(builder *flatbuffers.Builder, type_ NotificationType) {
	builder.PrependInt32Slot(1, int32(type_), 0)
}
func NotificationMetricsAddDelivered(builder *flatbuffers.Builder, delivered bool) {
	builder.PrependBoolSlot(2, delivered, false)
}
func NotificationMetricsAddOpened(builder *flatbuffers.Builder, opened bool) {
	builder.PrependBoolSlot(3, opened, false)
}
func NotificationMetricsAddClicked(builder *flatbuffers.Builder, clicked bool) {
	builder.PrependBoolSlot(4, clicked, false)
}
func NotificationMetricsAddDeliveredAt(builder *flatbuffers.Builder, deliveredAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(deliveredAt), 0)
}
func NotificationMetricsAddOpenedAt(builder *flatbuffers.Builder, openedAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(openedAt), 0)
}
func NotificationMetricsAddClickedAt(builder *flatbuffers.Builder, clickedAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(clickedAt), 0)
}
func NotificationMetricsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
