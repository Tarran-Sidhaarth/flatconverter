// DO NOT EDIT!
// Go generated by Buffman ðŸ’ª
// Versions:
//		Buffman: 0.0.1
//		Flatc: v25.2.10

package services

import (
	flatbuffers "github.com/google/flatbuffers/go"

	common "example.com/buffman/fb/common"
	services__SystemMetricsResponse_ "example.com/buffman/fb/services/SystemMetricsResponse_"
)

type SystemMetricsResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsSystemMetricsResponse(buf []byte, offset flatbuffers.UOffsetT) *SystemMetricsResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SystemMetricsResponse{}
	x.Init(buf, n+offset)
	return x
}

func FinishSystemMetricsResponseBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsSystemMetricsResponse(buf []byte, offset flatbuffers.UOffsetT) *SystemMetricsResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SystemMetricsResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSystemMetricsResponseBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *SystemMetricsResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SystemMetricsResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SystemMetricsResponse) TotalUsers() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SystemMetricsResponse) MutateTotalUsers(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *SystemMetricsResponse) ActiveUsers() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SystemMetricsResponse) MutateActiveUsers(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *SystemMetricsResponse) TotalNotificationsSent() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SystemMetricsResponse) MutateTotalNotificationsSent(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *SystemMetricsResponse) NotificationOpenRate() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *SystemMetricsResponse) MutateNotificationOpenRate(n float64) bool {
	return rcv._tab.MutateFloat64Slot(10, n)
}

func (rcv *SystemMetricsResponse) ActivityCounts(obj *services__SystemMetricsResponse_.ActivityCountsEntry, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *SystemMetricsResponse) ActivityCountsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *SystemMetricsResponse) GeneratedAt(obj *common.Timestamp) *common.Timestamp {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(common.Timestamp)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func SystemMetricsResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func SystemMetricsResponseAddTotalUsers(builder *flatbuffers.Builder, totalUsers int32) {
	builder.PrependInt32Slot(0, totalUsers, 0)
}
func SystemMetricsResponseAddActiveUsers(builder *flatbuffers.Builder, activeUsers int32) {
	builder.PrependInt32Slot(1, activeUsers, 0)
}
func SystemMetricsResponseAddTotalNotificationsSent(builder *flatbuffers.Builder, totalNotificationsSent int32) {
	builder.PrependInt32Slot(2, totalNotificationsSent, 0)
}
func SystemMetricsResponseAddNotificationOpenRate(builder *flatbuffers.Builder, notificationOpenRate float64) {
	builder.PrependFloat64Slot(3, notificationOpenRate, 0.0)
}
func SystemMetricsResponseAddActivityCounts(builder *flatbuffers.Builder, activityCounts flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(activityCounts), 0)
}
func SystemMetricsResponseStartActivityCountsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SystemMetricsResponseAddGeneratedAt(builder *flatbuffers.Builder, generatedAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(generatedAt), 0)
}
func SystemMetricsResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
