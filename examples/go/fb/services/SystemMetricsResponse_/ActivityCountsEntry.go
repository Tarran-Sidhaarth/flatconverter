// DO NOT EDIT!
// Go generated by Buffman ðŸ’ª
// Versions:
//		Buffman: 0.0.1
//		Flatc: v25.2.10

package SystemMetricsResponse_

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ActivityCountsEntry struct {
	_tab flatbuffers.Table
}

func GetRootAsActivityCountsEntry(buf []byte, offset flatbuffers.UOffsetT) *ActivityCountsEntry {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ActivityCountsEntry{}
	x.Init(buf, n+offset)
	return x
}

func FinishActivityCountsEntryBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsActivityCountsEntry(buf []byte, offset flatbuffers.UOffsetT) *ActivityCountsEntry {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ActivityCountsEntry{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedActivityCountsEntryBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ActivityCountsEntry) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ActivityCountsEntry) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ActivityCountsEntry) Key() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ActivityCountsEntry) Value() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ActivityCountsEntry) MutateValue(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func ActivityCountsEntryStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func ActivityCountsEntryAddKey(builder *flatbuffers.Builder, key flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(key), 0)
}
func ActivityCountsEntryAddValue(builder *flatbuffers.Builder, value int32) {
	builder.PrependInt32Slot(1, value, 0)
}
func ActivityCountsEntryEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
