// DO NOT EDIT!
// Go generated by Buffman ðŸ’ª
// Versions:
//		Buffman: 0.0.1
//		Flatc: v25.2.10

package services

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type GetUserNotificationsResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsGetUserNotificationsResponse(buf []byte, offset flatbuffers.UOffsetT) *GetUserNotificationsResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GetUserNotificationsResponse{}
	x.Init(buf, n+offset)
	return x
}

func FinishGetUserNotificationsResponseBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsGetUserNotificationsResponse(buf []byte, offset flatbuffers.UOffsetT) *GetUserNotificationsResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &GetUserNotificationsResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedGetUserNotificationsResponseBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *GetUserNotificationsResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GetUserNotificationsResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *GetUserNotificationsResponse) Notifications(obj *Notification, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *GetUserNotificationsResponse) NotificationsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *GetUserNotificationsResponse) TotalCount() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GetUserNotificationsResponse) MutateTotalCount(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *GetUserNotificationsResponse) UserInfo(obj *User) *User {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(User)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func GetUserNotificationsResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func GetUserNotificationsResponseAddNotifications(builder *flatbuffers.Builder, notifications flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(notifications), 0)
}
func GetUserNotificationsResponseStartNotificationsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func GetUserNotificationsResponseAddTotalCount(builder *flatbuffers.Builder, totalCount int32) {
	builder.PrependInt32Slot(1, totalCount, 0)
}
func GetUserNotificationsResponseAddUserInfo(builder *flatbuffers.Builder, userInfo flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(userInfo), 0)
}
func GetUserNotificationsResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
