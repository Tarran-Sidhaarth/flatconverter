// DO NOT EDIT!
// Go generated by Buffman ðŸ’ª
// Versions:
//		Buffman: 1.0.0
//		Flatc: v25.2.10

package UserActivity_

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type PropertiesEntry struct {
	_tab flatbuffers.Table
}

func GetRootAsPropertiesEntry(buf []byte, offset flatbuffers.UOffsetT) *PropertiesEntry {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PropertiesEntry{}
	x.Init(buf, n+offset)
	return x
}

func FinishPropertiesEntryBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsPropertiesEntry(buf []byte, offset flatbuffers.UOffsetT) *PropertiesEntry {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &PropertiesEntry{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedPropertiesEntryBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *PropertiesEntry) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PropertiesEntry) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *PropertiesEntry) Key() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PropertiesEntry) Value() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func PropertiesEntryStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func PropertiesEntryAddKey(builder *flatbuffers.Builder, key flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(key), 0)
}
func PropertiesEntryAddValue(builder *flatbuffers.Builder, value flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(value), 0)
}
func PropertiesEntryEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
