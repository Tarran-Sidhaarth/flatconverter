// DO NOT EDIT!
// go generated by Buffman ðŸ’ª
// Versions:
//		Buffman: 1.0.0
//		Flatc: v25.2.10

package services

import (
	flatbuffers "github.com/google/flatbuffers/go"

	common "example.com/buffman/fb/common"
)

type GetUserNotificationsRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsGetUserNotificationsRequest(buf []byte, offset flatbuffers.UOffsetT) *GetUserNotificationsRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &GetUserNotificationsRequest{}
	x.Init(buf, n+offset)
	return x
}

func FinishGetUserNotificationsRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsGetUserNotificationsRequest(buf []byte, offset flatbuffers.UOffsetT) *GetUserNotificationsRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &GetUserNotificationsRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedGetUserNotificationsRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *GetUserNotificationsRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *GetUserNotificationsRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *GetUserNotificationsRequest) UserId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *GetUserNotificationsRequest) Limit() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GetUserNotificationsRequest) MutateLimit(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *GetUserNotificationsRequest) Offset() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *GetUserNotificationsRequest) MutateOffset(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *GetUserNotificationsRequest) StatusFilter() common.Status {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return common.Status(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *GetUserNotificationsRequest) MutateStatusFilter(n common.Status) bool {
	return rcv._tab.MutateInt32Slot(10, int32(n))
}

func GetUserNotificationsRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func GetUserNotificationsRequestAddUserId(builder *flatbuffers.Builder, userId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(userId), 0)
}
func GetUserNotificationsRequestAddLimit(builder *flatbuffers.Builder, limit int32) {
	builder.PrependInt32Slot(1, limit, 0)
}
func GetUserNotificationsRequestAddOffset(builder *flatbuffers.Builder, offset int32) {
	builder.PrependInt32Slot(2, offset, 0)
}
func GetUserNotificationsRequestAddStatusFilter(builder *flatbuffers.Builder, statusFilter common.Status) {
	builder.PrependInt32Slot(3, int32(statusFilter), 0)
}
func GetUserNotificationsRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
