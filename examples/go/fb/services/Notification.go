// DO NOT EDIT!
// go generated by Buffman ðŸ’ª
// Versions:
// 		Buffman: 1.0.0
// 		Flatc: v25.2.10

package services

import (
	flatbuffers "github.com/google/flatbuffers/go"

	common "example.com/buffman/fb/common"
	services__Notification_ "example.com/buffman/fb/services/Notification_"
)

type Notification struct {
	_tab flatbuffers.Table
}

func GetRootAsNotification(buf []byte, offset flatbuffers.UOffsetT) *Notification {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Notification{}
	x.Init(buf, n+offset)
	return x
}

func FinishNotificationBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsNotification(buf []byte, offset flatbuffers.UOffsetT) *Notification {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Notification{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedNotificationBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Notification) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Notification) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Notification) NotificationId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Notification) RecipientUserId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Notification) Type() NotificationType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return NotificationType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Notification) MutateType(n NotificationType) bool {
	return rcv._tab.MutateInt32Slot(8, int32(n))
}

func (rcv *Notification) Title() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Notification) Content() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Notification) Priority() Priority {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return Priority(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Notification) MutatePriority(n Priority) bool {
	return rcv._tab.MutateInt32Slot(14, int32(n))
}

func (rcv *Notification) Status() common.Status {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return common.Status(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Notification) MutateStatus(n common.Status) bool {
	return rcv._tab.MutateInt32Slot(16, int32(n))
}

func (rcv *Notification) CreatedAt(obj *common.Timestamp) *common.Timestamp {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(common.Timestamp)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Notification) SentAt(obj *common.Timestamp) *common.Timestamp {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(common.Timestamp)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Notification) Metadata(obj *services__Notification_.MetadataEntry, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Notification) MetadataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func NotificationStart(builder *flatbuffers.Builder) {
	builder.StartObject(10)
}
func NotificationAddNotificationId(builder *flatbuffers.Builder, notificationId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(notificationId), 0)
}
func NotificationAddRecipientUserId(builder *flatbuffers.Builder, recipientUserId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(recipientUserId), 0)
}
func NotificationAddType(builder *flatbuffers.Builder, type_ NotificationType) {
	builder.PrependInt32Slot(2, int32(type_), 0)
}
func NotificationAddTitle(builder *flatbuffers.Builder, title flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(title), 0)
}
func NotificationAddContent(builder *flatbuffers.Builder, content flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(content), 0)
}
func NotificationAddPriority(builder *flatbuffers.Builder, priority Priority) {
	builder.PrependInt32Slot(5, int32(priority), 0)
}
func NotificationAddStatus(builder *flatbuffers.Builder, status common.Status) {
	builder.PrependInt32Slot(6, int32(status), 0)
}
func NotificationAddCreatedAt(builder *flatbuffers.Builder, createdAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(createdAt), 0)
}
func NotificationAddSentAt(builder *flatbuffers.Builder, sentAt flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(sentAt), 0)
}
func NotificationAddMetadata(builder *flatbuffers.Builder, metadata flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(metadata), 0)
}
func NotificationStartMetadataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func NotificationEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
