// DO NOT EDIT!
// go generated by Buffman ðŸ’ª
// Versions:
// 		Buffman: 1.0.0
// 		Flatc: v25.2.10

package services

import (
	flatbuffers "github.com/google/flatbuffers/go"

	services__SendNotificationRequest_ "example.com/buffman/fb/services/SendNotificationRequest_"
)

type SendNotificationRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsSendNotificationRequest(buf []byte, offset flatbuffers.UOffsetT) *SendNotificationRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SendNotificationRequest{}
	x.Init(buf, n+offset)
	return x
}

func FinishSendNotificationRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsSendNotificationRequest(buf []byte, offset flatbuffers.UOffsetT) *SendNotificationRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SendNotificationRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSendNotificationRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *SendNotificationRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SendNotificationRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SendNotificationRequest) RecipientUserId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *SendNotificationRequest) Type() NotificationType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return NotificationType(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *SendNotificationRequest) MutateType(n NotificationType) bool {
	return rcv._tab.MutateInt32Slot(6, int32(n))
}

func (rcv *SendNotificationRequest) Title() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *SendNotificationRequest) Content() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *SendNotificationRequest) Priority() Priority {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return Priority(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *SendNotificationRequest) MutatePriority(n Priority) bool {
	return rcv._tab.MutateInt32Slot(12, int32(n))
}

func (rcv *SendNotificationRequest) Metadata(obj *services__SendNotificationRequest_.MetadataEntry, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *SendNotificationRequest) MetadataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func SendNotificationRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func SendNotificationRequestAddRecipientUserId(builder *flatbuffers.Builder, recipientUserId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(recipientUserId), 0)
}
func SendNotificationRequestAddType(builder *flatbuffers.Builder, type_ NotificationType) {
	builder.PrependInt32Slot(1, int32(type_), 0)
}
func SendNotificationRequestAddTitle(builder *flatbuffers.Builder, title flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(title), 0)
}
func SendNotificationRequestAddContent(builder *flatbuffers.Builder, content flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(content), 0)
}
func SendNotificationRequestAddPriority(builder *flatbuffers.Builder, priority Priority) {
	builder.PrependInt32Slot(4, int32(priority), 0)
}
func SendNotificationRequestAddMetadata(builder *flatbuffers.Builder, metadata flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(metadata), 0)
}
func SendNotificationRequestStartMetadataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SendNotificationRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
