// DO NOT EDIT!
// Go files generated by Buffman ðŸ’ª.
// Versions:
//		Buffman: 0.0.1
// 		Flatc: 25.2.10

package services

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SendNotificationResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsSendNotificationResponse(buf []byte, offset flatbuffers.UOffsetT) *SendNotificationResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SendNotificationResponse{}
	x.Init(buf, n+offset)
	return x
}

func FinishSendNotificationResponseBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsSendNotificationResponse(buf []byte, offset flatbuffers.UOffsetT) *SendNotificationResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SendNotificationResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedSendNotificationResponseBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *SendNotificationResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SendNotificationResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SendNotificationResponse) NotificationId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *SendNotificationResponse) Success() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *SendNotificationResponse) MutateSuccess(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

func (rcv *SendNotificationResponse) Message() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func SendNotificationResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func SendNotificationResponseAddNotificationId(builder *flatbuffers.Builder, notificationId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(notificationId), 0)
}
func SendNotificationResponseAddSuccess(builder *flatbuffers.Builder, success bool) {
	builder.PrependBoolSlot(1, success, false)
}
func SendNotificationResponseAddMessage(builder *flatbuffers.Builder, message flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(message), 0)
}
func SendNotificationResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
