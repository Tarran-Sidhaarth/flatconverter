// DO NOT EDIT!
// Go generated by Buffman ðŸ’ª
// Versions:
//		Buffman: 1.0.0
//		Flatc: v25.2.10

package services

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type UserAnalyticsResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsUserAnalyticsResponse(buf []byte, offset flatbuffers.UOffsetT) *UserAnalyticsResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &UserAnalyticsResponse{}
	x.Init(buf, n+offset)
	return x
}

func FinishUserAnalyticsResponseBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsUserAnalyticsResponse(buf []byte, offset flatbuffers.UOffsetT) *UserAnalyticsResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &UserAnalyticsResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedUserAnalyticsResponseBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *UserAnalyticsResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *UserAnalyticsResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *UserAnalyticsResponse) User(obj *User) *User {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(User)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *UserAnalyticsResponse) Activities(obj *UserActivity, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *UserAnalyticsResponse) ActivitiesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *UserAnalyticsResponse) NotificationMetrics(obj *NotificationMetrics, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *UserAnalyticsResponse) NotificationMetricsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *UserAnalyticsResponse) TotalActivities() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *UserAnalyticsResponse) MutateTotalActivities(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func (rcv *UserAnalyticsResponse) TotalNotificationsSent() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *UserAnalyticsResponse) MutateTotalNotificationsSent(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func (rcv *UserAnalyticsResponse) TotalNotificationsOpened() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *UserAnalyticsResponse) MutateTotalNotificationsOpened(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func UserAnalyticsResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func UserAnalyticsResponseAddUser(builder *flatbuffers.Builder, user flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(user), 0)
}
func UserAnalyticsResponseAddActivities(builder *flatbuffers.Builder, activities flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(activities), 0)
}
func UserAnalyticsResponseStartActivitiesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func UserAnalyticsResponseAddNotificationMetrics(builder *flatbuffers.Builder, notificationMetrics flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(notificationMetrics), 0)
}
func UserAnalyticsResponseStartNotificationMetricsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func UserAnalyticsResponseAddTotalActivities(builder *flatbuffers.Builder, totalActivities int32) {
	builder.PrependInt32Slot(3, totalActivities, 0)
}
func UserAnalyticsResponseAddTotalNotificationsSent(builder *flatbuffers.Builder, totalNotificationsSent int32) {
	builder.PrependInt32Slot(4, totalNotificationsSent, 0)
}
func UserAnalyticsResponseAddTotalNotificationsOpened(builder *flatbuffers.Builder, totalNotificationsOpened int32) {
	builder.PrependInt32Slot(5, totalNotificationsOpened, 0)
}
func UserAnalyticsResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
