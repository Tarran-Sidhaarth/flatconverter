// DO NOT EDIT!
// Go generated by Buffman ðŸ’ª
// Versions:
//		Buffman: 1.0.0
//		Flatc: v25.2.10

package services

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MarkNotificationAsReadRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsMarkNotificationAsReadRequest(buf []byte, offset flatbuffers.UOffsetT) *MarkNotificationAsReadRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MarkNotificationAsReadRequest{}
	x.Init(buf, n+offset)
	return x
}

func FinishMarkNotificationAsReadRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsMarkNotificationAsReadRequest(buf []byte, offset flatbuffers.UOffsetT) *MarkNotificationAsReadRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MarkNotificationAsReadRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedMarkNotificationAsReadRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *MarkNotificationAsReadRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MarkNotificationAsReadRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MarkNotificationAsReadRequest) NotificationId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MarkNotificationAsReadRequest) UserId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func MarkNotificationAsReadRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func MarkNotificationAsReadRequestAddNotificationId(builder *flatbuffers.Builder, notificationId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(notificationId), 0)
}
func MarkNotificationAsReadRequestAddUserId(builder *flatbuffers.Builder, userId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(userId), 0)
}
func MarkNotificationAsReadRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
