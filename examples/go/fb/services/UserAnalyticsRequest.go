// DO NOT EDIT!
// go generated by Buffman ðŸ’ª
// Versions:
// 		Buffman: 1.0.0
// 		Flatc: v25.2.10

package services

import (
	flatbuffers "github.com/google/flatbuffers/go"

	common "example.com/buffman/fb/common"
)

type UserAnalyticsRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsUserAnalyticsRequest(buf []byte, offset flatbuffers.UOffsetT) *UserAnalyticsRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &UserAnalyticsRequest{}
	x.Init(buf, n+offset)
	return x
}

func FinishUserAnalyticsRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsUserAnalyticsRequest(buf []byte, offset flatbuffers.UOffsetT) *UserAnalyticsRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &UserAnalyticsRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedUserAnalyticsRequestBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *UserAnalyticsRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *UserAnalyticsRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *UserAnalyticsRequest) UserId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *UserAnalyticsRequest) StartDate(obj *common.Timestamp) *common.Timestamp {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(common.Timestamp)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *UserAnalyticsRequest) EndDate(obj *common.Timestamp) *common.Timestamp {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(common.Timestamp)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func UserAnalyticsRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func UserAnalyticsRequestAddUserId(builder *flatbuffers.Builder, userId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(userId), 0)
}
func UserAnalyticsRequestAddStartDate(builder *flatbuffers.Builder, startDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(startDate), 0)
}
func UserAnalyticsRequestAddEndDate(builder *flatbuffers.Builder, endDate flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(endDate), 0)
}
func UserAnalyticsRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
