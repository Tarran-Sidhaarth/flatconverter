// DO NOT EDIT!
// Flatbuffers generated by Buffman ðŸ’ª
// Versions:
//		Buffman: 0.0.1
//		Flatc: v25.2.10

include "timestamp.fbs";
include "address.fbs";
include "user_service.fbs";
include "status.fbs";

namespace services;

enum NotificationType : int {
  NOTIFICATION_TYPE_UNKNOWN = 0,
  NOTIFICATION_TYPE_EMAIL = 1,
  NOTIFICATION_TYPE_SMS = 2,
  NOTIFICATION_TYPE_PUSH = 3,
  NOTIFICATION_TYPE_IN_APP = 4,
}

enum Priority : int {
  PRIORITY_LOW = 0,
  PRIORITY_MEDIUM = 1,
  PRIORITY_HIGH = 2,
  PRIORITY_URGENT = 3,
}

table Notification {
  notification_id:string;
  recipient_user_id:string;
  type:services.NotificationType;
  title:string;
  content:string;
  priority:services.Priority;
  status:common.Status;
  created_at:common.Timestamp;
  sent_at:common.Timestamp;
  metadata:[services.Notification_.MetadataEntry];
}

namespace services.Notification_;

table MetadataEntry {
  key:string;
  value:string;
}

namespace services;

table SendNotificationRequest {
  recipient_user_id:string;
  type:services.NotificationType;
  title:string;
  content:string;
  priority:services.Priority;
  metadata:[services.SendNotificationRequest_.MetadataEntry];
}

namespace services.SendNotificationRequest_;

table MetadataEntry {
  key:string;
  value:string;
}

namespace services;

table SendNotificationResponse {
  notification_id:string;
  success:bool;
  message:string;
}

table GetUserNotificationsRequest {
  user_id:string;
  limit:int;
  offset:int;
  status_filter:common.Status;
}

table GetUserNotificationsResponse {
  notifications:[services.Notification];
  total_count:int;
  user_info:services.User;
}

table MarkNotificationAsReadRequest {
  notification_id:string;
  user_id:string;
}

table MarkNotificationAsReadResponse {
  success:bool;
  message:string;
}

