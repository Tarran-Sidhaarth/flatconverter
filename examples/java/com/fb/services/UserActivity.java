// DO NOT EDIT!
// Java generated by Buffman ðŸ’ª
// Versions:
//		Buffman: 1.0.0
//		Flatc: v25.2.10

package com.fb.services;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class UserActivity extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static UserActivity getRootAsUserActivity(ByteBuffer _bb) { return getRootAsUserActivity(_bb, new UserActivity()); }
  public static UserActivity getRootAsUserActivity(ByteBuffer _bb, UserActivity obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public UserActivity __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String activityId() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer activityIdAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer activityIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String userId() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer userIdAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer userIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public String action() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer actionAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer actionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  public String resource() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer resourceAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer resourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  public com.fb.common.Timestamp timestamp() { return timestamp(new com.fb.common.Timestamp()); }
  public com.fb.common.Timestamp timestamp(com.fb.common.Timestamp obj) { int o = __offset(12); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public com.fb.services.UserActivity_.PropertiesEntry properties(int j) { return properties(new com.fb.services.UserActivity_.PropertiesEntry(), j); }
  public com.fb.services.UserActivity_.PropertiesEntry properties(com.fb.services.UserActivity_.PropertiesEntry obj, int j) { int o = __offset(14); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int propertiesLength() { int o = __offset(14); return o != 0 ? __vector_len(o) : 0; }
  public com.fb.services.UserActivity_.PropertiesEntry.Vector propertiesVector() { return propertiesVector(new com.fb.services.UserActivity_.PropertiesEntry.Vector()); }
  public com.fb.services.UserActivity_.PropertiesEntry.Vector propertiesVector(com.fb.services.UserActivity_.PropertiesEntry.Vector obj) { int o = __offset(14); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public String sessionId() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sessionIdAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer sessionIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }

  public static int createUserActivity(FlatBufferBuilder builder,
      int activityIdOffset,
      int userIdOffset,
      int actionOffset,
      int resourceOffset,
      int timestampOffset,
      int propertiesOffset,
      int sessionIdOffset) {
    builder.startTable(7);
    UserActivity.addSessionId(builder, sessionIdOffset);
    UserActivity.addProperties(builder, propertiesOffset);
    UserActivity.addTimestamp(builder, timestampOffset);
    UserActivity.addResource(builder, resourceOffset);
    UserActivity.addAction(builder, actionOffset);
    UserActivity.addUserId(builder, userIdOffset);
    UserActivity.addActivityId(builder, activityIdOffset);
    return UserActivity.endUserActivity(builder);
  }

  public static void startUserActivity(FlatBufferBuilder builder) { builder.startTable(7); }
  public static void addActivityId(FlatBufferBuilder builder, int activityIdOffset) { builder.addOffset(0, activityIdOffset, 0); }
  public static void addUserId(FlatBufferBuilder builder, int userIdOffset) { builder.addOffset(1, userIdOffset, 0); }
  public static void addAction(FlatBufferBuilder builder, int actionOffset) { builder.addOffset(2, actionOffset, 0); }
  public static void addResource(FlatBufferBuilder builder, int resourceOffset) { builder.addOffset(3, resourceOffset, 0); }
  public static void addTimestamp(FlatBufferBuilder builder, int timestampOffset) { builder.addOffset(4, timestampOffset, 0); }
  public static void addProperties(FlatBufferBuilder builder, int propertiesOffset) { builder.addOffset(5, propertiesOffset, 0); }
  public static int createPropertiesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startPropertiesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addSessionId(FlatBufferBuilder builder, int sessionIdOffset) { builder.addOffset(6, sessionIdOffset, 0); }
  public static int endUserActivity(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public UserActivity get(int j) { return get(new UserActivity(), j); }
    public UserActivity get(UserActivity obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

