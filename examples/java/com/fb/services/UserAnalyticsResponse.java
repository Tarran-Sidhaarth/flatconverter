// DO NOT EDIT!
// java generated by Buffman ðŸ’ª
// Versions:
//		Buffman: 1.0.0
//		Flatc: v25.2.10

package com.fb.services;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class UserAnalyticsResponse extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_25_2_10(); }
  public static UserAnalyticsResponse getRootAsUserAnalyticsResponse(ByteBuffer _bb) { return getRootAsUserAnalyticsResponse(_bb, new UserAnalyticsResponse()); }
  public static UserAnalyticsResponse getRootAsUserAnalyticsResponse(ByteBuffer _bb, UserAnalyticsResponse obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public UserAnalyticsResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public com.fb.services.User user() { return user(new com.fb.services.User()); }
  public com.fb.services.User user(com.fb.services.User obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public com.fb.services.UserActivity activities(int j) { return activities(new com.fb.services.UserActivity(), j); }
  public com.fb.services.UserActivity activities(com.fb.services.UserActivity obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int activitiesLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public com.fb.services.UserActivity.Vector activitiesVector() { return activitiesVector(new com.fb.services.UserActivity.Vector()); }
  public com.fb.services.UserActivity.Vector activitiesVector(com.fb.services.UserActivity.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public com.fb.services.NotificationMetrics notificationMetrics(int j) { return notificationMetrics(new com.fb.services.NotificationMetrics(), j); }
  public com.fb.services.NotificationMetrics notificationMetrics(com.fb.services.NotificationMetrics obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int notificationMetricsLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public com.fb.services.NotificationMetrics.Vector notificationMetricsVector() { return notificationMetricsVector(new com.fb.services.NotificationMetrics.Vector()); }
  public com.fb.services.NotificationMetrics.Vector notificationMetricsVector(com.fb.services.NotificationMetrics.Vector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public int totalActivities() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int totalNotificationsSent() { int o = __offset(12); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int totalNotificationsOpened() { int o = __offset(14); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createUserAnalyticsResponse(FlatBufferBuilder builder,
      int userOffset,
      int activitiesOffset,
      int notificationMetricsOffset,
      int totalActivities,
      int totalNotificationsSent,
      int totalNotificationsOpened) {
    builder.startTable(6);
    UserAnalyticsResponse.addTotalNotificationsOpened(builder, totalNotificationsOpened);
    UserAnalyticsResponse.addTotalNotificationsSent(builder, totalNotificationsSent);
    UserAnalyticsResponse.addTotalActivities(builder, totalActivities);
    UserAnalyticsResponse.addNotificationMetrics(builder, notificationMetricsOffset);
    UserAnalyticsResponse.addActivities(builder, activitiesOffset);
    UserAnalyticsResponse.addUser(builder, userOffset);
    return UserAnalyticsResponse.endUserAnalyticsResponse(builder);
  }

  public static void startUserAnalyticsResponse(FlatBufferBuilder builder) { builder.startTable(6); }
  public static void addUser(FlatBufferBuilder builder, int userOffset) { builder.addOffset(0, userOffset, 0); }
  public static void addActivities(FlatBufferBuilder builder, int activitiesOffset) { builder.addOffset(1, activitiesOffset, 0); }
  public static int createActivitiesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startActivitiesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addNotificationMetrics(FlatBufferBuilder builder, int notificationMetricsOffset) { builder.addOffset(2, notificationMetricsOffset, 0); }
  public static int createNotificationMetricsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startNotificationMetricsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addTotalActivities(FlatBufferBuilder builder, int totalActivities) { builder.addInt(3, totalActivities, 0); }
  public static void addTotalNotificationsSent(FlatBufferBuilder builder, int totalNotificationsSent) { builder.addInt(4, totalNotificationsSent, 0); }
  public static void addTotalNotificationsOpened(FlatBufferBuilder builder, int totalNotificationsOpened) { builder.addInt(5, totalNotificationsOpened, 0); }
  public static int endUserAnalyticsResponse(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public UserAnalyticsResponse get(int j) { return get(new UserAnalyticsResponse(), j); }
    public UserAnalyticsResponse get(UserAnalyticsResponse obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

