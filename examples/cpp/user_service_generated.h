// DO NOT EDIT!
// cpp generated by Buffman ðŸ’ª
// Versions:
// 		Buffman: 1.0.0
// 		Flatc: v25.2.10


#ifndef FLATBUFFERS_GENERATED_USERSERVICE_SERVICES_H_
#define FLATBUFFERS_GENERATED_USERSERVICE_SERVICES_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "address_generated.h"
#include "status_generated.h"
#include "timestamp_generated.h"

namespace services {

struct User;
struct UserBuilder;

struct CreateUserRequest;
struct CreateUserRequestBuilder;

struct CreateUserResponse;
struct CreateUserResponseBuilder;

struct GetUserRequest;
struct GetUserRequestBuilder;

struct GetUserResponse;
struct GetUserResponseBuilder;

struct UpdateUserStatusRequest;
struct UpdateUserStatusRequestBuilder;

struct UpdateUserStatusResponse;
struct UpdateUserStatusResponseBuilder;

struct User FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UserBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USER_ID = 4,
    VT_EMAIL = 6,
    VT_FIRST_NAME = 8,
    VT_LAST_NAME = 10,
    VT_ADDRESS = 12,
    VT_STATUS = 14,
    VT_CREATED_AT = 16,
    VT_UPDATED_AT = 18,
    VT_ROLES = 20
  };
  const ::flatbuffers::String *user_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USER_ID);
  }
  const ::flatbuffers::String *email() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EMAIL);
  }
  const ::flatbuffers::String *first_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FIRST_NAME);
  }
  const ::flatbuffers::String *last_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LAST_NAME);
  }
  const common::Address *address() const {
    return GetPointer<const common::Address *>(VT_ADDRESS);
  }
  common::Status status() const {
    return static_cast<common::Status>(GetField<int32_t>(VT_STATUS, 0));
  }
  const common::Timestamp *created_at() const {
    return GetPointer<const common::Timestamp *>(VT_CREATED_AT);
  }
  const common::Timestamp *updated_at() const {
    return GetPointer<const common::Timestamp *>(VT_UPDATED_AT);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *roles() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ROLES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USER_ID) &&
           verifier.VerifyString(user_id()) &&
           VerifyOffset(verifier, VT_EMAIL) &&
           verifier.VerifyString(email()) &&
           VerifyOffset(verifier, VT_FIRST_NAME) &&
           verifier.VerifyString(first_name()) &&
           VerifyOffset(verifier, VT_LAST_NAME) &&
           verifier.VerifyString(last_name()) &&
           VerifyOffset(verifier, VT_ADDRESS) &&
           verifier.VerifyTable(address()) &&
           VerifyField<int32_t>(verifier, VT_STATUS, 4) &&
           VerifyOffset(verifier, VT_CREATED_AT) &&
           verifier.VerifyTable(created_at()) &&
           VerifyOffset(verifier, VT_UPDATED_AT) &&
           verifier.VerifyTable(updated_at()) &&
           VerifyOffset(verifier, VT_ROLES) &&
           verifier.VerifyVector(roles()) &&
           verifier.VerifyVectorOfStrings(roles()) &&
           verifier.EndTable();
  }
};

struct UserBuilder {
  typedef User Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_user_id(::flatbuffers::Offset<::flatbuffers::String> user_id) {
    fbb_.AddOffset(User::VT_USER_ID, user_id);
  }
  void add_email(::flatbuffers::Offset<::flatbuffers::String> email) {
    fbb_.AddOffset(User::VT_EMAIL, email);
  }
  void add_first_name(::flatbuffers::Offset<::flatbuffers::String> first_name) {
    fbb_.AddOffset(User::VT_FIRST_NAME, first_name);
  }
  void add_last_name(::flatbuffers::Offset<::flatbuffers::String> last_name) {
    fbb_.AddOffset(User::VT_LAST_NAME, last_name);
  }
  void add_address(::flatbuffers::Offset<common::Address> address) {
    fbb_.AddOffset(User::VT_ADDRESS, address);
  }
  void add_status(common::Status status) {
    fbb_.AddElement<int32_t>(User::VT_STATUS, static_cast<int32_t>(status), 0);
  }
  void add_created_at(::flatbuffers::Offset<common::Timestamp> created_at) {
    fbb_.AddOffset(User::VT_CREATED_AT, created_at);
  }
  void add_updated_at(::flatbuffers::Offset<common::Timestamp> updated_at) {
    fbb_.AddOffset(User::VT_UPDATED_AT, updated_at);
  }
  void add_roles(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> roles) {
    fbb_.AddOffset(User::VT_ROLES, roles);
  }
  explicit UserBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<User> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<User>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<User> CreateUser(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> user_id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> email = 0,
    ::flatbuffers::Offset<::flatbuffers::String> first_name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> last_name = 0,
    ::flatbuffers::Offset<common::Address> address = 0,
    common::Status status = common::Status_STATUS_UNKNOWN,
    ::flatbuffers::Offset<common::Timestamp> created_at = 0,
    ::flatbuffers::Offset<common::Timestamp> updated_at = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> roles = 0) {
  UserBuilder builder_(_fbb);
  builder_.add_roles(roles);
  builder_.add_updated_at(updated_at);
  builder_.add_created_at(created_at);
  builder_.add_status(status);
  builder_.add_address(address);
  builder_.add_last_name(last_name);
  builder_.add_first_name(first_name);
  builder_.add_email(email);
  builder_.add_user_id(user_id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<User> CreateUserDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *user_id = nullptr,
    const char *email = nullptr,
    const char *first_name = nullptr,
    const char *last_name = nullptr,
    ::flatbuffers::Offset<common::Address> address = 0,
    common::Status status = common::Status_STATUS_UNKNOWN,
    ::flatbuffers::Offset<common::Timestamp> created_at = 0,
    ::flatbuffers::Offset<common::Timestamp> updated_at = 0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *roles = nullptr) {
  auto user_id__ = user_id ? _fbb.CreateString(user_id) : 0;
  auto email__ = email ? _fbb.CreateString(email) : 0;
  auto first_name__ = first_name ? _fbb.CreateString(first_name) : 0;
  auto last_name__ = last_name ? _fbb.CreateString(last_name) : 0;
  auto roles__ = roles ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*roles) : 0;
  return services::CreateUser(
      _fbb,
      user_id__,
      email__,
      first_name__,
      last_name__,
      address,
      status,
      created_at,
      updated_at,
      roles__);
}

struct CreateUserRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CreateUserRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_EMAIL = 4,
    VT_FIRST_NAME = 6,
    VT_LAST_NAME = 8,
    VT_ADDRESS = 10,
    VT_ROLES = 12
  };
  const ::flatbuffers::String *email() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EMAIL);
  }
  const ::flatbuffers::String *first_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FIRST_NAME);
  }
  const ::flatbuffers::String *last_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LAST_NAME);
  }
  const common::Address *address() const {
    return GetPointer<const common::Address *>(VT_ADDRESS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *roles() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ROLES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_EMAIL) &&
           verifier.VerifyString(email()) &&
           VerifyOffset(verifier, VT_FIRST_NAME) &&
           verifier.VerifyString(first_name()) &&
           VerifyOffset(verifier, VT_LAST_NAME) &&
           verifier.VerifyString(last_name()) &&
           VerifyOffset(verifier, VT_ADDRESS) &&
           verifier.VerifyTable(address()) &&
           VerifyOffset(verifier, VT_ROLES) &&
           verifier.VerifyVector(roles()) &&
           verifier.VerifyVectorOfStrings(roles()) &&
           verifier.EndTable();
  }
};

struct CreateUserRequestBuilder {
  typedef CreateUserRequest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_email(::flatbuffers::Offset<::flatbuffers::String> email) {
    fbb_.AddOffset(CreateUserRequest::VT_EMAIL, email);
  }
  void add_first_name(::flatbuffers::Offset<::flatbuffers::String> first_name) {
    fbb_.AddOffset(CreateUserRequest::VT_FIRST_NAME, first_name);
  }
  void add_last_name(::flatbuffers::Offset<::flatbuffers::String> last_name) {
    fbb_.AddOffset(CreateUserRequest::VT_LAST_NAME, last_name);
  }
  void add_address(::flatbuffers::Offset<common::Address> address) {
    fbb_.AddOffset(CreateUserRequest::VT_ADDRESS, address);
  }
  void add_roles(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> roles) {
    fbb_.AddOffset(CreateUserRequest::VT_ROLES, roles);
  }
  explicit CreateUserRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CreateUserRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CreateUserRequest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CreateUserRequest> CreateCreateUserRequest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> email = 0,
    ::flatbuffers::Offset<::flatbuffers::String> first_name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> last_name = 0,
    ::flatbuffers::Offset<common::Address> address = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> roles = 0) {
  CreateUserRequestBuilder builder_(_fbb);
  builder_.add_roles(roles);
  builder_.add_address(address);
  builder_.add_last_name(last_name);
  builder_.add_first_name(first_name);
  builder_.add_email(email);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<CreateUserRequest> CreateCreateUserRequestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *email = nullptr,
    const char *first_name = nullptr,
    const char *last_name = nullptr,
    ::flatbuffers::Offset<common::Address> address = 0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *roles = nullptr) {
  auto email__ = email ? _fbb.CreateString(email) : 0;
  auto first_name__ = first_name ? _fbb.CreateString(first_name) : 0;
  auto last_name__ = last_name ? _fbb.CreateString(last_name) : 0;
  auto roles__ = roles ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*roles) : 0;
  return services::CreateCreateUserRequest(
      _fbb,
      email__,
      first_name__,
      last_name__,
      address,
      roles__);
}

struct CreateUserResponse FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CreateUserResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USER = 4,
    VT_SUCCESS = 6,
    VT_MESSAGE = 8
  };
  const services::User *user() const {
    return GetPointer<const services::User *>(VT_USER);
  }
  bool success() const {
    return GetField<uint8_t>(VT_SUCCESS, 0) != 0;
  }
  const ::flatbuffers::String *message() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MESSAGE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USER) &&
           verifier.VerifyTable(user()) &&
           VerifyField<uint8_t>(verifier, VT_SUCCESS, 1) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(message()) &&
           verifier.EndTable();
  }
};

struct CreateUserResponseBuilder {
  typedef CreateUserResponse Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_user(::flatbuffers::Offset<services::User> user) {
    fbb_.AddOffset(CreateUserResponse::VT_USER, user);
  }
  void add_success(bool success) {
    fbb_.AddElement<uint8_t>(CreateUserResponse::VT_SUCCESS, static_cast<uint8_t>(success), 0);
  }
  void add_message(::flatbuffers::Offset<::flatbuffers::String> message) {
    fbb_.AddOffset(CreateUserResponse::VT_MESSAGE, message);
  }
  explicit CreateUserResponseBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CreateUserResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CreateUserResponse>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CreateUserResponse> CreateCreateUserResponse(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<services::User> user = 0,
    bool success = false,
    ::flatbuffers::Offset<::flatbuffers::String> message = 0) {
  CreateUserResponseBuilder builder_(_fbb);
  builder_.add_message(message);
  builder_.add_user(user);
  builder_.add_success(success);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<CreateUserResponse> CreateCreateUserResponseDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<services::User> user = 0,
    bool success = false,
    const char *message = nullptr) {
  auto message__ = message ? _fbb.CreateString(message) : 0;
  return services::CreateCreateUserResponse(
      _fbb,
      user,
      success,
      message__);
}

struct GetUserRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GetUserRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USER_ID = 4
  };
  const ::flatbuffers::String *user_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USER_ID);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USER_ID) &&
           verifier.VerifyString(user_id()) &&
           verifier.EndTable();
  }
};

struct GetUserRequestBuilder {
  typedef GetUserRequest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_user_id(::flatbuffers::Offset<::flatbuffers::String> user_id) {
    fbb_.AddOffset(GetUserRequest::VT_USER_ID, user_id);
  }
  explicit GetUserRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GetUserRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GetUserRequest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GetUserRequest> CreateGetUserRequest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> user_id = 0) {
  GetUserRequestBuilder builder_(_fbb);
  builder_.add_user_id(user_id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<GetUserRequest> CreateGetUserRequestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *user_id = nullptr) {
  auto user_id__ = user_id ? _fbb.CreateString(user_id) : 0;
  return services::CreateGetUserRequest(
      _fbb,
      user_id__);
}

struct GetUserResponse FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GetUserResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USER = 4,
    VT_FOUND = 6
  };
  const services::User *user() const {
    return GetPointer<const services::User *>(VT_USER);
  }
  bool found() const {
    return GetField<uint8_t>(VT_FOUND, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USER) &&
           verifier.VerifyTable(user()) &&
           VerifyField<uint8_t>(verifier, VT_FOUND, 1) &&
           verifier.EndTable();
  }
};

struct GetUserResponseBuilder {
  typedef GetUserResponse Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_user(::flatbuffers::Offset<services::User> user) {
    fbb_.AddOffset(GetUserResponse::VT_USER, user);
  }
  void add_found(bool found) {
    fbb_.AddElement<uint8_t>(GetUserResponse::VT_FOUND, static_cast<uint8_t>(found), 0);
  }
  explicit GetUserResponseBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GetUserResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GetUserResponse>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GetUserResponse> CreateGetUserResponse(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<services::User> user = 0,
    bool found = false) {
  GetUserResponseBuilder builder_(_fbb);
  builder_.add_user(user);
  builder_.add_found(found);
  return builder_.Finish();
}

struct UpdateUserStatusRequest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UpdateUserStatusRequestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USER_ID = 4,
    VT_NEW_STATUS = 6
  };
  const ::flatbuffers::String *user_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USER_ID);
  }
  common::Status new_status() const {
    return static_cast<common::Status>(GetField<int32_t>(VT_NEW_STATUS, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USER_ID) &&
           verifier.VerifyString(user_id()) &&
           VerifyField<int32_t>(verifier, VT_NEW_STATUS, 4) &&
           verifier.EndTable();
  }
};

struct UpdateUserStatusRequestBuilder {
  typedef UpdateUserStatusRequest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_user_id(::flatbuffers::Offset<::flatbuffers::String> user_id) {
    fbb_.AddOffset(UpdateUserStatusRequest::VT_USER_ID, user_id);
  }
  void add_new_status(common::Status new_status) {
    fbb_.AddElement<int32_t>(UpdateUserStatusRequest::VT_NEW_STATUS, static_cast<int32_t>(new_status), 0);
  }
  explicit UpdateUserStatusRequestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<UpdateUserStatusRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<UpdateUserStatusRequest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<UpdateUserStatusRequest> CreateUpdateUserStatusRequest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> user_id = 0,
    common::Status new_status = common::Status_STATUS_UNKNOWN) {
  UpdateUserStatusRequestBuilder builder_(_fbb);
  builder_.add_new_status(new_status);
  builder_.add_user_id(user_id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<UpdateUserStatusRequest> CreateUpdateUserStatusRequestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *user_id = nullptr,
    common::Status new_status = common::Status_STATUS_UNKNOWN) {
  auto user_id__ = user_id ? _fbb.CreateString(user_id) : 0;
  return services::CreateUpdateUserStatusRequest(
      _fbb,
      user_id__,
      new_status);
}

struct UpdateUserStatusResponse FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UpdateUserStatusResponseBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SUCCESS = 4,
    VT_MESSAGE = 6
  };
  bool success() const {
    return GetField<uint8_t>(VT_SUCCESS, 0) != 0;
  }
  const ::flatbuffers::String *message() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MESSAGE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_SUCCESS, 1) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(message()) &&
           verifier.EndTable();
  }
};

struct UpdateUserStatusResponseBuilder {
  typedef UpdateUserStatusResponse Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_success(bool success) {
    fbb_.AddElement<uint8_t>(UpdateUserStatusResponse::VT_SUCCESS, static_cast<uint8_t>(success), 0);
  }
  void add_message(::flatbuffers::Offset<::flatbuffers::String> message) {
    fbb_.AddOffset(UpdateUserStatusResponse::VT_MESSAGE, message);
  }
  explicit UpdateUserStatusResponseBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<UpdateUserStatusResponse> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<UpdateUserStatusResponse>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<UpdateUserStatusResponse> CreateUpdateUserStatusResponse(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool success = false,
    ::flatbuffers::Offset<::flatbuffers::String> message = 0) {
  UpdateUserStatusResponseBuilder builder_(_fbb);
  builder_.add_message(message);
  builder_.add_success(success);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<UpdateUserStatusResponse> CreateUpdateUserStatusResponseDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool success = false,
    const char *message = nullptr) {
  auto message__ = message ? _fbb.CreateString(message) : 0;
  return services::CreateUpdateUserStatusResponse(
      _fbb,
      success,
      message__);
}

}  // namespace services

#endif  // FLATBUFFERS_GENERATED_USERSERVICE_SERVICES_H_
