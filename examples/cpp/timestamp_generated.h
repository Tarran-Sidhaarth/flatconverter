// DO NOT EDIT!
// cpp generated by Buffman ðŸ’ª
// Versions:
// 		Buffman: 1.0.0
// 		Flatc: v25.2.10


#ifndef FLATBUFFERS_GENERATED_TIMESTAMP_COMMON_H_
#define FLATBUFFERS_GENERATED_TIMESTAMP_COMMON_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace common {

struct Timestamp;
struct TimestampBuilder;

struct Timestamp FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TimestampBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SECONDS = 4,
    VT_NANOS = 6
  };
  int64_t seconds() const {
    return GetField<int64_t>(VT_SECONDS, 0);
  }
  int32_t nanos() const {
    return GetField<int32_t>(VT_NANOS, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_SECONDS, 8) &&
           VerifyField<int32_t>(verifier, VT_NANOS, 4) &&
           verifier.EndTable();
  }
};

struct TimestampBuilder {
  typedef Timestamp Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_seconds(int64_t seconds) {
    fbb_.AddElement<int64_t>(Timestamp::VT_SECONDS, seconds, 0);
  }
  void add_nanos(int32_t nanos) {
    fbb_.AddElement<int32_t>(Timestamp::VT_NANOS, nanos, 0);
  }
  explicit TimestampBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Timestamp> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Timestamp>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Timestamp> CreateTimestamp(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int64_t seconds = 0,
    int32_t nanos = 0) {
  TimestampBuilder builder_(_fbb);
  builder_.add_seconds(seconds);
  builder_.add_nanos(nanos);
  return builder_.Finish();
}

}  // namespace common

#endif  // FLATBUFFERS_GENERATED_TIMESTAMP_COMMON_H_
