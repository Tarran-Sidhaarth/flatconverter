// DO NOT EDIT!
// csharp generated by Buffman ðŸ’ª
// Versions:
//		Buffman: 1.0.0
//		Flatc: v25.2.10
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace services
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct GetUserNotificationsResponse : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static GetUserNotificationsResponse GetRootAsGetUserNotificationsResponse(ByteBuffer _bb) { return GetRootAsGetUserNotificationsResponse(_bb, new GetUserNotificationsResponse()); }
  public static GetUserNotificationsResponse GetRootAsGetUserNotificationsResponse(ByteBuffer _bb, GetUserNotificationsResponse obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GetUserNotificationsResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public services.Notification? Notifications(int j) { int o = __p.__offset(4); return o != 0 ? (services.Notification?)(new services.Notification()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int NotificationsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int TotalCount { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public services.User? UserInfo { get { int o = __p.__offset(8); return o != 0 ? (services.User?)(new services.User()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<services.GetUserNotificationsResponse> CreateGetUserNotificationsResponse(FlatBufferBuilder builder,
      VectorOffset notificationsOffset = default(VectorOffset),
      int total_count = 0,
      Offset<services.User> user_infoOffset = default(Offset<services.User>)) {
    builder.StartTable(3);
    GetUserNotificationsResponse.AddUserInfo(builder, user_infoOffset);
    GetUserNotificationsResponse.AddTotalCount(builder, total_count);
    GetUserNotificationsResponse.AddNotifications(builder, notificationsOffset);
    return GetUserNotificationsResponse.EndGetUserNotificationsResponse(builder);
  }

  public static void StartGetUserNotificationsResponse(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddNotifications(FlatBufferBuilder builder, VectorOffset notificationsOffset) { builder.AddOffset(0, notificationsOffset.Value, 0); }
  public static VectorOffset CreateNotificationsVector(FlatBufferBuilder builder, Offset<services.Notification>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateNotificationsVectorBlock(FlatBufferBuilder builder, Offset<services.Notification>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNotificationsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<services.Notification>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNotificationsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<services.Notification>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartNotificationsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTotalCount(FlatBufferBuilder builder, int totalCount) { builder.AddInt(1, totalCount, 0); }
  public static void AddUserInfo(FlatBufferBuilder builder, Offset<services.User> userInfoOffset) { builder.AddOffset(2, userInfoOffset.Value, 0); }
  public static Offset<services.GetUserNotificationsResponse> EndGetUserNotificationsResponse(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<services.GetUserNotificationsResponse>(o);
  }
}


static public class GetUserNotificationsResponseVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfTables(tablePos, 4 /*Notifications*/, services.NotificationVerify.Verify, false)
      && verifier.VerifyField(tablePos, 6 /*TotalCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyTable(tablePos, 8 /*UserInfo*/, services.UserVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
