// DO NOT EDIT!
// Csharp generated by Buffman ðŸ’ª
// Versions:
//		Buffman: 1.0.0
//		Flatc: v25.2.10
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace services
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct UserActivity : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static UserActivity GetRootAsUserActivity(ByteBuffer _bb) { return GetRootAsUserActivity(_bb, new UserActivity()); }
  public static UserActivity GetRootAsUserActivity(ByteBuffer _bb, UserActivity obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public UserActivity __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string ActivityId { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetActivityIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetActivityIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetActivityIdArray() { return __p.__vector_as_array<byte>(4); }
  public string UserId { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetUserIdBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetUserIdBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetUserIdArray() { return __p.__vector_as_array<byte>(6); }
  public string Action { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetActionBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetActionBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetActionArray() { return __p.__vector_as_array<byte>(8); }
  public string Resource { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetResourceBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetResourceBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetResourceArray() { return __p.__vector_as_array<byte>(10); }
  public common.Timestamp? Timestamp { get { int o = __p.__offset(12); return o != 0 ? (common.Timestamp?)(new common.Timestamp()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public services.UserActivity_.PropertiesEntry? Properties(int j) { int o = __p.__offset(14); return o != 0 ? (services.UserActivity_.PropertiesEntry?)(new services.UserActivity_.PropertiesEntry()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PropertiesLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string SessionId { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSessionIdBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetSessionIdBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetSessionIdArray() { return __p.__vector_as_array<byte>(16); }

  public static Offset<services.UserActivity> CreateUserActivity(FlatBufferBuilder builder,
      StringOffset activity_idOffset = default(StringOffset),
      StringOffset user_idOffset = default(StringOffset),
      StringOffset actionOffset = default(StringOffset),
      StringOffset resourceOffset = default(StringOffset),
      Offset<common.Timestamp> timestampOffset = default(Offset<common.Timestamp>),
      VectorOffset propertiesOffset = default(VectorOffset),
      StringOffset session_idOffset = default(StringOffset)) {
    builder.StartTable(7);
    UserActivity.AddSessionId(builder, session_idOffset);
    UserActivity.AddProperties(builder, propertiesOffset);
    UserActivity.AddTimestamp(builder, timestampOffset);
    UserActivity.AddResource(builder, resourceOffset);
    UserActivity.AddAction(builder, actionOffset);
    UserActivity.AddUserId(builder, user_idOffset);
    UserActivity.AddActivityId(builder, activity_idOffset);
    return UserActivity.EndUserActivity(builder);
  }

  public static void StartUserActivity(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddActivityId(FlatBufferBuilder builder, StringOffset activityIdOffset) { builder.AddOffset(0, activityIdOffset.Value, 0); }
  public static void AddUserId(FlatBufferBuilder builder, StringOffset userIdOffset) { builder.AddOffset(1, userIdOffset.Value, 0); }
  public static void AddAction(FlatBufferBuilder builder, StringOffset actionOffset) { builder.AddOffset(2, actionOffset.Value, 0); }
  public static void AddResource(FlatBufferBuilder builder, StringOffset resourceOffset) { builder.AddOffset(3, resourceOffset.Value, 0); }
  public static void AddTimestamp(FlatBufferBuilder builder, Offset<common.Timestamp> timestampOffset) { builder.AddOffset(4, timestampOffset.Value, 0); }
  public static void AddProperties(FlatBufferBuilder builder, VectorOffset propertiesOffset) { builder.AddOffset(5, propertiesOffset.Value, 0); }
  public static VectorOffset CreatePropertiesVector(FlatBufferBuilder builder, Offset<services.UserActivity_.PropertiesEntry>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePropertiesVectorBlock(FlatBufferBuilder builder, Offset<services.UserActivity_.PropertiesEntry>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePropertiesVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<services.UserActivity_.PropertiesEntry>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePropertiesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<services.UserActivity_.PropertiesEntry>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPropertiesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSessionId(FlatBufferBuilder builder, StringOffset sessionIdOffset) { builder.AddOffset(6, sessionIdOffset.Value, 0); }
  public static Offset<services.UserActivity> EndUserActivity(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<services.UserActivity>(o);
  }
}


static public class UserActivityVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*ActivityId*/, false)
      && verifier.VerifyString(tablePos, 6 /*UserId*/, false)
      && verifier.VerifyString(tablePos, 8 /*Action*/, false)
      && verifier.VerifyString(tablePos, 10 /*Resource*/, false)
      && verifier.VerifyTable(tablePos, 12 /*Timestamp*/, common.TimestampVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 14 /*Properties*/, services.UserActivity_.PropertiesEntryVerify.Verify, false)
      && verifier.VerifyString(tablePos, 16 /*SessionId*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
