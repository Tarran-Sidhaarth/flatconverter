// DO NOT EDIT!
// csharp generated by Buffman ðŸ’ª
// Versions:
//		Buffman: 1.0.0
//		Flatc: v25.2.10
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace services
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SystemMetricsResponse : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SystemMetricsResponse GetRootAsSystemMetricsResponse(ByteBuffer _bb) { return GetRootAsSystemMetricsResponse(_bb, new SystemMetricsResponse()); }
  public static SystemMetricsResponse GetRootAsSystemMetricsResponse(ByteBuffer _bb, SystemMetricsResponse obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SystemMetricsResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int TotalUsers { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ActiveUsers { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TotalNotificationsSent { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public double NotificationOpenRate { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  public services.SystemMetricsResponse_.ActivityCountsEntry? ActivityCounts(int j) { int o = __p.__offset(12); return o != 0 ? (services.SystemMetricsResponse_.ActivityCountsEntry?)(new services.SystemMetricsResponse_.ActivityCountsEntry()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ActivityCountsLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public common.Timestamp? GeneratedAt { get { int o = __p.__offset(14); return o != 0 ? (common.Timestamp?)(new common.Timestamp()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<services.SystemMetricsResponse> CreateSystemMetricsResponse(FlatBufferBuilder builder,
      int total_users = 0,
      int active_users = 0,
      int total_notifications_sent = 0,
      double notification_open_rate = 0.0,
      VectorOffset activity_countsOffset = default(VectorOffset),
      Offset<common.Timestamp> generated_atOffset = default(Offset<common.Timestamp>)) {
    builder.StartTable(6);
    SystemMetricsResponse.AddNotificationOpenRate(builder, notification_open_rate);
    SystemMetricsResponse.AddGeneratedAt(builder, generated_atOffset);
    SystemMetricsResponse.AddActivityCounts(builder, activity_countsOffset);
    SystemMetricsResponse.AddTotalNotificationsSent(builder, total_notifications_sent);
    SystemMetricsResponse.AddActiveUsers(builder, active_users);
    SystemMetricsResponse.AddTotalUsers(builder, total_users);
    return SystemMetricsResponse.EndSystemMetricsResponse(builder);
  }

  public static void StartSystemMetricsResponse(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddTotalUsers(FlatBufferBuilder builder, int totalUsers) { builder.AddInt(0, totalUsers, 0); }
  public static void AddActiveUsers(FlatBufferBuilder builder, int activeUsers) { builder.AddInt(1, activeUsers, 0); }
  public static void AddTotalNotificationsSent(FlatBufferBuilder builder, int totalNotificationsSent) { builder.AddInt(2, totalNotificationsSent, 0); }
  public static void AddNotificationOpenRate(FlatBufferBuilder builder, double notificationOpenRate) { builder.AddDouble(3, notificationOpenRate, 0.0); }
  public static void AddActivityCounts(FlatBufferBuilder builder, VectorOffset activityCountsOffset) { builder.AddOffset(4, activityCountsOffset.Value, 0); }
  public static VectorOffset CreateActivityCountsVector(FlatBufferBuilder builder, Offset<services.SystemMetricsResponse_.ActivityCountsEntry>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateActivityCountsVectorBlock(FlatBufferBuilder builder, Offset<services.SystemMetricsResponse_.ActivityCountsEntry>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateActivityCountsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<services.SystemMetricsResponse_.ActivityCountsEntry>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateActivityCountsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<services.SystemMetricsResponse_.ActivityCountsEntry>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartActivityCountsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddGeneratedAt(FlatBufferBuilder builder, Offset<common.Timestamp> generatedAtOffset) { builder.AddOffset(5, generatedAtOffset.Value, 0); }
  public static Offset<services.SystemMetricsResponse> EndSystemMetricsResponse(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<services.SystemMetricsResponse>(o);
  }
}


static public class SystemMetricsResponseVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*TotalUsers*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*ActiveUsers*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*TotalNotificationsSent*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*NotificationOpenRate*/, 8 /*double*/, 8, false)
      && verifier.VerifyVectorOfTables(tablePos, 12 /*ActivityCounts*/, services.SystemMetricsResponse_.ActivityCountsEntryVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 14 /*GeneratedAt*/, common.TimestampVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
