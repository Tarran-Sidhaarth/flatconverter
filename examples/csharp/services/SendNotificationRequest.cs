// DO NOT EDIT!
// Csharp generated by Buffman ðŸ’ª
// Versions:
//		Buffman: 1.0.0
//		Flatc: v25.2.10
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace services
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SendNotificationRequest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SendNotificationRequest GetRootAsSendNotificationRequest(ByteBuffer _bb) { return GetRootAsSendNotificationRequest(_bb, new SendNotificationRequest()); }
  public static SendNotificationRequest GetRootAsSendNotificationRequest(ByteBuffer _bb, SendNotificationRequest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SendNotificationRequest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string RecipientUserId { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRecipientUserIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetRecipientUserIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetRecipientUserIdArray() { return __p.__vector_as_array<byte>(4); }
  public services.NotificationType Type { get { int o = __p.__offset(6); return o != 0 ? (services.NotificationType)__p.bb.GetInt(o + __p.bb_pos) : services.NotificationType.NOTIFICATION_TYPE_UNKNOWN; } }
  public string Title { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetTitleBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetTitleArray() { return __p.__vector_as_array<byte>(8); }
  public string Content { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetContentBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetContentBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetContentArray() { return __p.__vector_as_array<byte>(10); }
  public services.Priority Priority { get { int o = __p.__offset(12); return o != 0 ? (services.Priority)__p.bb.GetInt(o + __p.bb_pos) : services.Priority.PRIORITY_LOW; } }
  public services.SendNotificationRequest_.MetadataEntry? Metadata(int j) { int o = __p.__offset(14); return o != 0 ? (services.SendNotificationRequest_.MetadataEntry?)(new services.SendNotificationRequest_.MetadataEntry()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int MetadataLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<services.SendNotificationRequest> CreateSendNotificationRequest(FlatBufferBuilder builder,
      StringOffset recipient_user_idOffset = default(StringOffset),
      services.NotificationType type = services.NotificationType.NOTIFICATION_TYPE_UNKNOWN,
      StringOffset titleOffset = default(StringOffset),
      StringOffset contentOffset = default(StringOffset),
      services.Priority priority = services.Priority.PRIORITY_LOW,
      VectorOffset metadataOffset = default(VectorOffset)) {
    builder.StartTable(6);
    SendNotificationRequest.AddMetadata(builder, metadataOffset);
    SendNotificationRequest.AddPriority(builder, priority);
    SendNotificationRequest.AddContent(builder, contentOffset);
    SendNotificationRequest.AddTitle(builder, titleOffset);
    SendNotificationRequest.AddType(builder, type);
    SendNotificationRequest.AddRecipientUserId(builder, recipient_user_idOffset);
    return SendNotificationRequest.EndSendNotificationRequest(builder);
  }

  public static void StartSendNotificationRequest(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddRecipientUserId(FlatBufferBuilder builder, StringOffset recipientUserIdOffset) { builder.AddOffset(0, recipientUserIdOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, services.NotificationType type) { builder.AddInt(1, (int)type, 0); }
  public static void AddTitle(FlatBufferBuilder builder, StringOffset titleOffset) { builder.AddOffset(2, titleOffset.Value, 0); }
  public static void AddContent(FlatBufferBuilder builder, StringOffset contentOffset) { builder.AddOffset(3, contentOffset.Value, 0); }
  public static void AddPriority(FlatBufferBuilder builder, services.Priority priority) { builder.AddInt(4, (int)priority, 0); }
  public static void AddMetadata(FlatBufferBuilder builder, VectorOffset metadataOffset) { builder.AddOffset(5, metadataOffset.Value, 0); }
  public static VectorOffset CreateMetadataVector(FlatBufferBuilder builder, Offset<services.SendNotificationRequest_.MetadataEntry>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMetadataVectorBlock(FlatBufferBuilder builder, Offset<services.SendNotificationRequest_.MetadataEntry>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMetadataVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<services.SendNotificationRequest_.MetadataEntry>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateMetadataVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<services.SendNotificationRequest_.MetadataEntry>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartMetadataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<services.SendNotificationRequest> EndSendNotificationRequest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<services.SendNotificationRequest>(o);
  }
}


static public class SendNotificationRequestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*RecipientUserId*/, false)
      && verifier.VerifyField(tablePos, 6 /*Type*/, 4 /*services.NotificationType*/, 4, false)
      && verifier.VerifyString(tablePos, 8 /*Title*/, false)
      && verifier.VerifyString(tablePos, 10 /*Content*/, false)
      && verifier.VerifyField(tablePos, 12 /*Priority*/, 4 /*services.Priority*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 14 /*Metadata*/, services.SendNotificationRequest_.MetadataEntryVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
