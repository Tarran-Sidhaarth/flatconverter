// DO NOT EDIT!
// Csharp generated by Buffman ðŸ’ª
// Versions:
//		Buffman: 1.0.0
//		Flatc: v25.2.10
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace services
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct UserAnalyticsResponse : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static UserAnalyticsResponse GetRootAsUserAnalyticsResponse(ByteBuffer _bb) { return GetRootAsUserAnalyticsResponse(_bb, new UserAnalyticsResponse()); }
  public static UserAnalyticsResponse GetRootAsUserAnalyticsResponse(ByteBuffer _bb, UserAnalyticsResponse obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public UserAnalyticsResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public services.User? User { get { int o = __p.__offset(4); return o != 0 ? (services.User?)(new services.User()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public services.UserActivity? Activities(int j) { int o = __p.__offset(6); return o != 0 ? (services.UserActivity?)(new services.UserActivity()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ActivitiesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public services.NotificationMetrics? NotificationMetrics(int j) { int o = __p.__offset(8); return o != 0 ? (services.NotificationMetrics?)(new services.NotificationMetrics()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int NotificationMetricsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int TotalActivities { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TotalNotificationsSent { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TotalNotificationsOpened { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<services.UserAnalyticsResponse> CreateUserAnalyticsResponse(FlatBufferBuilder builder,
      Offset<services.User> userOffset = default(Offset<services.User>),
      VectorOffset activitiesOffset = default(VectorOffset),
      VectorOffset notification_metricsOffset = default(VectorOffset),
      int total_activities = 0,
      int total_notifications_sent = 0,
      int total_notifications_opened = 0) {
    builder.StartTable(6);
    UserAnalyticsResponse.AddTotalNotificationsOpened(builder, total_notifications_opened);
    UserAnalyticsResponse.AddTotalNotificationsSent(builder, total_notifications_sent);
    UserAnalyticsResponse.AddTotalActivities(builder, total_activities);
    UserAnalyticsResponse.AddNotificationMetrics(builder, notification_metricsOffset);
    UserAnalyticsResponse.AddActivities(builder, activitiesOffset);
    UserAnalyticsResponse.AddUser(builder, userOffset);
    return UserAnalyticsResponse.EndUserAnalyticsResponse(builder);
  }

  public static void StartUserAnalyticsResponse(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddUser(FlatBufferBuilder builder, Offset<services.User> userOffset) { builder.AddOffset(0, userOffset.Value, 0); }
  public static void AddActivities(FlatBufferBuilder builder, VectorOffset activitiesOffset) { builder.AddOffset(1, activitiesOffset.Value, 0); }
  public static VectorOffset CreateActivitiesVector(FlatBufferBuilder builder, Offset<services.UserActivity>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateActivitiesVectorBlock(FlatBufferBuilder builder, Offset<services.UserActivity>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateActivitiesVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<services.UserActivity>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateActivitiesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<services.UserActivity>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartActivitiesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddNotificationMetrics(FlatBufferBuilder builder, VectorOffset notificationMetricsOffset) { builder.AddOffset(2, notificationMetricsOffset.Value, 0); }
  public static VectorOffset CreateNotificationMetricsVector(FlatBufferBuilder builder, Offset<services.NotificationMetrics>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateNotificationMetricsVectorBlock(FlatBufferBuilder builder, Offset<services.NotificationMetrics>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNotificationMetricsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<services.NotificationMetrics>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNotificationMetricsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<services.NotificationMetrics>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartNotificationMetricsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTotalActivities(FlatBufferBuilder builder, int totalActivities) { builder.AddInt(3, totalActivities, 0); }
  public static void AddTotalNotificationsSent(FlatBufferBuilder builder, int totalNotificationsSent) { builder.AddInt(4, totalNotificationsSent, 0); }
  public static void AddTotalNotificationsOpened(FlatBufferBuilder builder, int totalNotificationsOpened) { builder.AddInt(5, totalNotificationsOpened, 0); }
  public static Offset<services.UserAnalyticsResponse> EndUserAnalyticsResponse(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<services.UserAnalyticsResponse>(o);
  }
}


static public class UserAnalyticsResponseVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyTable(tablePos, 4 /*User*/, services.UserVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 6 /*Activities*/, services.UserActivityVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 8 /*NotificationMetrics*/, services.NotificationMetricsVerify.Verify, false)
      && verifier.VerifyField(tablePos, 10 /*TotalActivities*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*TotalNotificationsSent*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*TotalNotificationsOpened*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
