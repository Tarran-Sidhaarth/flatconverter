// DO NOT EDIT!
// Csharp generated by Buffman ðŸ’ª
// Versions:
//		Buffman: 1.0.0
//		Flatc: v25.2.10
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace services
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct NotificationMetrics : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static NotificationMetrics GetRootAsNotificationMetrics(ByteBuffer _bb) { return GetRootAsNotificationMetrics(_bb, new NotificationMetrics()); }
  public static NotificationMetrics GetRootAsNotificationMetrics(ByteBuffer _bb, NotificationMetrics obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public NotificationMetrics __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string NotificationId { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNotificationIdBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNotificationIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNotificationIdArray() { return __p.__vector_as_array<byte>(4); }
  public services.NotificationType Type { get { int o = __p.__offset(6); return o != 0 ? (services.NotificationType)__p.bb.GetInt(o + __p.bb_pos) : services.NotificationType.NOTIFICATION_TYPE_UNKNOWN; } }
  public bool Delivered { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool Opened { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool Clicked { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public common.Timestamp? DeliveredAt { get { int o = __p.__offset(14); return o != 0 ? (common.Timestamp?)(new common.Timestamp()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public common.Timestamp? OpenedAt { get { int o = __p.__offset(16); return o != 0 ? (common.Timestamp?)(new common.Timestamp()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public common.Timestamp? ClickedAt { get { int o = __p.__offset(18); return o != 0 ? (common.Timestamp?)(new common.Timestamp()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<services.NotificationMetrics> CreateNotificationMetrics(FlatBufferBuilder builder,
      StringOffset notification_idOffset = default(StringOffset),
      services.NotificationType type = services.NotificationType.NOTIFICATION_TYPE_UNKNOWN,
      bool delivered = false,
      bool opened = false,
      bool clicked = false,
      Offset<common.Timestamp> delivered_atOffset = default(Offset<common.Timestamp>),
      Offset<common.Timestamp> opened_atOffset = default(Offset<common.Timestamp>),
      Offset<common.Timestamp> clicked_atOffset = default(Offset<common.Timestamp>)) {
    builder.StartTable(8);
    NotificationMetrics.AddClickedAt(builder, clicked_atOffset);
    NotificationMetrics.AddOpenedAt(builder, opened_atOffset);
    NotificationMetrics.AddDeliveredAt(builder, delivered_atOffset);
    NotificationMetrics.AddType(builder, type);
    NotificationMetrics.AddNotificationId(builder, notification_idOffset);
    NotificationMetrics.AddClicked(builder, clicked);
    NotificationMetrics.AddOpened(builder, opened);
    NotificationMetrics.AddDelivered(builder, delivered);
    return NotificationMetrics.EndNotificationMetrics(builder);
  }

  public static void StartNotificationMetrics(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddNotificationId(FlatBufferBuilder builder, StringOffset notificationIdOffset) { builder.AddOffset(0, notificationIdOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, services.NotificationType type) { builder.AddInt(1, (int)type, 0); }
  public static void AddDelivered(FlatBufferBuilder builder, bool delivered) { builder.AddBool(2, delivered, false); }
  public static void AddOpened(FlatBufferBuilder builder, bool opened) { builder.AddBool(3, opened, false); }
  public static void AddClicked(FlatBufferBuilder builder, bool clicked) { builder.AddBool(4, clicked, false); }
  public static void AddDeliveredAt(FlatBufferBuilder builder, Offset<common.Timestamp> deliveredAtOffset) { builder.AddOffset(5, deliveredAtOffset.Value, 0); }
  public static void AddOpenedAt(FlatBufferBuilder builder, Offset<common.Timestamp> openedAtOffset) { builder.AddOffset(6, openedAtOffset.Value, 0); }
  public static void AddClickedAt(FlatBufferBuilder builder, Offset<common.Timestamp> clickedAtOffset) { builder.AddOffset(7, clickedAtOffset.Value, 0); }
  public static Offset<services.NotificationMetrics> EndNotificationMetrics(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<services.NotificationMetrics>(o);
  }
}


static public class NotificationMetricsVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*NotificationId*/, false)
      && verifier.VerifyField(tablePos, 6 /*Type*/, 4 /*services.NotificationType*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*Delivered*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 10 /*Opened*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 12 /*Clicked*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTable(tablePos, 14 /*DeliveredAt*/, common.TimestampVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 16 /*OpenedAt*/, common.TimestampVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 18 /*ClickedAt*/, common.TimestampVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
