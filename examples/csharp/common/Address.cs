// DO NOT EDIT!
// Csharp generated by Buffman ðŸ’ª
// Versions:
//		Buffman: 1.0.0
//		Flatc: v25.2.10
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace common
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Address : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static Address GetRootAsAddress(ByteBuffer _bb) { return GetRootAsAddress(_bb, new Address()); }
  public static Address GetRootAsAddress(ByteBuffer _bb, Address obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Address __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Street { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStreetBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetStreetBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetStreetArray() { return __p.__vector_as_array<byte>(4); }
  public string City { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCityBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetCityBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetCityArray() { return __p.__vector_as_array<byte>(6); }
  public string State { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStateBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetStateBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetStateArray() { return __p.__vector_as_array<byte>(8); }
  public string PostalCode { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPostalCodeBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetPostalCodeBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetPostalCodeArray() { return __p.__vector_as_array<byte>(10); }
  public string Country { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCountryBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetCountryBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetCountryArray() { return __p.__vector_as_array<byte>(12); }

  public static Offset<common.Address> CreateAddress(FlatBufferBuilder builder,
      StringOffset streetOffset = default(StringOffset),
      StringOffset cityOffset = default(StringOffset),
      StringOffset stateOffset = default(StringOffset),
      StringOffset postal_codeOffset = default(StringOffset),
      StringOffset countryOffset = default(StringOffset)) {
    builder.StartTable(5);
    Address.AddCountry(builder, countryOffset);
    Address.AddPostalCode(builder, postal_codeOffset);
    Address.AddState(builder, stateOffset);
    Address.AddCity(builder, cityOffset);
    Address.AddStreet(builder, streetOffset);
    return Address.EndAddress(builder);
  }

  public static void StartAddress(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddStreet(FlatBufferBuilder builder, StringOffset streetOffset) { builder.AddOffset(0, streetOffset.Value, 0); }
  public static void AddCity(FlatBufferBuilder builder, StringOffset cityOffset) { builder.AddOffset(1, cityOffset.Value, 0); }
  public static void AddState(FlatBufferBuilder builder, StringOffset stateOffset) { builder.AddOffset(2, stateOffset.Value, 0); }
  public static void AddPostalCode(FlatBufferBuilder builder, StringOffset postalCodeOffset) { builder.AddOffset(3, postalCodeOffset.Value, 0); }
  public static void AddCountry(FlatBufferBuilder builder, StringOffset countryOffset) { builder.AddOffset(4, countryOffset.Value, 0); }
  public static Offset<common.Address> EndAddress(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<common.Address>(o);
  }
}


static public class AddressVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Street*/, false)
      && verifier.VerifyString(tablePos, 6 /*City*/, false)
      && verifier.VerifyString(tablePos, 8 /*State*/, false)
      && verifier.VerifyString(tablePos, 10 /*PostalCode*/, false)
      && verifier.VerifyString(tablePos, 12 /*Country*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
