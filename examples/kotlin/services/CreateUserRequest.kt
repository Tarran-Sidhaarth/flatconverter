// DO NOT EDIT!
// Kotlin files generated by Buffman ðŸ’ª.
// Versions:
//		Buffman: 0.0.1
// 		Flatc: 25.2.10

package services

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class CreateUserRequest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : CreateUserRequest {
        __init(_i, _bb)
        return this
    }
    val email : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val emailAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun emailInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    val firstName : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val firstNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun firstNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    val lastName : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val lastNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun lastNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    val address : common.Address? get() = address(common.Address())
    fun address(obj: common.Address) : common.Address? {
        val o = __offset(10)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    fun roles(j: Int) : String? {
        val o = __offset(12)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val rolesLength : Int
        get() {
            val o = __offset(12); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_25_2_10()
        fun getRootAsCreateUserRequest(_bb: ByteBuffer): CreateUserRequest = getRootAsCreateUserRequest(_bb, CreateUserRequest())
        fun getRootAsCreateUserRequest(_bb: ByteBuffer, obj: CreateUserRequest): CreateUserRequest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createCreateUserRequest(builder: FlatBufferBuilder, emailOffset: Int, firstNameOffset: Int, lastNameOffset: Int, addressOffset: Int, rolesOffset: Int) : Int {
            builder.startTable(5)
            addRoles(builder, rolesOffset)
            addAddress(builder, addressOffset)
            addLastName(builder, lastNameOffset)
            addFirstName(builder, firstNameOffset)
            addEmail(builder, emailOffset)
            return endCreateUserRequest(builder)
        }
        fun startCreateUserRequest(builder: FlatBufferBuilder) = builder.startTable(5)
        fun addEmail(builder: FlatBufferBuilder, email: Int) = builder.addOffset(0, email, 0)
        fun addFirstName(builder: FlatBufferBuilder, firstName: Int) = builder.addOffset(1, firstName, 0)
        fun addLastName(builder: FlatBufferBuilder, lastName: Int) = builder.addOffset(2, lastName, 0)
        fun addAddress(builder: FlatBufferBuilder, address: Int) = builder.addOffset(3, address, 0)
        fun addRoles(builder: FlatBufferBuilder, roles: Int) = builder.addOffset(4, roles, 0)
        fun createRolesVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startRolesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endCreateUserRequest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
