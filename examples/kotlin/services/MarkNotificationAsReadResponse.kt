// automatically generated by the FlatBuffers compiler, do not modify

package services

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class MarkNotificationAsReadResponse : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : MarkNotificationAsReadResponse {
        __init(_i, _bb)
        return this
    }
    val success : Boolean
        get() {
            val o = __offset(4)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    val message : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val messageAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun messageInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_25_2_10()
        fun getRootAsMarkNotificationAsReadResponse(_bb: ByteBuffer): MarkNotificationAsReadResponse = getRootAsMarkNotificationAsReadResponse(_bb, MarkNotificationAsReadResponse())
        fun getRootAsMarkNotificationAsReadResponse(_bb: ByteBuffer, obj: MarkNotificationAsReadResponse): MarkNotificationAsReadResponse {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createMarkNotificationAsReadResponse(builder: FlatBufferBuilder, success: Boolean, messageOffset: Int) : Int {
            builder.startTable(2)
            addMessage(builder, messageOffset)
            addSuccess(builder, success)
            return endMarkNotificationAsReadResponse(builder)
        }
        fun startMarkNotificationAsReadResponse(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addSuccess(builder: FlatBufferBuilder, success: Boolean) = builder.addBoolean(0, success, false)
        fun addMessage(builder: FlatBufferBuilder, message: Int) = builder.addOffset(1, message, 0)
        fun endMarkNotificationAsReadResponse(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
