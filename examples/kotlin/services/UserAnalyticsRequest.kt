// DO NOT EDIT!
// Kotlin generated by Buffman ðŸ’ª
// Versions:
//		Buffman: 1.0.0
//		Flatc: v25.2.10

package services

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class UserAnalyticsRequest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : UserAnalyticsRequest {
        __init(_i, _bb)
        return this
    }
    val userId : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val userIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun userIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    val startDate : common.Timestamp? get() = startDate(common.Timestamp())
    fun startDate(obj: common.Timestamp) : common.Timestamp? {
        val o = __offset(6)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    val endDate : common.Timestamp? get() = endDate(common.Timestamp())
    fun endDate(obj: common.Timestamp) : common.Timestamp? {
        val o = __offset(8)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_25_2_10()
        fun getRootAsUserAnalyticsRequest(_bb: ByteBuffer): UserAnalyticsRequest = getRootAsUserAnalyticsRequest(_bb, UserAnalyticsRequest())
        fun getRootAsUserAnalyticsRequest(_bb: ByteBuffer, obj: UserAnalyticsRequest): UserAnalyticsRequest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createUserAnalyticsRequest(builder: FlatBufferBuilder, userIdOffset: Int, startDateOffset: Int, endDateOffset: Int) : Int {
            builder.startTable(3)
            addEndDate(builder, endDateOffset)
            addStartDate(builder, startDateOffset)
            addUserId(builder, userIdOffset)
            return endUserAnalyticsRequest(builder)
        }
        fun startUserAnalyticsRequest(builder: FlatBufferBuilder) = builder.startTable(3)
        fun addUserId(builder: FlatBufferBuilder, userId: Int) = builder.addOffset(0, userId, 0)
        fun addStartDate(builder: FlatBufferBuilder, startDate: Int) = builder.addOffset(1, startDate, 0)
        fun addEndDate(builder: FlatBufferBuilder, endDate: Int) = builder.addOffset(2, endDate, 0)
        fun endUserAnalyticsRequest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
