// automatically generated by the FlatBuffers compiler, do not modify

package services

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class MarkNotificationAsReadRequest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : MarkNotificationAsReadRequest {
        __init(_i, _bb)
        return this
    }
    val notificationId : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val notificationIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun notificationIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    val userId : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val userIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun userIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_25_2_10()
        fun getRootAsMarkNotificationAsReadRequest(_bb: ByteBuffer): MarkNotificationAsReadRequest = getRootAsMarkNotificationAsReadRequest(_bb, MarkNotificationAsReadRequest())
        fun getRootAsMarkNotificationAsReadRequest(_bb: ByteBuffer, obj: MarkNotificationAsReadRequest): MarkNotificationAsReadRequest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createMarkNotificationAsReadRequest(builder: FlatBufferBuilder, notificationIdOffset: Int, userIdOffset: Int) : Int {
            builder.startTable(2)
            addUserId(builder, userIdOffset)
            addNotificationId(builder, notificationIdOffset)
            return endMarkNotificationAsReadRequest(builder)
        }
        fun startMarkNotificationAsReadRequest(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addNotificationId(builder: FlatBufferBuilder, notificationId: Int) = builder.addOffset(0, notificationId, 0)
        fun addUserId(builder: FlatBufferBuilder, userId: Int) = builder.addOffset(1, userId, 0)
        fun endMarkNotificationAsReadRequest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
