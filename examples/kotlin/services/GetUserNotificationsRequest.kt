// DO NOT EDIT!
// Kotlin generated by Buffman ðŸ’ª
// Versions:
//		Buffman: 1.0.0
//		Flatc: v25.2.10

package services

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class GetUserNotificationsRequest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : GetUserNotificationsRequest {
        __init(_i, _bb)
        return this
    }
    val userId : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val userIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun userIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    val limit : Int
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    val offset : Int
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    val statusFilter : Int
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_25_2_10()
        fun getRootAsGetUserNotificationsRequest(_bb: ByteBuffer): GetUserNotificationsRequest = getRootAsGetUserNotificationsRequest(_bb, GetUserNotificationsRequest())
        fun getRootAsGetUserNotificationsRequest(_bb: ByteBuffer, obj: GetUserNotificationsRequest): GetUserNotificationsRequest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createGetUserNotificationsRequest(builder: FlatBufferBuilder, userIdOffset: Int, limit: Int, offset: Int, statusFilter: Int) : Int {
            builder.startTable(4)
            addStatusFilter(builder, statusFilter)
            addOffset(builder, offset)
            addLimit(builder, limit)
            addUserId(builder, userIdOffset)
            return endGetUserNotificationsRequest(builder)
        }
        fun startGetUserNotificationsRequest(builder: FlatBufferBuilder) = builder.startTable(4)
        fun addUserId(builder: FlatBufferBuilder, userId: Int) = builder.addOffset(0, userId, 0)
        fun addLimit(builder: FlatBufferBuilder, limit: Int) = builder.addInt(1, limit, 0)
        fun addOffset(builder: FlatBufferBuilder, offset: Int) = builder.addInt(2, offset, 0)
        fun addStatusFilter(builder: FlatBufferBuilder, statusFilter: Int) = builder.addInt(3, statusFilter, 0)
        fun endGetUserNotificationsRequest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
