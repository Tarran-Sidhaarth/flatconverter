// DO NOT EDIT!
// Kotlin files generated by Buffman ðŸ’ª.
// Versions:
//		Buffman: 0.0.1
// 		Flatc: 25.2.10

package services

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class GetUserResponse : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : GetUserResponse {
        __init(_i, _bb)
        return this
    }
    val user : services.User? get() = user(services.User())
    fun user(obj: services.User) : services.User? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    val found : Boolean
        get() {
            val o = __offset(6)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_25_2_10()
        fun getRootAsGetUserResponse(_bb: ByteBuffer): GetUserResponse = getRootAsGetUserResponse(_bb, GetUserResponse())
        fun getRootAsGetUserResponse(_bb: ByteBuffer, obj: GetUserResponse): GetUserResponse {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createGetUserResponse(builder: FlatBufferBuilder, userOffset: Int, found: Boolean) : Int {
            builder.startTable(2)
            addUser(builder, userOffset)
            addFound(builder, found)
            return endGetUserResponse(builder)
        }
        fun startGetUserResponse(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addUser(builder: FlatBufferBuilder, user: Int) = builder.addOffset(0, user, 0)
        fun addFound(builder: FlatBufferBuilder, found: Boolean) = builder.addBoolean(1, found, false)
        fun endGetUserResponse(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
