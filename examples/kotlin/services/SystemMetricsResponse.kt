// automatically generated by the FlatBuffers compiler, do not modify

package services

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class SystemMetricsResponse : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : SystemMetricsResponse {
        __init(_i, _bb)
        return this
    }
    val totalUsers : Int
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    val activeUsers : Int
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    val totalNotificationsSent : Int
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    val notificationOpenRate : Double
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    fun activityCounts(j: Int) : services.SystemMetricsResponse_.ActivityCountsEntry? = activityCounts(services.SystemMetricsResponse_.ActivityCountsEntry(), j)
    fun activityCounts(obj: services.SystemMetricsResponse_.ActivityCountsEntry, j: Int) : services.SystemMetricsResponse_.ActivityCountsEntry? {
        val o = __offset(12)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val activityCountsLength : Int
        get() {
            val o = __offset(12); return if (o != 0) __vector_len(o) else 0
        }
    val generatedAt : common.Timestamp? get() = generatedAt(common.Timestamp())
    fun generatedAt(obj: common.Timestamp) : common.Timestamp? {
        val o = __offset(14)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_25_2_10()
        fun getRootAsSystemMetricsResponse(_bb: ByteBuffer): SystemMetricsResponse = getRootAsSystemMetricsResponse(_bb, SystemMetricsResponse())
        fun getRootAsSystemMetricsResponse(_bb: ByteBuffer, obj: SystemMetricsResponse): SystemMetricsResponse {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createSystemMetricsResponse(builder: FlatBufferBuilder, totalUsers: Int, activeUsers: Int, totalNotificationsSent: Int, notificationOpenRate: Double, activityCountsOffset: Int, generatedAtOffset: Int) : Int {
            builder.startTable(6)
            addNotificationOpenRate(builder, notificationOpenRate)
            addGeneratedAt(builder, generatedAtOffset)
            addActivityCounts(builder, activityCountsOffset)
            addTotalNotificationsSent(builder, totalNotificationsSent)
            addActiveUsers(builder, activeUsers)
            addTotalUsers(builder, totalUsers)
            return endSystemMetricsResponse(builder)
        }
        fun startSystemMetricsResponse(builder: FlatBufferBuilder) = builder.startTable(6)
        fun addTotalUsers(builder: FlatBufferBuilder, totalUsers: Int) = builder.addInt(0, totalUsers, 0)
        fun addActiveUsers(builder: FlatBufferBuilder, activeUsers: Int) = builder.addInt(1, activeUsers, 0)
        fun addTotalNotificationsSent(builder: FlatBufferBuilder, totalNotificationsSent: Int) = builder.addInt(2, totalNotificationsSent, 0)
        fun addNotificationOpenRate(builder: FlatBufferBuilder, notificationOpenRate: Double) = builder.addDouble(3, notificationOpenRate, 0.0)
        fun addActivityCounts(builder: FlatBufferBuilder, activityCounts: Int) = builder.addOffset(4, activityCounts, 0)
        fun createActivityCountsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startActivityCountsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addGeneratedAt(builder: FlatBufferBuilder, generatedAt: Int) = builder.addOffset(5, generatedAt, 0)
        fun endSystemMetricsResponse(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
