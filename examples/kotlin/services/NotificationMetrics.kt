// DO NOT EDIT!
// Kotlin files generated by Buffman ðŸ’ª.
// Versions:
//		Buffman: 0.0.1
// 		Flatc: 25.2.10

package services

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class NotificationMetrics : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : NotificationMetrics {
        __init(_i, _bb)
        return this
    }
    val notificationId : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val notificationIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun notificationIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    val type : Int
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    val delivered : Boolean
        get() {
            val o = __offset(8)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    val opened : Boolean
        get() {
            val o = __offset(10)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    val clicked : Boolean
        get() {
            val o = __offset(12)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    val deliveredAt : common.Timestamp? get() = deliveredAt(common.Timestamp())
    fun deliveredAt(obj: common.Timestamp) : common.Timestamp? {
        val o = __offset(14)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    val openedAt : common.Timestamp? get() = openedAt(common.Timestamp())
    fun openedAt(obj: common.Timestamp) : common.Timestamp? {
        val o = __offset(16)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    val clickedAt : common.Timestamp? get() = clickedAt(common.Timestamp())
    fun clickedAt(obj: common.Timestamp) : common.Timestamp? {
        val o = __offset(18)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_25_2_10()
        fun getRootAsNotificationMetrics(_bb: ByteBuffer): NotificationMetrics = getRootAsNotificationMetrics(_bb, NotificationMetrics())
        fun getRootAsNotificationMetrics(_bb: ByteBuffer, obj: NotificationMetrics): NotificationMetrics {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createNotificationMetrics(builder: FlatBufferBuilder, notificationIdOffset: Int, type: Int, delivered: Boolean, opened: Boolean, clicked: Boolean, deliveredAtOffset: Int, openedAtOffset: Int, clickedAtOffset: Int) : Int {
            builder.startTable(8)
            addClickedAt(builder, clickedAtOffset)
            addOpenedAt(builder, openedAtOffset)
            addDeliveredAt(builder, deliveredAtOffset)
            addType(builder, type)
            addNotificationId(builder, notificationIdOffset)
            addClicked(builder, clicked)
            addOpened(builder, opened)
            addDelivered(builder, delivered)
            return endNotificationMetrics(builder)
        }
        fun startNotificationMetrics(builder: FlatBufferBuilder) = builder.startTable(8)
        fun addNotificationId(builder: FlatBufferBuilder, notificationId: Int) = builder.addOffset(0, notificationId, 0)
        fun addType(builder: FlatBufferBuilder, type: Int) = builder.addInt(1, type, 0)
        fun addDelivered(builder: FlatBufferBuilder, delivered: Boolean) = builder.addBoolean(2, delivered, false)
        fun addOpened(builder: FlatBufferBuilder, opened: Boolean) = builder.addBoolean(3, opened, false)
        fun addClicked(builder: FlatBufferBuilder, clicked: Boolean) = builder.addBoolean(4, clicked, false)
        fun addDeliveredAt(builder: FlatBufferBuilder, deliveredAt: Int) = builder.addOffset(5, deliveredAt, 0)
        fun addOpenedAt(builder: FlatBufferBuilder, openedAt: Int) = builder.addOffset(6, openedAt, 0)
        fun addClickedAt(builder: FlatBufferBuilder, clickedAt: Int) = builder.addOffset(7, clickedAt, 0)
        fun endNotificationMetrics(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
