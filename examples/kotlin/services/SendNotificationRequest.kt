// DO NOT EDIT!
// Kotlin generated by Buffman ðŸ’ª
// Versions:
//		Buffman: 0.0.1
//		Flatc: v25.2.10

package services

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class SendNotificationRequest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : SendNotificationRequest {
        __init(_i, _bb)
        return this
    }
    val recipientUserId : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val recipientUserIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun recipientUserIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    val type : Int
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    val title : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val titleAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun titleInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    val content : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val contentAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun contentInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    val priority : Int
        get() {
            val o = __offset(12)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    fun metadata(j: Int) : services.SendNotificationRequest_.MetadataEntry? = metadata(services.SendNotificationRequest_.MetadataEntry(), j)
    fun metadata(obj: services.SendNotificationRequest_.MetadataEntry, j: Int) : services.SendNotificationRequest_.MetadataEntry? {
        val o = __offset(14)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val metadataLength : Int
        get() {
            val o = __offset(14); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_25_2_10()
        fun getRootAsSendNotificationRequest(_bb: ByteBuffer): SendNotificationRequest = getRootAsSendNotificationRequest(_bb, SendNotificationRequest())
        fun getRootAsSendNotificationRequest(_bb: ByteBuffer, obj: SendNotificationRequest): SendNotificationRequest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createSendNotificationRequest(builder: FlatBufferBuilder, recipientUserIdOffset: Int, type: Int, titleOffset: Int, contentOffset: Int, priority: Int, metadataOffset: Int) : Int {
            builder.startTable(6)
            addMetadata(builder, metadataOffset)
            addPriority(builder, priority)
            addContent(builder, contentOffset)
            addTitle(builder, titleOffset)
            addType(builder, type)
            addRecipientUserId(builder, recipientUserIdOffset)
            return endSendNotificationRequest(builder)
        }
        fun startSendNotificationRequest(builder: FlatBufferBuilder) = builder.startTable(6)
        fun addRecipientUserId(builder: FlatBufferBuilder, recipientUserId: Int) = builder.addOffset(0, recipientUserId, 0)
        fun addType(builder: FlatBufferBuilder, type: Int) = builder.addInt(1, type, 0)
        fun addTitle(builder: FlatBufferBuilder, title: Int) = builder.addOffset(2, title, 0)
        fun addContent(builder: FlatBufferBuilder, content: Int) = builder.addOffset(3, content, 0)
        fun addPriority(builder: FlatBufferBuilder, priority: Int) = builder.addInt(4, priority, 0)
        fun addMetadata(builder: FlatBufferBuilder, metadata: Int) = builder.addOffset(5, metadata, 0)
        fun createMetadataVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startMetadataVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endSendNotificationRequest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
