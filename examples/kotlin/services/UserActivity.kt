// DO NOT EDIT!
// Kotlin generated by Buffman ðŸ’ª
// Versions:
//		Buffman: 1.0.0
//		Flatc: v25.2.10

package services

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class UserActivity : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : UserActivity {
        __init(_i, _bb)
        return this
    }
    val activityId : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val activityIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun activityIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    val userId : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val userIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun userIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    val action : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val actionAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun actionInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    val resource : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val resourceAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun resourceInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    val timestamp : common.Timestamp? get() = timestamp(common.Timestamp())
    fun timestamp(obj: common.Timestamp) : common.Timestamp? {
        val o = __offset(12)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    fun properties(j: Int) : services.UserActivity_.PropertiesEntry? = properties(services.UserActivity_.PropertiesEntry(), j)
    fun properties(obj: services.UserActivity_.PropertiesEntry, j: Int) : services.UserActivity_.PropertiesEntry? {
        val o = __offset(14)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val propertiesLength : Int
        get() {
            val o = __offset(14); return if (o != 0) __vector_len(o) else 0
        }
    val sessionId : String?
        get() {
            val o = __offset(16)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val sessionIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(16, 1)
    fun sessionIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 16, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_25_2_10()
        fun getRootAsUserActivity(_bb: ByteBuffer): UserActivity = getRootAsUserActivity(_bb, UserActivity())
        fun getRootAsUserActivity(_bb: ByteBuffer, obj: UserActivity): UserActivity {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createUserActivity(builder: FlatBufferBuilder, activityIdOffset: Int, userIdOffset: Int, actionOffset: Int, resourceOffset: Int, timestampOffset: Int, propertiesOffset: Int, sessionIdOffset: Int) : Int {
            builder.startTable(7)
            addSessionId(builder, sessionIdOffset)
            addProperties(builder, propertiesOffset)
            addTimestamp(builder, timestampOffset)
            addResource(builder, resourceOffset)
            addAction(builder, actionOffset)
            addUserId(builder, userIdOffset)
            addActivityId(builder, activityIdOffset)
            return endUserActivity(builder)
        }
        fun startUserActivity(builder: FlatBufferBuilder) = builder.startTable(7)
        fun addActivityId(builder: FlatBufferBuilder, activityId: Int) = builder.addOffset(0, activityId, 0)
        fun addUserId(builder: FlatBufferBuilder, userId: Int) = builder.addOffset(1, userId, 0)
        fun addAction(builder: FlatBufferBuilder, action: Int) = builder.addOffset(2, action, 0)
        fun addResource(builder: FlatBufferBuilder, resource: Int) = builder.addOffset(3, resource, 0)
        fun addTimestamp(builder: FlatBufferBuilder, timestamp: Int) = builder.addOffset(4, timestamp, 0)
        fun addProperties(builder: FlatBufferBuilder, properties: Int) = builder.addOffset(5, properties, 0)
        fun createPropertiesVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startPropertiesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addSessionId(builder: FlatBufferBuilder, sessionId: Int) = builder.addOffset(6, sessionId, 0)
        fun endUserActivity(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
