// DO NOT EDIT!
// kotlin generated by Buffman ðŸ’ª
// Versions:
//		Buffman: 1.0.0
//		Flatc: v25.2.10

package services

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class User : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : User {
        __init(_i, _bb)
        return this
    }
    val userId : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val userIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun userIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    val email : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val emailAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun emailInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    val firstName : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val firstNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun firstNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    val lastName : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val lastNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun lastNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    val address : common.Address? get() = address(common.Address())
    fun address(obj: common.Address) : common.Address? {
        val o = __offset(12)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    val status : Int
        get() {
            val o = __offset(14)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    val createdAt : common.Timestamp? get() = createdAt(common.Timestamp())
    fun createdAt(obj: common.Timestamp) : common.Timestamp? {
        val o = __offset(16)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    val updatedAt : common.Timestamp? get() = updatedAt(common.Timestamp())
    fun updatedAt(obj: common.Timestamp) : common.Timestamp? {
        val o = __offset(18)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    fun roles(j: Int) : String? {
        val o = __offset(20)
        return if (o != 0) {
            __string(__vector(o) + j * 4)
        } else {
            null
        }
    }
    val rolesLength : Int
        get() {
            val o = __offset(20); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_25_2_10()
        fun getRootAsUser(_bb: ByteBuffer): User = getRootAsUser(_bb, User())
        fun getRootAsUser(_bb: ByteBuffer, obj: User): User {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createUser(builder: FlatBufferBuilder, userIdOffset: Int, emailOffset: Int, firstNameOffset: Int, lastNameOffset: Int, addressOffset: Int, status: Int, createdAtOffset: Int, updatedAtOffset: Int, rolesOffset: Int) : Int {
            builder.startTable(9)
            addRoles(builder, rolesOffset)
            addUpdatedAt(builder, updatedAtOffset)
            addCreatedAt(builder, createdAtOffset)
            addStatus(builder, status)
            addAddress(builder, addressOffset)
            addLastName(builder, lastNameOffset)
            addFirstName(builder, firstNameOffset)
            addEmail(builder, emailOffset)
            addUserId(builder, userIdOffset)
            return endUser(builder)
        }
        fun startUser(builder: FlatBufferBuilder) = builder.startTable(9)
        fun addUserId(builder: FlatBufferBuilder, userId: Int) = builder.addOffset(0, userId, 0)
        fun addEmail(builder: FlatBufferBuilder, email: Int) = builder.addOffset(1, email, 0)
        fun addFirstName(builder: FlatBufferBuilder, firstName: Int) = builder.addOffset(2, firstName, 0)
        fun addLastName(builder: FlatBufferBuilder, lastName: Int) = builder.addOffset(3, lastName, 0)
        fun addAddress(builder: FlatBufferBuilder, address: Int) = builder.addOffset(4, address, 0)
        fun addStatus(builder: FlatBufferBuilder, status: Int) = builder.addInt(5, status, 0)
        fun addCreatedAt(builder: FlatBufferBuilder, createdAt: Int) = builder.addOffset(6, createdAt, 0)
        fun addUpdatedAt(builder: FlatBufferBuilder, updatedAt: Int) = builder.addOffset(7, updatedAt, 0)
        fun addRoles(builder: FlatBufferBuilder, roles: Int) = builder.addOffset(8, roles, 0)
        fun createRolesVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startRolesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endUser(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
