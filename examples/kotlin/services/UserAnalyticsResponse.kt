// DO NOT EDIT!
// Kotlin generated by Buffman ðŸ’ª
// Versions:
//		Buffman: 1.0.0
//		Flatc: v25.2.10

package services

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class UserAnalyticsResponse : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : UserAnalyticsResponse {
        __init(_i, _bb)
        return this
    }
    val user : services.User? get() = user(services.User())
    fun user(obj: services.User) : services.User? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    fun activities(j: Int) : services.UserActivity? = activities(services.UserActivity(), j)
    fun activities(obj: services.UserActivity, j: Int) : services.UserActivity? {
        val o = __offset(6)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val activitiesLength : Int
        get() {
            val o = __offset(6); return if (o != 0) __vector_len(o) else 0
        }
    fun notificationMetrics(j: Int) : services.NotificationMetrics? = notificationMetrics(services.NotificationMetrics(), j)
    fun notificationMetrics(obj: services.NotificationMetrics, j: Int) : services.NotificationMetrics? {
        val o = __offset(8)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val notificationMetricsLength : Int
        get() {
            val o = __offset(8); return if (o != 0) __vector_len(o) else 0
        }
    val totalActivities : Int
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    val totalNotificationsSent : Int
        get() {
            val o = __offset(12)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    val totalNotificationsOpened : Int
        get() {
            val o = __offset(14)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_25_2_10()
        fun getRootAsUserAnalyticsResponse(_bb: ByteBuffer): UserAnalyticsResponse = getRootAsUserAnalyticsResponse(_bb, UserAnalyticsResponse())
        fun getRootAsUserAnalyticsResponse(_bb: ByteBuffer, obj: UserAnalyticsResponse): UserAnalyticsResponse {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createUserAnalyticsResponse(builder: FlatBufferBuilder, userOffset: Int, activitiesOffset: Int, notificationMetricsOffset: Int, totalActivities: Int, totalNotificationsSent: Int, totalNotificationsOpened: Int) : Int {
            builder.startTable(6)
            addTotalNotificationsOpened(builder, totalNotificationsOpened)
            addTotalNotificationsSent(builder, totalNotificationsSent)
            addTotalActivities(builder, totalActivities)
            addNotificationMetrics(builder, notificationMetricsOffset)
            addActivities(builder, activitiesOffset)
            addUser(builder, userOffset)
            return endUserAnalyticsResponse(builder)
        }
        fun startUserAnalyticsResponse(builder: FlatBufferBuilder) = builder.startTable(6)
        fun addUser(builder: FlatBufferBuilder, user: Int) = builder.addOffset(0, user, 0)
        fun addActivities(builder: FlatBufferBuilder, activities: Int) = builder.addOffset(1, activities, 0)
        fun createActivitiesVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startActivitiesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addNotificationMetrics(builder: FlatBufferBuilder, notificationMetrics: Int) = builder.addOffset(2, notificationMetrics, 0)
        fun createNotificationMetricsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startNotificationMetricsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addTotalActivities(builder: FlatBufferBuilder, totalActivities: Int) = builder.addInt(3, totalActivities, 0)
        fun addTotalNotificationsSent(builder: FlatBufferBuilder, totalNotificationsSent: Int) = builder.addInt(4, totalNotificationsSent, 0)
        fun addTotalNotificationsOpened(builder: FlatBufferBuilder, totalNotificationsOpened: Int) = builder.addInt(5, totalNotificationsOpened, 0)
        fun endUserAnalyticsResponse(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
