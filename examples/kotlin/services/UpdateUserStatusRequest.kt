// DO NOT EDIT!
// kotlin generated by Buffman ðŸ’ª
// Versions:
//		Buffman: 1.0.0
//		Flatc: v25.2.10

package services

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class UpdateUserStatusRequest : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : UpdateUserStatusRequest {
        __init(_i, _bb)
        return this
    }
    val userId : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val userIdAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun userIdInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    val newStatus : Int
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_25_2_10()
        fun getRootAsUpdateUserStatusRequest(_bb: ByteBuffer): UpdateUserStatusRequest = getRootAsUpdateUserStatusRequest(_bb, UpdateUserStatusRequest())
        fun getRootAsUpdateUserStatusRequest(_bb: ByteBuffer, obj: UpdateUserStatusRequest): UpdateUserStatusRequest {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createUpdateUserStatusRequest(builder: FlatBufferBuilder, userIdOffset: Int, newStatus: Int) : Int {
            builder.startTable(2)
            addNewStatus(builder, newStatus)
            addUserId(builder, userIdOffset)
            return endUpdateUserStatusRequest(builder)
        }
        fun startUpdateUserStatusRequest(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addUserId(builder: FlatBufferBuilder, userId: Int) = builder.addOffset(0, userId, 0)
        fun addNewStatus(builder: FlatBufferBuilder, newStatus: Int) = builder.addInt(1, newStatus, 0)
        fun endUpdateUserStatusRequest(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
