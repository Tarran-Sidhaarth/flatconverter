// DO NOT EDIT!
// Kotlin generated by Buffman ðŸ’ª
// Versions:
//		Buffman: 0.0.1
//		Flatc: v25.2.10

package common

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class Address : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Address {
        __init(_i, _bb)
        return this
    }
    val street : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val streetAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun streetInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    val city : String?
        get() {
            val o = __offset(6)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val cityAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun cityInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    val state : String?
        get() {
            val o = __offset(8)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val stateAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun stateInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    val postalCode : String?
        get() {
            val o = __offset(10)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val postalCodeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun postalCodeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    val country : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val countryAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun countryInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_25_2_10()
        fun getRootAsAddress(_bb: ByteBuffer): Address = getRootAsAddress(_bb, Address())
        fun getRootAsAddress(_bb: ByteBuffer, obj: Address): Address {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createAddress(builder: FlatBufferBuilder, streetOffset: Int, cityOffset: Int, stateOffset: Int, postalCodeOffset: Int, countryOffset: Int) : Int {
            builder.startTable(5)
            addCountry(builder, countryOffset)
            addPostalCode(builder, postalCodeOffset)
            addState(builder, stateOffset)
            addCity(builder, cityOffset)
            addStreet(builder, streetOffset)
            return endAddress(builder)
        }
        fun startAddress(builder: FlatBufferBuilder) = builder.startTable(5)
        fun addStreet(builder: FlatBufferBuilder, street: Int) = builder.addOffset(0, street, 0)
        fun addCity(builder: FlatBufferBuilder, city: Int) = builder.addOffset(1, city, 0)
        fun addState(builder: FlatBufferBuilder, state: Int) = builder.addOffset(2, state, 0)
        fun addPostalCode(builder: FlatBufferBuilder, postalCode: Int) = builder.addOffset(3, postalCode, 0)
        fun addCountry(builder: FlatBufferBuilder, country: Int) = builder.addOffset(4, country, 0)
        fun endAddress(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
