// DO NOT EDIT!
// Kotlin generated by Buffman ðŸ’ª
// Versions:
//		Buffman: 1.0.0
//		Flatc: v25.2.10

package common

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
class Timestamp : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Timestamp {
        __init(_i, _bb)
        return this
    }
    val seconds : Long
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getLong(o + bb_pos) else 0L
        }
    val nanos : Int
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_25_2_10()
        fun getRootAsTimestamp(_bb: ByteBuffer): Timestamp = getRootAsTimestamp(_bb, Timestamp())
        fun getRootAsTimestamp(_bb: ByteBuffer, obj: Timestamp): Timestamp {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createTimestamp(builder: FlatBufferBuilder, seconds: Long, nanos: Int) : Int {
            builder.startTable(2)
            addSeconds(builder, seconds)
            addNanos(builder, nanos)
            return endTimestamp(builder)
        }
        fun startTimestamp(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addSeconds(builder: FlatBufferBuilder, seconds: Long) = builder.addLong(0, seconds, 0L)
        fun addNanos(builder: FlatBufferBuilder, nanos: Int) = builder.addInt(1, nanos, 0)
        fun endTimestamp(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
