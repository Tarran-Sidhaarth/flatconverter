// DO NOT EDIT!
// swift generated by Buffman ðŸ’ª
// Versions:
//		Buffman: 1.0.0
//		Flatc: v25.2.10
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum services_NotificationType: Int32, Enum, Verifiable {
  public typealias T = Int32
  public static var byteSize: Int { return MemoryLayout<Int32>.size }
  public var value: Int32 { return self.rawValue }
  case notificationTypeUnknown = 0
  case notificationTypeEmail = 1
  case notificationTypeSms = 2
  case notificationTypePush = 3
  case notificationTypeInApp = 4

  public static var max: services_NotificationType { return .notificationTypeInApp }
  public static var min: services_NotificationType { return .notificationTypeUnknown }
}


public enum services_Priority: Int32, Enum, Verifiable {
  public typealias T = Int32
  public static var byteSize: Int { return MemoryLayout<Int32>.size }
  public var value: Int32 { return self.rawValue }
  case priorityLow = 0
  case priorityMedium = 1
  case priorityHigh = 2
  case priorityUrgent = 3

  public static var max: services_Priority { return .priorityUrgent }
  public static var min: services_Priority { return .priorityLow }
}


public struct services_Notification: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_25_2_10() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case notificationId = 4
    case recipientUserId = 6
    case type = 8
    case title = 10
    case content = 12
    case priority = 14
    case status = 16
    case createdAt = 18
    case sentAt = 20
    case metadata = 22
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var notificationId: String? { let o = _accessor.offset(VTOFFSET.notificationId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var notificationIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.notificationId.v) }
  public var recipientUserId: String? { let o = _accessor.offset(VTOFFSET.recipientUserId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var recipientUserIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.recipientUserId.v) }
  public var type: services_NotificationType { let o = _accessor.offset(VTOFFSET.type.v); return o == 0 ? .notificationTypeUnknown : services_NotificationType(rawValue: _accessor.readBuffer(of: Int32.self, at: o)) ?? .notificationTypeUnknown }
  public var title: String? { let o = _accessor.offset(VTOFFSET.title.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var titleSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.title.v) }
  public var content: String? { let o = _accessor.offset(VTOFFSET.content.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var contentSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.content.v) }
  public var priority: services_Priority { let o = _accessor.offset(VTOFFSET.priority.v); return o == 0 ? .priorityLow : services_Priority(rawValue: _accessor.readBuffer(of: Int32.self, at: o)) ?? .priorityLow }
  public var status: common_Status { let o = _accessor.offset(VTOFFSET.status.v); return o == 0 ? .statusUnknown : common_Status(rawValue: _accessor.readBuffer(of: Int32.self, at: o)) ?? .statusUnknown }
  public var createdAt: common_Timestamp? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : common_Timestamp(_accessor.bb, o: _accessor.indirect(o + _accessor.position)) }
  public var sentAt: common_Timestamp? { let o = _accessor.offset(VTOFFSET.sentAt.v); return o == 0 ? nil : common_Timestamp(_accessor.bb, o: _accessor.indirect(o + _accessor.position)) }
  public var hasMetadata: Bool { let o = _accessor.offset(VTOFFSET.metadata.v); return o == 0 ? false : true }
  public var metadataCount: Int32 { let o = _accessor.offset(VTOFFSET.metadata.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func metadata(at index: Int32) -> services_Notification__MetadataEntry? { let o = _accessor.offset(VTOFFSET.metadata.v); return o == 0 ? nil : services_Notification__MetadataEntry(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
  public static func startNotification(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 10) }
  public static func add(notificationId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: notificationId, at: VTOFFSET.notificationId.p) }
  public static func add(recipientUserId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: recipientUserId, at: VTOFFSET.recipientUserId.p) }
  public static func add(type: services_NotificationType, _ fbb: inout FlatBufferBuilder) { fbb.add(element: type.rawValue, def: 0, at: VTOFFSET.type.p) }
  public static func add(title: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: title, at: VTOFFSET.title.p) }
  public static func add(content: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: content, at: VTOFFSET.content.p) }
  public static func add(priority: services_Priority, _ fbb: inout FlatBufferBuilder) { fbb.add(element: priority.rawValue, def: 0, at: VTOFFSET.priority.p) }
  public static func add(status: common_Status, _ fbb: inout FlatBufferBuilder) { fbb.add(element: status.rawValue, def: 0, at: VTOFFSET.status.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(sentAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sentAt, at: VTOFFSET.sentAt.p) }
  public static func addVectorOf(metadata: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: metadata, at: VTOFFSET.metadata.p) }
  public static func endNotification(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createNotification(
    _ fbb: inout FlatBufferBuilder,
    notificationIdOffset notificationId: Offset = Offset(),
    recipientUserIdOffset recipientUserId: Offset = Offset(),
    type: services_NotificationType = .notificationTypeUnknown,
    titleOffset title: Offset = Offset(),
    contentOffset content: Offset = Offset(),
    priority: services_Priority = .priorityLow,
    status: common_Status = .statusUnknown,
    createdAtOffset createdAt: Offset = Offset(),
    sentAtOffset sentAt: Offset = Offset(),
    metadataVectorOffset metadata: Offset = Offset()
  ) -> Offset {
    let __start = services_Notification.startNotification(&fbb)
    services_Notification.add(notificationId: notificationId, &fbb)
    services_Notification.add(recipientUserId: recipientUserId, &fbb)
    services_Notification.add(type: type, &fbb)
    services_Notification.add(title: title, &fbb)
    services_Notification.add(content: content, &fbb)
    services_Notification.add(priority: priority, &fbb)
    services_Notification.add(status: status, &fbb)
    services_Notification.add(createdAt: createdAt, &fbb)
    services_Notification.add(sentAt: sentAt, &fbb)
    services_Notification.addVectorOf(metadata: metadata, &fbb)
    return services_Notification.endNotification(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.notificationId.p, fieldName: "notificationId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.recipientUserId.p, fieldName: "recipientUserId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.type.p, fieldName: "type", required: false, type: services_NotificationType.self)
    try _v.visit(field: VTOFFSET.title.p, fieldName: "title", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.content.p, fieldName: "content", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.priority.p, fieldName: "priority", required: false, type: services_Priority.self)
    try _v.visit(field: VTOFFSET.status.p, fieldName: "status", required: false, type: common_Status.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<common_Timestamp>.self)
    try _v.visit(field: VTOFFSET.sentAt.p, fieldName: "sentAt", required: false, type: ForwardOffset<common_Timestamp>.self)
    try _v.visit(field: VTOFFSET.metadata.p, fieldName: "metadata", required: false, type: ForwardOffset<Vector<ForwardOffset<services_Notification__MetadataEntry>, services_Notification__MetadataEntry>>.self)
    _v.finish()
  }
}

public struct services_Notification__MetadataEntry: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_25_2_10() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case key = 4
    case value = 6
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var key: String? { let o = _accessor.offset(VTOFFSET.key.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var keySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.key.v) }
  public var value: String? { let o = _accessor.offset(VTOFFSET.value.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var valueSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.value.v) }
  public static func startMetadataEntry(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 2) }
  public static func add(key: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: key, at: VTOFFSET.key.p) }
  public static func add(value: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: value, at: VTOFFSET.value.p) }
  public static func endMetadataEntry(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createMetadataEntry(
    _ fbb: inout FlatBufferBuilder,
    keyOffset key: Offset = Offset(),
    valueOffset value: Offset = Offset()
  ) -> Offset {
    let __start = services_Notification__MetadataEntry.startMetadataEntry(&fbb)
    services_Notification__MetadataEntry.add(key: key, &fbb)
    services_Notification__MetadataEntry.add(value: value, &fbb)
    return services_Notification__MetadataEntry.endMetadataEntry(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.key.p, fieldName: "key", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.value.p, fieldName: "value", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

public struct services_SendNotificationRequest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_25_2_10() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case recipientUserId = 4
    case type = 6
    case title = 8
    case content = 10
    case priority = 12
    case metadata = 14
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var recipientUserId: String? { let o = _accessor.offset(VTOFFSET.recipientUserId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var recipientUserIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.recipientUserId.v) }
  public var type: services_NotificationType { let o = _accessor.offset(VTOFFSET.type.v); return o == 0 ? .notificationTypeUnknown : services_NotificationType(rawValue: _accessor.readBuffer(of: Int32.self, at: o)) ?? .notificationTypeUnknown }
  public var title: String? { let o = _accessor.offset(VTOFFSET.title.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var titleSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.title.v) }
  public var content: String? { let o = _accessor.offset(VTOFFSET.content.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var contentSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.content.v) }
  public var priority: services_Priority { let o = _accessor.offset(VTOFFSET.priority.v); return o == 0 ? .priorityLow : services_Priority(rawValue: _accessor.readBuffer(of: Int32.self, at: o)) ?? .priorityLow }
  public var hasMetadata: Bool { let o = _accessor.offset(VTOFFSET.metadata.v); return o == 0 ? false : true }
  public var metadataCount: Int32 { let o = _accessor.offset(VTOFFSET.metadata.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func metadata(at index: Int32) -> services_SendNotificationRequest__MetadataEntry? { let o = _accessor.offset(VTOFFSET.metadata.v); return o == 0 ? nil : services_SendNotificationRequest__MetadataEntry(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
  public static func startSendNotificationRequest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 6) }
  public static func add(recipientUserId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: recipientUserId, at: VTOFFSET.recipientUserId.p) }
  public static func add(type: services_NotificationType, _ fbb: inout FlatBufferBuilder) { fbb.add(element: type.rawValue, def: 0, at: VTOFFSET.type.p) }
  public static func add(title: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: title, at: VTOFFSET.title.p) }
  public static func add(content: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: content, at: VTOFFSET.content.p) }
  public static func add(priority: services_Priority, _ fbb: inout FlatBufferBuilder) { fbb.add(element: priority.rawValue, def: 0, at: VTOFFSET.priority.p) }
  public static func addVectorOf(metadata: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: metadata, at: VTOFFSET.metadata.p) }
  public static func endSendNotificationRequest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createSendNotificationRequest(
    _ fbb: inout FlatBufferBuilder,
    recipientUserIdOffset recipientUserId: Offset = Offset(),
    type: services_NotificationType = .notificationTypeUnknown,
    titleOffset title: Offset = Offset(),
    contentOffset content: Offset = Offset(),
    priority: services_Priority = .priorityLow,
    metadataVectorOffset metadata: Offset = Offset()
  ) -> Offset {
    let __start = services_SendNotificationRequest.startSendNotificationRequest(&fbb)
    services_SendNotificationRequest.add(recipientUserId: recipientUserId, &fbb)
    services_SendNotificationRequest.add(type: type, &fbb)
    services_SendNotificationRequest.add(title: title, &fbb)
    services_SendNotificationRequest.add(content: content, &fbb)
    services_SendNotificationRequest.add(priority: priority, &fbb)
    services_SendNotificationRequest.addVectorOf(metadata: metadata, &fbb)
    return services_SendNotificationRequest.endSendNotificationRequest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.recipientUserId.p, fieldName: "recipientUserId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.type.p, fieldName: "type", required: false, type: services_NotificationType.self)
    try _v.visit(field: VTOFFSET.title.p, fieldName: "title", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.content.p, fieldName: "content", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.priority.p, fieldName: "priority", required: false, type: services_Priority.self)
    try _v.visit(field: VTOFFSET.metadata.p, fieldName: "metadata", required: false, type: ForwardOffset<Vector<ForwardOffset<services_SendNotificationRequest__MetadataEntry>, services_SendNotificationRequest__MetadataEntry>>.self)
    _v.finish()
  }
}

public struct services_SendNotificationRequest__MetadataEntry: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_25_2_10() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case key = 4
    case value = 6
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var key: String? { let o = _accessor.offset(VTOFFSET.key.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var keySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.key.v) }
  public var value: String? { let o = _accessor.offset(VTOFFSET.value.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var valueSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.value.v) }
  public static func startMetadataEntry(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 2) }
  public static func add(key: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: key, at: VTOFFSET.key.p) }
  public static func add(value: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: value, at: VTOFFSET.value.p) }
  public static func endMetadataEntry(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createMetadataEntry(
    _ fbb: inout FlatBufferBuilder,
    keyOffset key: Offset = Offset(),
    valueOffset value: Offset = Offset()
  ) -> Offset {
    let __start = services_SendNotificationRequest__MetadataEntry.startMetadataEntry(&fbb)
    services_SendNotificationRequest__MetadataEntry.add(key: key, &fbb)
    services_SendNotificationRequest__MetadataEntry.add(value: value, &fbb)
    return services_SendNotificationRequest__MetadataEntry.endMetadataEntry(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.key.p, fieldName: "key", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.value.p, fieldName: "value", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

public struct services_SendNotificationResponse: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_25_2_10() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case notificationId = 4
    case success = 6
    case message = 8
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var notificationId: String? { let o = _accessor.offset(VTOFFSET.notificationId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var notificationIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.notificationId.v) }
  public var success: Bool { let o = _accessor.offset(VTOFFSET.success.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  public var message: String? { let o = _accessor.offset(VTOFFSET.message.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var messageSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.message.v) }
  public static func startSendNotificationResponse(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 3) }
  public static func add(notificationId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: notificationId, at: VTOFFSET.notificationId.p) }
  public static func add(success: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: success, def: false,
   at: VTOFFSET.success.p) }
  public static func add(message: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: message, at: VTOFFSET.message.p) }
  public static func endSendNotificationResponse(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createSendNotificationResponse(
    _ fbb: inout FlatBufferBuilder,
    notificationIdOffset notificationId: Offset = Offset(),
    success: Bool = false,
    messageOffset message: Offset = Offset()
  ) -> Offset {
    let __start = services_SendNotificationResponse.startSendNotificationResponse(&fbb)
    services_SendNotificationResponse.add(notificationId: notificationId, &fbb)
    services_SendNotificationResponse.add(success: success, &fbb)
    services_SendNotificationResponse.add(message: message, &fbb)
    return services_SendNotificationResponse.endSendNotificationResponse(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.notificationId.p, fieldName: "notificationId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.success.p, fieldName: "success", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.message.p, fieldName: "message", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

public struct services_GetUserNotificationsRequest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_25_2_10() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case userId = 4
    case limit = 6
    case offset = 8
    case statusFilter = 10
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var userId: String? { let o = _accessor.offset(VTOFFSET.userId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var userIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.userId.v) }
  public var limit: Int32 { let o = _accessor.offset(VTOFFSET.limit.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  public var offset: Int32 { let o = _accessor.offset(VTOFFSET.offset.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  public var statusFilter: common_Status { let o = _accessor.offset(VTOFFSET.statusFilter.v); return o == 0 ? .statusUnknown : common_Status(rawValue: _accessor.readBuffer(of: Int32.self, at: o)) ?? .statusUnknown }
  public static func startGetUserNotificationsRequest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 4) }
  public static func add(userId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: userId, at: VTOFFSET.userId.p) }
  public static func add(limit: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: limit, def: 0, at: VTOFFSET.limit.p) }
  public static func add(offset: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: offset, def: 0, at: VTOFFSET.offset.p) }
  public static func add(statusFilter: common_Status, _ fbb: inout FlatBufferBuilder) { fbb.add(element: statusFilter.rawValue, def: 0, at: VTOFFSET.statusFilter.p) }
  public static func endGetUserNotificationsRequest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createGetUserNotificationsRequest(
    _ fbb: inout FlatBufferBuilder,
    userIdOffset userId: Offset = Offset(),
    limit: Int32 = 0,
    offset: Int32 = 0,
    statusFilter: common_Status = .statusUnknown
  ) -> Offset {
    let __start = services_GetUserNotificationsRequest.startGetUserNotificationsRequest(&fbb)
    services_GetUserNotificationsRequest.add(userId: userId, &fbb)
    services_GetUserNotificationsRequest.add(limit: limit, &fbb)
    services_GetUserNotificationsRequest.add(offset: offset, &fbb)
    services_GetUserNotificationsRequest.add(statusFilter: statusFilter, &fbb)
    return services_GetUserNotificationsRequest.endGetUserNotificationsRequest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.userId.p, fieldName: "userId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.limit.p, fieldName: "limit", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.offset.p, fieldName: "offset", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.statusFilter.p, fieldName: "statusFilter", required: false, type: common_Status.self)
    _v.finish()
  }
}

public struct services_GetUserNotificationsResponse: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_25_2_10() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case notifications = 4
    case totalCount = 6
    case userInfo = 8
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var hasNotifications: Bool { let o = _accessor.offset(VTOFFSET.notifications.v); return o == 0 ? false : true }
  public var notificationsCount: Int32 { let o = _accessor.offset(VTOFFSET.notifications.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func notifications(at index: Int32) -> services_Notification? { let o = _accessor.offset(VTOFFSET.notifications.v); return o == 0 ? nil : services_Notification(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
  public var totalCount: Int32 { let o = _accessor.offset(VTOFFSET.totalCount.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  public var userInfo: services_User? { let o = _accessor.offset(VTOFFSET.userInfo.v); return o == 0 ? nil : services_User(_accessor.bb, o: _accessor.indirect(o + _accessor.position)) }
  public static func startGetUserNotificationsResponse(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 3) }
  public static func addVectorOf(notifications: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: notifications, at: VTOFFSET.notifications.p) }
  public static func add(totalCount: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: totalCount, def: 0, at: VTOFFSET.totalCount.p) }
  public static func add(userInfo: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: userInfo, at: VTOFFSET.userInfo.p) }
  public static func endGetUserNotificationsResponse(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createGetUserNotificationsResponse(
    _ fbb: inout FlatBufferBuilder,
    notificationsVectorOffset notifications: Offset = Offset(),
    totalCount: Int32 = 0,
    userInfoOffset userInfo: Offset = Offset()
  ) -> Offset {
    let __start = services_GetUserNotificationsResponse.startGetUserNotificationsResponse(&fbb)
    services_GetUserNotificationsResponse.addVectorOf(notifications: notifications, &fbb)
    services_GetUserNotificationsResponse.add(totalCount: totalCount, &fbb)
    services_GetUserNotificationsResponse.add(userInfo: userInfo, &fbb)
    return services_GetUserNotificationsResponse.endGetUserNotificationsResponse(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.notifications.p, fieldName: "notifications", required: false, type: ForwardOffset<Vector<ForwardOffset<services_Notification>, services_Notification>>.self)
    try _v.visit(field: VTOFFSET.totalCount.p, fieldName: "totalCount", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.userInfo.p, fieldName: "userInfo", required: false, type: ForwardOffset<services_User>.self)
    _v.finish()
  }
}

public struct services_MarkNotificationAsReadRequest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_25_2_10() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case notificationId = 4
    case userId = 6
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var notificationId: String? { let o = _accessor.offset(VTOFFSET.notificationId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var notificationIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.notificationId.v) }
  public var userId: String? { let o = _accessor.offset(VTOFFSET.userId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var userIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.userId.v) }
  public static func startMarkNotificationAsReadRequest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 2) }
  public static func add(notificationId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: notificationId, at: VTOFFSET.notificationId.p) }
  public static func add(userId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: userId, at: VTOFFSET.userId.p) }
  public static func endMarkNotificationAsReadRequest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createMarkNotificationAsReadRequest(
    _ fbb: inout FlatBufferBuilder,
    notificationIdOffset notificationId: Offset = Offset(),
    userIdOffset userId: Offset = Offset()
  ) -> Offset {
    let __start = services_MarkNotificationAsReadRequest.startMarkNotificationAsReadRequest(&fbb)
    services_MarkNotificationAsReadRequest.add(notificationId: notificationId, &fbb)
    services_MarkNotificationAsReadRequest.add(userId: userId, &fbb)
    return services_MarkNotificationAsReadRequest.endMarkNotificationAsReadRequest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.notificationId.p, fieldName: "notificationId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.userId.p, fieldName: "userId", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

public struct services_MarkNotificationAsReadResponse: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_25_2_10() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case success = 4
    case message = 6
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var success: Bool { let o = _accessor.offset(VTOFFSET.success.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  public var message: String? { let o = _accessor.offset(VTOFFSET.message.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var messageSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.message.v) }
  public static func startMarkNotificationAsReadResponse(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 2) }
  public static func add(success: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: success, def: false,
   at: VTOFFSET.success.p) }
  public static func add(message: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: message, at: VTOFFSET.message.p) }
  public static func endMarkNotificationAsReadResponse(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createMarkNotificationAsReadResponse(
    _ fbb: inout FlatBufferBuilder,
    success: Bool = false,
    messageOffset message: Offset = Offset()
  ) -> Offset {
    let __start = services_MarkNotificationAsReadResponse.startMarkNotificationAsReadResponse(&fbb)
    services_MarkNotificationAsReadResponse.add(success: success, &fbb)
    services_MarkNotificationAsReadResponse.add(message: message, &fbb)
    return services_MarkNotificationAsReadResponse.endMarkNotificationAsReadResponse(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.success.p, fieldName: "success", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.message.p, fieldName: "message", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

