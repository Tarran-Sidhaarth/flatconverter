// DO NOT EDIT!
// Swift generated by Buffman ðŸ’ª
// Versions:
//		Buffman: 0.0.1
//		Flatc: v25.2.10
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public struct common_Timestamp: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_25_2_10() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case seconds = 4
    case nanos = 6
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var seconds: Int64 { let o = _accessor.offset(VTOFFSET.seconds.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int64.self, at: o) }
  public var nanos: Int32 { let o = _accessor.offset(VTOFFSET.nanos.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  public static func startTimestamp(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 2) }
  public static func add(seconds: Int64, _ fbb: inout FlatBufferBuilder) { fbb.add(element: seconds, def: 0, at: VTOFFSET.seconds.p) }
  public static func add(nanos: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: nanos, def: 0, at: VTOFFSET.nanos.p) }
  public static func endTimestamp(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createTimestamp(
    _ fbb: inout FlatBufferBuilder,
    seconds: Int64 = 0,
    nanos: Int32 = 0
  ) -> Offset {
    let __start = common_Timestamp.startTimestamp(&fbb)
    common_Timestamp.add(seconds: seconds, &fbb)
    common_Timestamp.add(nanos: nanos, &fbb)
    return common_Timestamp.endTimestamp(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.seconds.p, fieldName: "seconds", required: false, type: Int64.self)
    try _v.visit(field: VTOFFSET.nanos.p, fieldName: "nanos", required: false, type: Int32.self)
    _v.finish()
  }
}

