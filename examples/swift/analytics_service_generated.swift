// DO NOT EDIT!
// Swift generated by Buffman ðŸ’ª
// Versions:
//		Buffman: 0.0.1
//		Flatc: v25.2.10
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public struct services_UserActivity: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_25_2_10() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case activityId = 4
    case userId = 6
    case action = 8
    case resource = 10
    case timestamp = 12
    case properties = 14
    case sessionId = 16
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var activityId: String? { let o = _accessor.offset(VTOFFSET.activityId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var activityIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.activityId.v) }
  public var userId: String? { let o = _accessor.offset(VTOFFSET.userId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var userIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.userId.v) }
  public var action: String? { let o = _accessor.offset(VTOFFSET.action.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var actionSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.action.v) }
  public var resource: String? { let o = _accessor.offset(VTOFFSET.resource.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var resourceSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.resource.v) }
  public var timestamp: common_Timestamp? { let o = _accessor.offset(VTOFFSET.timestamp.v); return o == 0 ? nil : common_Timestamp(_accessor.bb, o: _accessor.indirect(o + _accessor.position)) }
  public var hasProperties: Bool { let o = _accessor.offset(VTOFFSET.properties.v); return o == 0 ? false : true }
  public var propertiesCount: Int32 { let o = _accessor.offset(VTOFFSET.properties.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func properties(at index: Int32) -> services_UserActivity__PropertiesEntry? { let o = _accessor.offset(VTOFFSET.properties.v); return o == 0 ? nil : services_UserActivity__PropertiesEntry(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
  public var sessionId: String? { let o = _accessor.offset(VTOFFSET.sessionId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var sessionIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.sessionId.v) }
  public static func startUserActivity(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 7) }
  public static func add(activityId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: activityId, at: VTOFFSET.activityId.p) }
  public static func add(userId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: userId, at: VTOFFSET.userId.p) }
  public static func add(action: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: action, at: VTOFFSET.action.p) }
  public static func add(resource: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: resource, at: VTOFFSET.resource.p) }
  public static func add(timestamp: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: timestamp, at: VTOFFSET.timestamp.p) }
  public static func addVectorOf(properties: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: properties, at: VTOFFSET.properties.p) }
  public static func add(sessionId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: sessionId, at: VTOFFSET.sessionId.p) }
  public static func endUserActivity(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createUserActivity(
    _ fbb: inout FlatBufferBuilder,
    activityIdOffset activityId: Offset = Offset(),
    userIdOffset userId: Offset = Offset(),
    actionOffset action: Offset = Offset(),
    resourceOffset resource: Offset = Offset(),
    timestampOffset timestamp: Offset = Offset(),
    propertiesVectorOffset properties: Offset = Offset(),
    sessionIdOffset sessionId: Offset = Offset()
  ) -> Offset {
    let __start = services_UserActivity.startUserActivity(&fbb)
    services_UserActivity.add(activityId: activityId, &fbb)
    services_UserActivity.add(userId: userId, &fbb)
    services_UserActivity.add(action: action, &fbb)
    services_UserActivity.add(resource: resource, &fbb)
    services_UserActivity.add(timestamp: timestamp, &fbb)
    services_UserActivity.addVectorOf(properties: properties, &fbb)
    services_UserActivity.add(sessionId: sessionId, &fbb)
    return services_UserActivity.endUserActivity(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.activityId.p, fieldName: "activityId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.userId.p, fieldName: "userId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.action.p, fieldName: "action", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.resource.p, fieldName: "resource", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.timestamp.p, fieldName: "timestamp", required: false, type: ForwardOffset<common_Timestamp>.self)
    try _v.visit(field: VTOFFSET.properties.p, fieldName: "properties", required: false, type: ForwardOffset<Vector<ForwardOffset<services_UserActivity__PropertiesEntry>, services_UserActivity__PropertiesEntry>>.self)
    try _v.visit(field: VTOFFSET.sessionId.p, fieldName: "sessionId", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

public struct services_UserActivity__PropertiesEntry: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_25_2_10() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case key = 4
    case value = 6
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var key: String? { let o = _accessor.offset(VTOFFSET.key.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var keySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.key.v) }
  public var value: String? { let o = _accessor.offset(VTOFFSET.value.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var valueSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.value.v) }
  public static func startPropertiesEntry(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 2) }
  public static func add(key: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: key, at: VTOFFSET.key.p) }
  public static func add(value: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: value, at: VTOFFSET.value.p) }
  public static func endPropertiesEntry(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createPropertiesEntry(
    _ fbb: inout FlatBufferBuilder,
    keyOffset key: Offset = Offset(),
    valueOffset value: Offset = Offset()
  ) -> Offset {
    let __start = services_UserActivity__PropertiesEntry.startPropertiesEntry(&fbb)
    services_UserActivity__PropertiesEntry.add(key: key, &fbb)
    services_UserActivity__PropertiesEntry.add(value: value, &fbb)
    return services_UserActivity__PropertiesEntry.endPropertiesEntry(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.key.p, fieldName: "key", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.value.p, fieldName: "value", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

public struct services_NotificationMetrics: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_25_2_10() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case notificationId = 4
    case type = 6
    case delivered = 8
    case opened = 10
    case clicked = 12
    case deliveredAt = 14
    case openedAt = 16
    case clickedAt = 18
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var notificationId: String? { let o = _accessor.offset(VTOFFSET.notificationId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var notificationIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.notificationId.v) }
  public var type: services_NotificationType { let o = _accessor.offset(VTOFFSET.type.v); return o == 0 ? .notificationTypeUnknown : services_NotificationType(rawValue: _accessor.readBuffer(of: Int32.self, at: o)) ?? .notificationTypeUnknown }
  public var delivered: Bool { let o = _accessor.offset(VTOFFSET.delivered.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  public var opened: Bool { let o = _accessor.offset(VTOFFSET.opened.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  public var clicked: Bool { let o = _accessor.offset(VTOFFSET.clicked.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  public var deliveredAt: common_Timestamp? { let o = _accessor.offset(VTOFFSET.deliveredAt.v); return o == 0 ? nil : common_Timestamp(_accessor.bb, o: _accessor.indirect(o + _accessor.position)) }
  public var openedAt: common_Timestamp? { let o = _accessor.offset(VTOFFSET.openedAt.v); return o == 0 ? nil : common_Timestamp(_accessor.bb, o: _accessor.indirect(o + _accessor.position)) }
  public var clickedAt: common_Timestamp? { let o = _accessor.offset(VTOFFSET.clickedAt.v); return o == 0 ? nil : common_Timestamp(_accessor.bb, o: _accessor.indirect(o + _accessor.position)) }
  public static func startNotificationMetrics(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 8) }
  public static func add(notificationId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: notificationId, at: VTOFFSET.notificationId.p) }
  public static func add(type: services_NotificationType, _ fbb: inout FlatBufferBuilder) { fbb.add(element: type.rawValue, def: 0, at: VTOFFSET.type.p) }
  public static func add(delivered: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: delivered, def: false,
   at: VTOFFSET.delivered.p) }
  public static func add(opened: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: opened, def: false,
   at: VTOFFSET.opened.p) }
  public static func add(clicked: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: clicked, def: false,
   at: VTOFFSET.clicked.p) }
  public static func add(deliveredAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: deliveredAt, at: VTOFFSET.deliveredAt.p) }
  public static func add(openedAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: openedAt, at: VTOFFSET.openedAt.p) }
  public static func add(clickedAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: clickedAt, at: VTOFFSET.clickedAt.p) }
  public static func endNotificationMetrics(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createNotificationMetrics(
    _ fbb: inout FlatBufferBuilder,
    notificationIdOffset notificationId: Offset = Offset(),
    type: services_NotificationType = .notificationTypeUnknown,
    delivered: Bool = false,
    opened: Bool = false,
    clicked: Bool = false,
    deliveredAtOffset deliveredAt: Offset = Offset(),
    openedAtOffset openedAt: Offset = Offset(),
    clickedAtOffset clickedAt: Offset = Offset()
  ) -> Offset {
    let __start = services_NotificationMetrics.startNotificationMetrics(&fbb)
    services_NotificationMetrics.add(notificationId: notificationId, &fbb)
    services_NotificationMetrics.add(type: type, &fbb)
    services_NotificationMetrics.add(delivered: delivered, &fbb)
    services_NotificationMetrics.add(opened: opened, &fbb)
    services_NotificationMetrics.add(clicked: clicked, &fbb)
    services_NotificationMetrics.add(deliveredAt: deliveredAt, &fbb)
    services_NotificationMetrics.add(openedAt: openedAt, &fbb)
    services_NotificationMetrics.add(clickedAt: clickedAt, &fbb)
    return services_NotificationMetrics.endNotificationMetrics(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.notificationId.p, fieldName: "notificationId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.type.p, fieldName: "type", required: false, type: services_NotificationType.self)
    try _v.visit(field: VTOFFSET.delivered.p, fieldName: "delivered", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.opened.p, fieldName: "opened", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.clicked.p, fieldName: "clicked", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.deliveredAt.p, fieldName: "deliveredAt", required: false, type: ForwardOffset<common_Timestamp>.self)
    try _v.visit(field: VTOFFSET.openedAt.p, fieldName: "openedAt", required: false, type: ForwardOffset<common_Timestamp>.self)
    try _v.visit(field: VTOFFSET.clickedAt.p, fieldName: "clickedAt", required: false, type: ForwardOffset<common_Timestamp>.self)
    _v.finish()
  }
}

public struct services_UserAnalyticsRequest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_25_2_10() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case userId = 4
    case startDate = 6
    case endDate = 8
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var userId: String? { let o = _accessor.offset(VTOFFSET.userId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var userIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.userId.v) }
  public var startDate: common_Timestamp? { let o = _accessor.offset(VTOFFSET.startDate.v); return o == 0 ? nil : common_Timestamp(_accessor.bb, o: _accessor.indirect(o + _accessor.position)) }
  public var endDate: common_Timestamp? { let o = _accessor.offset(VTOFFSET.endDate.v); return o == 0 ? nil : common_Timestamp(_accessor.bb, o: _accessor.indirect(o + _accessor.position)) }
  public static func startUserAnalyticsRequest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 3) }
  public static func add(userId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: userId, at: VTOFFSET.userId.p) }
  public static func add(startDate: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: startDate, at: VTOFFSET.startDate.p) }
  public static func add(endDate: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: endDate, at: VTOFFSET.endDate.p) }
  public static func endUserAnalyticsRequest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createUserAnalyticsRequest(
    _ fbb: inout FlatBufferBuilder,
    userIdOffset userId: Offset = Offset(),
    startDateOffset startDate: Offset = Offset(),
    endDateOffset endDate: Offset = Offset()
  ) -> Offset {
    let __start = services_UserAnalyticsRequest.startUserAnalyticsRequest(&fbb)
    services_UserAnalyticsRequest.add(userId: userId, &fbb)
    services_UserAnalyticsRequest.add(startDate: startDate, &fbb)
    services_UserAnalyticsRequest.add(endDate: endDate, &fbb)
    return services_UserAnalyticsRequest.endUserAnalyticsRequest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.userId.p, fieldName: "userId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.startDate.p, fieldName: "startDate", required: false, type: ForwardOffset<common_Timestamp>.self)
    try _v.visit(field: VTOFFSET.endDate.p, fieldName: "endDate", required: false, type: ForwardOffset<common_Timestamp>.self)
    _v.finish()
  }
}

public struct services_UserAnalyticsResponse: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_25_2_10() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case user = 4
    case activities = 6
    case notificationMetrics = 8
    case totalActivities = 10
    case totalNotificationsSent = 12
    case totalNotificationsOpened = 14
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var user: services_User? { let o = _accessor.offset(VTOFFSET.user.v); return o == 0 ? nil : services_User(_accessor.bb, o: _accessor.indirect(o + _accessor.position)) }
  public var hasActivities: Bool { let o = _accessor.offset(VTOFFSET.activities.v); return o == 0 ? false : true }
  public var activitiesCount: Int32 { let o = _accessor.offset(VTOFFSET.activities.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func activities(at index: Int32) -> services_UserActivity? { let o = _accessor.offset(VTOFFSET.activities.v); return o == 0 ? nil : services_UserActivity(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
  public var hasNotificationMetrics: Bool { let o = _accessor.offset(VTOFFSET.notificationMetrics.v); return o == 0 ? false : true }
  public var notificationMetricsCount: Int32 { let o = _accessor.offset(VTOFFSET.notificationMetrics.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func notificationMetrics(at index: Int32) -> services_NotificationMetrics? { let o = _accessor.offset(VTOFFSET.notificationMetrics.v); return o == 0 ? nil : services_NotificationMetrics(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
  public var totalActivities: Int32 { let o = _accessor.offset(VTOFFSET.totalActivities.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  public var totalNotificationsSent: Int32 { let o = _accessor.offset(VTOFFSET.totalNotificationsSent.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  public var totalNotificationsOpened: Int32 { let o = _accessor.offset(VTOFFSET.totalNotificationsOpened.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  public static func startUserAnalyticsResponse(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 6) }
  public static func add(user: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: user, at: VTOFFSET.user.p) }
  public static func addVectorOf(activities: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: activities, at: VTOFFSET.activities.p) }
  public static func addVectorOf(notificationMetrics: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: notificationMetrics, at: VTOFFSET.notificationMetrics.p) }
  public static func add(totalActivities: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: totalActivities, def: 0, at: VTOFFSET.totalActivities.p) }
  public static func add(totalNotificationsSent: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: totalNotificationsSent, def: 0, at: VTOFFSET.totalNotificationsSent.p) }
  public static func add(totalNotificationsOpened: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: totalNotificationsOpened, def: 0, at: VTOFFSET.totalNotificationsOpened.p) }
  public static func endUserAnalyticsResponse(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createUserAnalyticsResponse(
    _ fbb: inout FlatBufferBuilder,
    userOffset user: Offset = Offset(),
    activitiesVectorOffset activities: Offset = Offset(),
    notificationMetricsVectorOffset notificationMetrics: Offset = Offset(),
    totalActivities: Int32 = 0,
    totalNotificationsSent: Int32 = 0,
    totalNotificationsOpened: Int32 = 0
  ) -> Offset {
    let __start = services_UserAnalyticsResponse.startUserAnalyticsResponse(&fbb)
    services_UserAnalyticsResponse.add(user: user, &fbb)
    services_UserAnalyticsResponse.addVectorOf(activities: activities, &fbb)
    services_UserAnalyticsResponse.addVectorOf(notificationMetrics: notificationMetrics, &fbb)
    services_UserAnalyticsResponse.add(totalActivities: totalActivities, &fbb)
    services_UserAnalyticsResponse.add(totalNotificationsSent: totalNotificationsSent, &fbb)
    services_UserAnalyticsResponse.add(totalNotificationsOpened: totalNotificationsOpened, &fbb)
    return services_UserAnalyticsResponse.endUserAnalyticsResponse(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.user.p, fieldName: "user", required: false, type: ForwardOffset<services_User>.self)
    try _v.visit(field: VTOFFSET.activities.p, fieldName: "activities", required: false, type: ForwardOffset<Vector<ForwardOffset<services_UserActivity>, services_UserActivity>>.self)
    try _v.visit(field: VTOFFSET.notificationMetrics.p, fieldName: "notificationMetrics", required: false, type: ForwardOffset<Vector<ForwardOffset<services_NotificationMetrics>, services_NotificationMetrics>>.self)
    try _v.visit(field: VTOFFSET.totalActivities.p, fieldName: "totalActivities", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.totalNotificationsSent.p, fieldName: "totalNotificationsSent", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.totalNotificationsOpened.p, fieldName: "totalNotificationsOpened", required: false, type: Int32.self)
    _v.finish()
  }
}

public struct services_SystemMetricsRequest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_25_2_10() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case startDate = 4
    case endDate = 6
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var startDate: common_Timestamp? { let o = _accessor.offset(VTOFFSET.startDate.v); return o == 0 ? nil : common_Timestamp(_accessor.bb, o: _accessor.indirect(o + _accessor.position)) }
  public var endDate: common_Timestamp? { let o = _accessor.offset(VTOFFSET.endDate.v); return o == 0 ? nil : common_Timestamp(_accessor.bb, o: _accessor.indirect(o + _accessor.position)) }
  public static func startSystemMetricsRequest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 2) }
  public static func add(startDate: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: startDate, at: VTOFFSET.startDate.p) }
  public static func add(endDate: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: endDate, at: VTOFFSET.endDate.p) }
  public static func endSystemMetricsRequest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createSystemMetricsRequest(
    _ fbb: inout FlatBufferBuilder,
    startDateOffset startDate: Offset = Offset(),
    endDateOffset endDate: Offset = Offset()
  ) -> Offset {
    let __start = services_SystemMetricsRequest.startSystemMetricsRequest(&fbb)
    services_SystemMetricsRequest.add(startDate: startDate, &fbb)
    services_SystemMetricsRequest.add(endDate: endDate, &fbb)
    return services_SystemMetricsRequest.endSystemMetricsRequest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.startDate.p, fieldName: "startDate", required: false, type: ForwardOffset<common_Timestamp>.self)
    try _v.visit(field: VTOFFSET.endDate.p, fieldName: "endDate", required: false, type: ForwardOffset<common_Timestamp>.self)
    _v.finish()
  }
}

public struct services_SystemMetricsResponse: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_25_2_10() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case totalUsers = 4
    case activeUsers = 6
    case totalNotificationsSent = 8
    case notificationOpenRate = 10
    case activityCounts = 12
    case generatedAt = 14
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var totalUsers: Int32 { let o = _accessor.offset(VTOFFSET.totalUsers.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  public var activeUsers: Int32 { let o = _accessor.offset(VTOFFSET.activeUsers.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  public var totalNotificationsSent: Int32 { let o = _accessor.offset(VTOFFSET.totalNotificationsSent.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  public var notificationOpenRate: Double { let o = _accessor.offset(VTOFFSET.notificationOpenRate.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  public var hasActivityCounts: Bool { let o = _accessor.offset(VTOFFSET.activityCounts.v); return o == 0 ? false : true }
  public var activityCountsCount: Int32 { let o = _accessor.offset(VTOFFSET.activityCounts.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func activityCounts(at index: Int32) -> services_SystemMetricsResponse__ActivityCountsEntry? { let o = _accessor.offset(VTOFFSET.activityCounts.v); return o == 0 ? nil : services_SystemMetricsResponse__ActivityCountsEntry(_accessor.bb, o: _accessor.indirect(_accessor.vector(at: o) + index * 4)) }
  public var generatedAt: common_Timestamp? { let o = _accessor.offset(VTOFFSET.generatedAt.v); return o == 0 ? nil : common_Timestamp(_accessor.bb, o: _accessor.indirect(o + _accessor.position)) }
  public static func startSystemMetricsResponse(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 6) }
  public static func add(totalUsers: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: totalUsers, def: 0, at: VTOFFSET.totalUsers.p) }
  public static func add(activeUsers: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: activeUsers, def: 0, at: VTOFFSET.activeUsers.p) }
  public static func add(totalNotificationsSent: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: totalNotificationsSent, def: 0, at: VTOFFSET.totalNotificationsSent.p) }
  public static func add(notificationOpenRate: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: notificationOpenRate, def: 0.0, at: VTOFFSET.notificationOpenRate.p) }
  public static func addVectorOf(activityCounts: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: activityCounts, at: VTOFFSET.activityCounts.p) }
  public static func add(generatedAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: generatedAt, at: VTOFFSET.generatedAt.p) }
  public static func endSystemMetricsResponse(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createSystemMetricsResponse(
    _ fbb: inout FlatBufferBuilder,
    totalUsers: Int32 = 0,
    activeUsers: Int32 = 0,
    totalNotificationsSent: Int32 = 0,
    notificationOpenRate: Double = 0.0,
    activityCountsVectorOffset activityCounts: Offset = Offset(),
    generatedAtOffset generatedAt: Offset = Offset()
  ) -> Offset {
    let __start = services_SystemMetricsResponse.startSystemMetricsResponse(&fbb)
    services_SystemMetricsResponse.add(totalUsers: totalUsers, &fbb)
    services_SystemMetricsResponse.add(activeUsers: activeUsers, &fbb)
    services_SystemMetricsResponse.add(totalNotificationsSent: totalNotificationsSent, &fbb)
    services_SystemMetricsResponse.add(notificationOpenRate: notificationOpenRate, &fbb)
    services_SystemMetricsResponse.addVectorOf(activityCounts: activityCounts, &fbb)
    services_SystemMetricsResponse.add(generatedAt: generatedAt, &fbb)
    return services_SystemMetricsResponse.endSystemMetricsResponse(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.totalUsers.p, fieldName: "totalUsers", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.activeUsers.p, fieldName: "activeUsers", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.totalNotificationsSent.p, fieldName: "totalNotificationsSent", required: false, type: Int32.self)
    try _v.visit(field: VTOFFSET.notificationOpenRate.p, fieldName: "notificationOpenRate", required: false, type: Double.self)
    try _v.visit(field: VTOFFSET.activityCounts.p, fieldName: "activityCounts", required: false, type: ForwardOffset<Vector<ForwardOffset<services_SystemMetricsResponse__ActivityCountsEntry>, services_SystemMetricsResponse__ActivityCountsEntry>>.self)
    try _v.visit(field: VTOFFSET.generatedAt.p, fieldName: "generatedAt", required: false, type: ForwardOffset<common_Timestamp>.self)
    _v.finish()
  }
}

public struct services_SystemMetricsResponse__ActivityCountsEntry: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_25_2_10() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case key = 4
    case value = 6
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var key: String? { let o = _accessor.offset(VTOFFSET.key.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var keySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.key.v) }
  public var value: Int32 { let o = _accessor.offset(VTOFFSET.value.v); return o == 0 ? 0 : _accessor.readBuffer(of: Int32.self, at: o) }
  public static func startActivityCountsEntry(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 2) }
  public static func add(key: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: key, at: VTOFFSET.key.p) }
  public static func add(value: Int32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: value, def: 0, at: VTOFFSET.value.p) }
  public static func endActivityCountsEntry(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createActivityCountsEntry(
    _ fbb: inout FlatBufferBuilder,
    keyOffset key: Offset = Offset(),
    value: Int32 = 0
  ) -> Offset {
    let __start = services_SystemMetricsResponse__ActivityCountsEntry.startActivityCountsEntry(&fbb)
    services_SystemMetricsResponse__ActivityCountsEntry.add(key: key, &fbb)
    services_SystemMetricsResponse__ActivityCountsEntry.add(value: value, &fbb)
    return services_SystemMetricsResponse__ActivityCountsEntry.endActivityCountsEntry(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.key.p, fieldName: "key", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.value.p, fieldName: "value", required: false, type: Int32.self)
    _v.finish()
  }
}

public struct services_TrackUserActivityResponse: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_25_2_10() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case success = 4
    case message = 6
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var success: Bool { let o = _accessor.offset(VTOFFSET.success.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  public var message: String? { let o = _accessor.offset(VTOFFSET.message.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var messageSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.message.v) }
  public static func startTrackUserActivityResponse(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 2) }
  public static func add(success: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: success, def: false,
   at: VTOFFSET.success.p) }
  public static func add(message: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: message, at: VTOFFSET.message.p) }
  public static func endTrackUserActivityResponse(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createTrackUserActivityResponse(
    _ fbb: inout FlatBufferBuilder,
    success: Bool = false,
    messageOffset message: Offset = Offset()
  ) -> Offset {
    let __start = services_TrackUserActivityResponse.startTrackUserActivityResponse(&fbb)
    services_TrackUserActivityResponse.add(success: success, &fbb)
    services_TrackUserActivityResponse.add(message: message, &fbb)
    return services_TrackUserActivityResponse.endTrackUserActivityResponse(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.success.p, fieldName: "success", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.message.p, fieldName: "message", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

