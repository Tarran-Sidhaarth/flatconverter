// DO NOT EDIT!
// swift generated by Buffman ðŸ’ª
// Versions:
// 		Buffman: 1.0.0
// 		Flatc: v25.2.10
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public struct services_User: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_25_2_10() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case userId = 4
    case email = 6
    case firstName = 8
    case lastName = 10
    case address = 12
    case status = 14
    case createdAt = 16
    case updatedAt = 18
    case roles = 20
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var userId: String? { let o = _accessor.offset(VTOFFSET.userId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var userIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.userId.v) }
  public var email: String? { let o = _accessor.offset(VTOFFSET.email.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var emailSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.email.v) }
  public var firstName: String? { let o = _accessor.offset(VTOFFSET.firstName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var firstNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.firstName.v) }
  public var lastName: String? { let o = _accessor.offset(VTOFFSET.lastName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var lastNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.lastName.v) }
  public var address: common_Address? { let o = _accessor.offset(VTOFFSET.address.v); return o == 0 ? nil : common_Address(_accessor.bb, o: _accessor.indirect(o + _accessor.position)) }
  public var status: common_Status { let o = _accessor.offset(VTOFFSET.status.v); return o == 0 ? .statusUnknown : common_Status(rawValue: _accessor.readBuffer(of: Int32.self, at: o)) ?? .statusUnknown }
  public var createdAt: common_Timestamp? { let o = _accessor.offset(VTOFFSET.createdAt.v); return o == 0 ? nil : common_Timestamp(_accessor.bb, o: _accessor.indirect(o + _accessor.position)) }
  public var updatedAt: common_Timestamp? { let o = _accessor.offset(VTOFFSET.updatedAt.v); return o == 0 ? nil : common_Timestamp(_accessor.bb, o: _accessor.indirect(o + _accessor.position)) }
  public var hasRoles: Bool { let o = _accessor.offset(VTOFFSET.roles.v); return o == 0 ? false : true }
  public var rolesCount: Int32 { let o = _accessor.offset(VTOFFSET.roles.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func roles(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.roles.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  public static func startUser(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 9) }
  public static func add(userId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: userId, at: VTOFFSET.userId.p) }
  public static func add(email: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: email, at: VTOFFSET.email.p) }
  public static func add(firstName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: firstName, at: VTOFFSET.firstName.p) }
  public static func add(lastName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: lastName, at: VTOFFSET.lastName.p) }
  public static func add(address: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: address, at: VTOFFSET.address.p) }
  public static func add(status: common_Status, _ fbb: inout FlatBufferBuilder) { fbb.add(element: status.rawValue, def: 0, at: VTOFFSET.status.p) }
  public static func add(createdAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: createdAt, at: VTOFFSET.createdAt.p) }
  public static func add(updatedAt: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: updatedAt, at: VTOFFSET.updatedAt.p) }
  public static func addVectorOf(roles: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: roles, at: VTOFFSET.roles.p) }
  public static func endUser(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createUser(
    _ fbb: inout FlatBufferBuilder,
    userIdOffset userId: Offset = Offset(),
    emailOffset email: Offset = Offset(),
    firstNameOffset firstName: Offset = Offset(),
    lastNameOffset lastName: Offset = Offset(),
    addressOffset address: Offset = Offset(),
    status: common_Status = .statusUnknown,
    createdAtOffset createdAt: Offset = Offset(),
    updatedAtOffset updatedAt: Offset = Offset(),
    rolesVectorOffset roles: Offset = Offset()
  ) -> Offset {
    let __start = services_User.startUser(&fbb)
    services_User.add(userId: userId, &fbb)
    services_User.add(email: email, &fbb)
    services_User.add(firstName: firstName, &fbb)
    services_User.add(lastName: lastName, &fbb)
    services_User.add(address: address, &fbb)
    services_User.add(status: status, &fbb)
    services_User.add(createdAt: createdAt, &fbb)
    services_User.add(updatedAt: updatedAt, &fbb)
    services_User.addVectorOf(roles: roles, &fbb)
    return services_User.endUser(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.userId.p, fieldName: "userId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.email.p, fieldName: "email", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.firstName.p, fieldName: "firstName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.lastName.p, fieldName: "lastName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.address.p, fieldName: "address", required: false, type: ForwardOffset<common_Address>.self)
    try _v.visit(field: VTOFFSET.status.p, fieldName: "status", required: false, type: common_Status.self)
    try _v.visit(field: VTOFFSET.createdAt.p, fieldName: "createdAt", required: false, type: ForwardOffset<common_Timestamp>.self)
    try _v.visit(field: VTOFFSET.updatedAt.p, fieldName: "updatedAt", required: false, type: ForwardOffset<common_Timestamp>.self)
    try _v.visit(field: VTOFFSET.roles.p, fieldName: "roles", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    _v.finish()
  }
}

public struct services_CreateUserRequest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_25_2_10() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case email = 4
    case firstName = 6
    case lastName = 8
    case address = 10
    case roles = 12
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var email: String? { let o = _accessor.offset(VTOFFSET.email.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var emailSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.email.v) }
  public var firstName: String? { let o = _accessor.offset(VTOFFSET.firstName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var firstNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.firstName.v) }
  public var lastName: String? { let o = _accessor.offset(VTOFFSET.lastName.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var lastNameSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.lastName.v) }
  public var address: common_Address? { let o = _accessor.offset(VTOFFSET.address.v); return o == 0 ? nil : common_Address(_accessor.bb, o: _accessor.indirect(o + _accessor.position)) }
  public var hasRoles: Bool { let o = _accessor.offset(VTOFFSET.roles.v); return o == 0 ? false : true }
  public var rolesCount: Int32 { let o = _accessor.offset(VTOFFSET.roles.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func roles(at index: Int32) -> String? { let o = _accessor.offset(VTOFFSET.roles.v); return o == 0 ? nil : _accessor.directString(at: _accessor.vector(at: o) + index * 4) }
  public static func startCreateUserRequest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 5) }
  public static func add(email: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: email, at: VTOFFSET.email.p) }
  public static func add(firstName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: firstName, at: VTOFFSET.firstName.p) }
  public static func add(lastName: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: lastName, at: VTOFFSET.lastName.p) }
  public static func add(address: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: address, at: VTOFFSET.address.p) }
  public static func addVectorOf(roles: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: roles, at: VTOFFSET.roles.p) }
  public static func endCreateUserRequest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createCreateUserRequest(
    _ fbb: inout FlatBufferBuilder,
    emailOffset email: Offset = Offset(),
    firstNameOffset firstName: Offset = Offset(),
    lastNameOffset lastName: Offset = Offset(),
    addressOffset address: Offset = Offset(),
    rolesVectorOffset roles: Offset = Offset()
  ) -> Offset {
    let __start = services_CreateUserRequest.startCreateUserRequest(&fbb)
    services_CreateUserRequest.add(email: email, &fbb)
    services_CreateUserRequest.add(firstName: firstName, &fbb)
    services_CreateUserRequest.add(lastName: lastName, &fbb)
    services_CreateUserRequest.add(address: address, &fbb)
    services_CreateUserRequest.addVectorOf(roles: roles, &fbb)
    return services_CreateUserRequest.endCreateUserRequest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.email.p, fieldName: "email", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.firstName.p, fieldName: "firstName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.lastName.p, fieldName: "lastName", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.address.p, fieldName: "address", required: false, type: ForwardOffset<common_Address>.self)
    try _v.visit(field: VTOFFSET.roles.p, fieldName: "roles", required: false, type: ForwardOffset<Vector<ForwardOffset<String>, String>>.self)
    _v.finish()
  }
}

public struct services_CreateUserResponse: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_25_2_10() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case user = 4
    case success = 6
    case message = 8
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var user: services_User? { let o = _accessor.offset(VTOFFSET.user.v); return o == 0 ? nil : services_User(_accessor.bb, o: _accessor.indirect(o + _accessor.position)) }
  public var success: Bool { let o = _accessor.offset(VTOFFSET.success.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  public var message: String? { let o = _accessor.offset(VTOFFSET.message.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var messageSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.message.v) }
  public static func startCreateUserResponse(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 3) }
  public static func add(user: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: user, at: VTOFFSET.user.p) }
  public static func add(success: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: success, def: false,
   at: VTOFFSET.success.p) }
  public static func add(message: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: message, at: VTOFFSET.message.p) }
  public static func endCreateUserResponse(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createCreateUserResponse(
    _ fbb: inout FlatBufferBuilder,
    userOffset user: Offset = Offset(),
    success: Bool = false,
    messageOffset message: Offset = Offset()
  ) -> Offset {
    let __start = services_CreateUserResponse.startCreateUserResponse(&fbb)
    services_CreateUserResponse.add(user: user, &fbb)
    services_CreateUserResponse.add(success: success, &fbb)
    services_CreateUserResponse.add(message: message, &fbb)
    return services_CreateUserResponse.endCreateUserResponse(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.user.p, fieldName: "user", required: false, type: ForwardOffset<services_User>.self)
    try _v.visit(field: VTOFFSET.success.p, fieldName: "success", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.message.p, fieldName: "message", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

public struct services_GetUserRequest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_25_2_10() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case userId = 4
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var userId: String? { let o = _accessor.offset(VTOFFSET.userId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var userIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.userId.v) }
  public static func startGetUserRequest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 1) }
  public static func add(userId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: userId, at: VTOFFSET.userId.p) }
  public static func endGetUserRequest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createGetUserRequest(
    _ fbb: inout FlatBufferBuilder,
    userIdOffset userId: Offset = Offset()
  ) -> Offset {
    let __start = services_GetUserRequest.startGetUserRequest(&fbb)
    services_GetUserRequest.add(userId: userId, &fbb)
    return services_GetUserRequest.endGetUserRequest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.userId.p, fieldName: "userId", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

public struct services_GetUserResponse: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_25_2_10() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case user = 4
    case found = 6
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var user: services_User? { let o = _accessor.offset(VTOFFSET.user.v); return o == 0 ? nil : services_User(_accessor.bb, o: _accessor.indirect(o + _accessor.position)) }
  public var found: Bool { let o = _accessor.offset(VTOFFSET.found.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  public static func startGetUserResponse(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 2) }
  public static func add(user: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: user, at: VTOFFSET.user.p) }
  public static func add(found: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: found, def: false,
   at: VTOFFSET.found.p) }
  public static func endGetUserResponse(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createGetUserResponse(
    _ fbb: inout FlatBufferBuilder,
    userOffset user: Offset = Offset(),
    found: Bool = false
  ) -> Offset {
    let __start = services_GetUserResponse.startGetUserResponse(&fbb)
    services_GetUserResponse.add(user: user, &fbb)
    services_GetUserResponse.add(found: found, &fbb)
    return services_GetUserResponse.endGetUserResponse(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.user.p, fieldName: "user", required: false, type: ForwardOffset<services_User>.self)
    try _v.visit(field: VTOFFSET.found.p, fieldName: "found", required: false, type: Bool.self)
    _v.finish()
  }
}

public struct services_UpdateUserStatusRequest: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_25_2_10() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case userId = 4
    case newStatus = 6
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var userId: String? { let o = _accessor.offset(VTOFFSET.userId.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var userIdSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.userId.v) }
  public var newStatus: common_Status { let o = _accessor.offset(VTOFFSET.newStatus.v); return o == 0 ? .statusUnknown : common_Status(rawValue: _accessor.readBuffer(of: Int32.self, at: o)) ?? .statusUnknown }
  public static func startUpdateUserStatusRequest(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 2) }
  public static func add(userId: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: userId, at: VTOFFSET.userId.p) }
  public static func add(newStatus: common_Status, _ fbb: inout FlatBufferBuilder) { fbb.add(element: newStatus.rawValue, def: 0, at: VTOFFSET.newStatus.p) }
  public static func endUpdateUserStatusRequest(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createUpdateUserStatusRequest(
    _ fbb: inout FlatBufferBuilder,
    userIdOffset userId: Offset = Offset(),
    newStatus: common_Status = .statusUnknown
  ) -> Offset {
    let __start = services_UpdateUserStatusRequest.startUpdateUserStatusRequest(&fbb)
    services_UpdateUserStatusRequest.add(userId: userId, &fbb)
    services_UpdateUserStatusRequest.add(newStatus: newStatus, &fbb)
    return services_UpdateUserStatusRequest.endUpdateUserStatusRequest(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.userId.p, fieldName: "userId", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.newStatus.p, fieldName: "newStatus", required: false, type: common_Status.self)
    _v.finish()
  }
}

public struct services_UpdateUserStatusResponse: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_25_2_10() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case success = 4
    case message = 6
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var success: Bool { let o = _accessor.offset(VTOFFSET.success.v); return o == 0 ? false : _accessor.readBuffer(of: Bool.self, at: o) }
  public var message: String? { let o = _accessor.offset(VTOFFSET.message.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var messageSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.message.v) }
  public static func startUpdateUserStatusResponse(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 2) }
  public static func add(success: Bool, _ fbb: inout FlatBufferBuilder) { fbb.add(element: success, def: false,
   at: VTOFFSET.success.p) }
  public static func add(message: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: message, at: VTOFFSET.message.p) }
  public static func endUpdateUserStatusResponse(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createUpdateUserStatusResponse(
    _ fbb: inout FlatBufferBuilder,
    success: Bool = false,
    messageOffset message: Offset = Offset()
  ) -> Offset {
    let __start = services_UpdateUserStatusResponse.startUpdateUserStatusResponse(&fbb)
    services_UpdateUserStatusResponse.add(success: success, &fbb)
    services_UpdateUserStatusResponse.add(message: message, &fbb)
    return services_UpdateUserStatusResponse.endUpdateUserStatusResponse(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.success.p, fieldName: "success", required: false, type: Bool.self)
    try _v.visit(field: VTOFFSET.message.p, fieldName: "message", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

