// DO NOT EDIT!
// Swift generated by Buffman ðŸ’ª
// Versions:
//		Buffman: 1.0.0
//		Flatc: v25.2.10
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public struct common_Address: FlatBufferObject, Verifiable {

  static func validateVersion() { FlatBuffersVersion_25_2_10() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case street = 4
    case city = 6
    case state = 8
    case postalCode = 10
    case country = 12
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var street: String? { let o = _accessor.offset(VTOFFSET.street.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var streetSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.street.v) }
  public var city: String? { let o = _accessor.offset(VTOFFSET.city.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var citySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.city.v) }
  public var state: String? { let o = _accessor.offset(VTOFFSET.state.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var stateSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.state.v) }
  public var postalCode: String? { let o = _accessor.offset(VTOFFSET.postalCode.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var postalCodeSegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.postalCode.v) }
  public var country: String? { let o = _accessor.offset(VTOFFSET.country.v); return o == 0 ? nil : _accessor.string(at: o) }
  public var countrySegmentArray: [UInt8]? { return _accessor.getVector(at: VTOFFSET.country.v) }
  public static func startAddress(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 5) }
  public static func add(street: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: street, at: VTOFFSET.street.p) }
  public static func add(city: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: city, at: VTOFFSET.city.p) }
  public static func add(state: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: state, at: VTOFFSET.state.p) }
  public static func add(postalCode: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: postalCode, at: VTOFFSET.postalCode.p) }
  public static func add(country: Offset, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: country, at: VTOFFSET.country.p) }
  public static func endAddress(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset { let end = Offset(offset: fbb.endTable(at: start)); return end }
  public static func createAddress(
    _ fbb: inout FlatBufferBuilder,
    streetOffset street: Offset = Offset(),
    cityOffset city: Offset = Offset(),
    stateOffset state: Offset = Offset(),
    postalCodeOffset postalCode: Offset = Offset(),
    countryOffset country: Offset = Offset()
  ) -> Offset {
    let __start = common_Address.startAddress(&fbb)
    common_Address.add(street: street, &fbb)
    common_Address.add(city: city, &fbb)
    common_Address.add(state: state, &fbb)
    common_Address.add(postalCode: postalCode, &fbb)
    common_Address.add(country: country, &fbb)
    return common_Address.endAddress(&fbb, start: __start)
  }

  public static func verify<T>(_ verifier: inout Verifier, at position: Int, of type: T.Type) throws where T: Verifiable {
    var _v = try verifier.visitTable(at: position)
    try _v.visit(field: VTOFFSET.street.p, fieldName: "street", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.city.p, fieldName: "city", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.state.p, fieldName: "state", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.postalCode.p, fieldName: "postalCode", required: false, type: ForwardOffset<String>.self)
    try _v.visit(field: VTOFFSET.country.p, fieldName: "country", required: false, type: ForwardOffset<String>.self)
    _v.finish()
  }
}

