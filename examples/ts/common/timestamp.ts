// DO NOT EDIT!
// Ts generated by Buffman ðŸ’ª
// Versions:
//		Buffman: 1.0.0
//		Flatc: v25.2.10

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class Timestamp {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Timestamp {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTimestamp(bb:flatbuffers.ByteBuffer, obj?:Timestamp):Timestamp {
  return (obj || new Timestamp()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTimestamp(bb:flatbuffers.ByteBuffer, obj?:Timestamp):Timestamp {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Timestamp()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

seconds():bigint {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt('0');
}

nanos():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

static startTimestamp(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addSeconds(builder:flatbuffers.Builder, seconds:bigint) {
  builder.addFieldInt64(0, seconds, BigInt('0'));
}

static addNanos(builder:flatbuffers.Builder, nanos:number) {
  builder.addFieldInt32(1, nanos, 0);
}

static endTimestamp(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createTimestamp(builder:flatbuffers.Builder, seconds:bigint, nanos:number):flatbuffers.Offset {
  Timestamp.startTimestamp(builder);
  Timestamp.addSeconds(builder, seconds);
  Timestamp.addNanos(builder, nanos);
  return Timestamp.endTimestamp(builder);
}
}
