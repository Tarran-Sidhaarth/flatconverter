// DO NOT EDIT!
// Ts generated by Buffman ðŸ’ª
// Versions:
//		Buffman: 1.0.0
//		Flatc: v25.2.10

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class Address {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):Address {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsAddress(bb:flatbuffers.ByteBuffer, obj?:Address):Address {
  return (obj || new Address()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsAddress(bb:flatbuffers.ByteBuffer, obj?:Address):Address {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Address()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

street():string|null
street(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
street(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

city():string|null
city(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
city(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

state():string|null
state(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
state(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

postalCode():string|null
postalCode(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
postalCode(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

country():string|null
country(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
country(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startAddress(builder:flatbuffers.Builder) {
  builder.startObject(5);
}

static addStreet(builder:flatbuffers.Builder, streetOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, streetOffset, 0);
}

static addCity(builder:flatbuffers.Builder, cityOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, cityOffset, 0);
}

static addState(builder:flatbuffers.Builder, stateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, stateOffset, 0);
}

static addPostalCode(builder:flatbuffers.Builder, postalCodeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, postalCodeOffset, 0);
}

static addCountry(builder:flatbuffers.Builder, countryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, countryOffset, 0);
}

static endAddress(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createAddress(builder:flatbuffers.Builder, streetOffset:flatbuffers.Offset, cityOffset:flatbuffers.Offset, stateOffset:flatbuffers.Offset, postalCodeOffset:flatbuffers.Offset, countryOffset:flatbuffers.Offset):flatbuffers.Offset {
  Address.startAddress(builder);
  Address.addStreet(builder, streetOffset);
  Address.addCity(builder, cityOffset);
  Address.addState(builder, stateOffset);
  Address.addPostalCode(builder, postalCodeOffset);
  Address.addCountry(builder, countryOffset);
  return Address.endAddress(builder);
}
}
