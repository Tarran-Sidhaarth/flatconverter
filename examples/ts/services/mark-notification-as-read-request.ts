// DO NOT EDIT!
// ts generated by Buffman ðŸ’ª
// Versions:
//		Buffman: 1.0.0
//		Flatc: v25.2.10

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class MarkNotificationAsReadRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):MarkNotificationAsReadRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsMarkNotificationAsReadRequest(bb:flatbuffers.ByteBuffer, obj?:MarkNotificationAsReadRequest):MarkNotificationAsReadRequest {
  return (obj || new MarkNotificationAsReadRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsMarkNotificationAsReadRequest(bb:flatbuffers.ByteBuffer, obj?:MarkNotificationAsReadRequest):MarkNotificationAsReadRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new MarkNotificationAsReadRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

notificationId():string|null
notificationId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
notificationId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

userId():string|null
userId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
userId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startMarkNotificationAsReadRequest(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addNotificationId(builder:flatbuffers.Builder, notificationIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, notificationIdOffset, 0);
}

static addUserId(builder:flatbuffers.Builder, userIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, userIdOffset, 0);
}

static endMarkNotificationAsReadRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createMarkNotificationAsReadRequest(builder:flatbuffers.Builder, notificationIdOffset:flatbuffers.Offset, userIdOffset:flatbuffers.Offset):flatbuffers.Offset {
  MarkNotificationAsReadRequest.startMarkNotificationAsReadRequest(builder);
  MarkNotificationAsReadRequest.addNotificationId(builder, notificationIdOffset);
  MarkNotificationAsReadRequest.addUserId(builder, userIdOffset);
  return MarkNotificationAsReadRequest.endMarkNotificationAsReadRequest(builder);
}
}
