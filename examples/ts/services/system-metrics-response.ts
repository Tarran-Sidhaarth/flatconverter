// DO NOT EDIT!
// Ts generated by Buffman ğŸ’ª
// Versions:
//		Buffman: 1.0.0
//		Flatc: v25.2.10

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Timestamp } from '../common/timestamp.js';
import { ActivityCountsEntry } from '../services/system-metrics-response-/activity-counts-entry.js';


export class SystemMetricsResponse {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SystemMetricsResponse {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSystemMetricsResponse(bb:flatbuffers.ByteBuffer, obj?:SystemMetricsResponse):SystemMetricsResponse {
  return (obj || new SystemMetricsResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSystemMetricsResponse(bb:flatbuffers.ByteBuffer, obj?:SystemMetricsResponse):SystemMetricsResponse {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SystemMetricsResponse()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

totalUsers():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

activeUsers():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

totalNotificationsSent():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

notificationOpenRate():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
}

activityCounts(index: number, obj?:ActivityCountsEntry):ActivityCountsEntry|null {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new ActivityCountsEntry()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

activityCountsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

generatedAt(obj?:Timestamp):Timestamp|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new Timestamp()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

static startSystemMetricsResponse(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addTotalUsers(builder:flatbuffers.Builder, totalUsers:number) {
  builder.addFieldInt32(0, totalUsers, 0);
}

static addActiveUsers(builder:flatbuffers.Builder, activeUsers:number) {
  builder.addFieldInt32(1, activeUsers, 0);
}

static addTotalNotificationsSent(builder:flatbuffers.Builder, totalNotificationsSent:number) {
  builder.addFieldInt32(2, totalNotificationsSent, 0);
}

static addNotificationOpenRate(builder:flatbuffers.Builder, notificationOpenRate:number) {
  builder.addFieldFloat64(3, notificationOpenRate, 0.0);
}

static addActivityCounts(builder:flatbuffers.Builder, activityCountsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, activityCountsOffset, 0);
}

static createActivityCountsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startActivityCountsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static addGeneratedAt(builder:flatbuffers.Builder, generatedAtOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, generatedAtOffset, 0);
}

static endSystemMetricsResponse(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

}
