// DO NOT EDIT!
// Ts generated by Buffman ðŸ’ª
// Versions:
//		Buffman: 0.0.1
//		Flatc: v25.2.10

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { NotificationType } from '../services/notification-type.js';
import { Priority } from '../services/priority.js';
import { MetadataEntry } from '../services/send-notification-request-/metadata-entry.js';


export class SendNotificationRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SendNotificationRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSendNotificationRequest(bb:flatbuffers.ByteBuffer, obj?:SendNotificationRequest):SendNotificationRequest {
  return (obj || new SendNotificationRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSendNotificationRequest(bb:flatbuffers.ByteBuffer, obj?:SendNotificationRequest):SendNotificationRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SendNotificationRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

recipientUserId():string|null
recipientUserId(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
recipientUserId(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

type():NotificationType {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : NotificationType.NOTIFICATION_TYPE_UNKNOWN;
}

title():string|null
title(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
title(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

content():string|null
content(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
content(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

priority():Priority {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : Priority.PRIORITY_LOW;
}

metadata(index: number, obj?:MetadataEntry):MetadataEntry|null {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? (obj || new MetadataEntry()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

metadataLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startSendNotificationRequest(builder:flatbuffers.Builder) {
  builder.startObject(6);
}

static addRecipientUserId(builder:flatbuffers.Builder, recipientUserIdOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, recipientUserIdOffset, 0);
}

static addType(builder:flatbuffers.Builder, type:NotificationType) {
  builder.addFieldInt32(1, type, NotificationType.NOTIFICATION_TYPE_UNKNOWN);
}

static addTitle(builder:flatbuffers.Builder, titleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, titleOffset, 0);
}

static addContent(builder:flatbuffers.Builder, contentOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, contentOffset, 0);
}

static addPriority(builder:flatbuffers.Builder, priority:Priority) {
  builder.addFieldInt32(4, priority, Priority.PRIORITY_LOW);
}

static addMetadata(builder:flatbuffers.Builder, metadataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(5, metadataOffset, 0);
}

static createMetadataVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startMetadataVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endSendNotificationRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSendNotificationRequest(builder:flatbuffers.Builder, recipientUserIdOffset:flatbuffers.Offset, type:NotificationType, titleOffset:flatbuffers.Offset, contentOffset:flatbuffers.Offset, priority:Priority, metadataOffset:flatbuffers.Offset):flatbuffers.Offset {
  SendNotificationRequest.startSendNotificationRequest(builder);
  SendNotificationRequest.addRecipientUserId(builder, recipientUserIdOffset);
  SendNotificationRequest.addType(builder, type);
  SendNotificationRequest.addTitle(builder, titleOffset);
  SendNotificationRequest.addContent(builder, contentOffset);
  SendNotificationRequest.addPriority(builder, priority);
  SendNotificationRequest.addMetadata(builder, metadataOffset);
  return SendNotificationRequest.endSendNotificationRequest(builder);
}
}
