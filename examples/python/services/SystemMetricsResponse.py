# DO NOT EDIT!
# python generated by Buffman ðŸ’ª
# Versions:
# 		Buffman: 1.0.0
# 		Flatc: v25.2.10

# namespace: services

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SystemMetricsResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SystemMetricsResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSystemMetricsResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SystemMetricsResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SystemMetricsResponse
    def TotalUsers(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SystemMetricsResponse
    def ActiveUsers(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SystemMetricsResponse
    def TotalNotificationsSent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SystemMetricsResponse
    def NotificationOpenRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # SystemMetricsResponse
    def ActivityCounts(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from services.SystemMetricsResponse_.ActivityCountsEntry import ActivityCountsEntry
            obj = ActivityCountsEntry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SystemMetricsResponse
    def ActivityCountsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SystemMetricsResponse
    def ActivityCountsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # SystemMetricsResponse
    def GeneratedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from common.Timestamp import Timestamp
            obj = Timestamp()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def SystemMetricsResponseStart(builder):
    builder.StartObject(6)

def Start(builder):
    SystemMetricsResponseStart(builder)

def SystemMetricsResponseAddTotalUsers(builder, totalUsers):
    builder.PrependInt32Slot(0, totalUsers, 0)

def AddTotalUsers(builder, totalUsers):
    SystemMetricsResponseAddTotalUsers(builder, totalUsers)

def SystemMetricsResponseAddActiveUsers(builder, activeUsers):
    builder.PrependInt32Slot(1, activeUsers, 0)

def AddActiveUsers(builder, activeUsers):
    SystemMetricsResponseAddActiveUsers(builder, activeUsers)

def SystemMetricsResponseAddTotalNotificationsSent(builder, totalNotificationsSent):
    builder.PrependInt32Slot(2, totalNotificationsSent, 0)

def AddTotalNotificationsSent(builder, totalNotificationsSent):
    SystemMetricsResponseAddTotalNotificationsSent(builder, totalNotificationsSent)

def SystemMetricsResponseAddNotificationOpenRate(builder, notificationOpenRate):
    builder.PrependFloat64Slot(3, notificationOpenRate, 0.0)

def AddNotificationOpenRate(builder, notificationOpenRate):
    SystemMetricsResponseAddNotificationOpenRate(builder, notificationOpenRate)

def SystemMetricsResponseAddActivityCounts(builder, activityCounts):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(activityCounts), 0)

def AddActivityCounts(builder, activityCounts):
    SystemMetricsResponseAddActivityCounts(builder, activityCounts)

def SystemMetricsResponseStartActivityCountsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartActivityCountsVector(builder, numElems):
    return SystemMetricsResponseStartActivityCountsVector(builder, numElems)

def SystemMetricsResponseAddGeneratedAt(builder, generatedAt):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(generatedAt), 0)

def AddGeneratedAt(builder, generatedAt):
    SystemMetricsResponseAddGeneratedAt(builder, generatedAt)

def SystemMetricsResponseEnd(builder):
    return builder.EndObject()

def End(builder):
    return SystemMetricsResponseEnd(builder)
