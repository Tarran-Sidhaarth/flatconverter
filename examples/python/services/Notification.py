# DO NOT EDIT!
# Python generated by Buffman ðŸ’ª
# Versions:
#		Buffman: 0.0.1
#		Flatc: v25.2.10

# namespace: services

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Notification(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Notification()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsNotification(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Notification
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Notification
    def NotificationId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Notification
    def RecipientUserId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Notification
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Notification
    def Title(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Notification
    def Content(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Notification
    def Priority(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Notification
    def Status(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Notification
    def CreatedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from common.Timestamp import Timestamp
            obj = Timestamp()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Notification
    def SentAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from common.Timestamp import Timestamp
            obj = Timestamp()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Notification
    def Metadata(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from services.Notification_.MetadataEntry import MetadataEntry
            obj = MetadataEntry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Notification
    def MetadataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Notification
    def MetadataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

def NotificationStart(builder):
    builder.StartObject(10)

def Start(builder):
    NotificationStart(builder)

def NotificationAddNotificationId(builder, notificationId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(notificationId), 0)

def AddNotificationId(builder, notificationId):
    NotificationAddNotificationId(builder, notificationId)

def NotificationAddRecipientUserId(builder, recipientUserId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(recipientUserId), 0)

def AddRecipientUserId(builder, recipientUserId):
    NotificationAddRecipientUserId(builder, recipientUserId)

def NotificationAddType(builder, type):
    builder.PrependInt32Slot(2, type, 0)

def AddType(builder, type):
    NotificationAddType(builder, type)

def NotificationAddTitle(builder, title):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(title), 0)

def AddTitle(builder, title):
    NotificationAddTitle(builder, title)

def NotificationAddContent(builder, content):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(content), 0)

def AddContent(builder, content):
    NotificationAddContent(builder, content)

def NotificationAddPriority(builder, priority):
    builder.PrependInt32Slot(5, priority, 0)

def AddPriority(builder, priority):
    NotificationAddPriority(builder, priority)

def NotificationAddStatus(builder, status):
    builder.PrependInt32Slot(6, status, 0)

def AddStatus(builder, status):
    NotificationAddStatus(builder, status)

def NotificationAddCreatedAt(builder, createdAt):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(createdAt), 0)

def AddCreatedAt(builder, createdAt):
    NotificationAddCreatedAt(builder, createdAt)

def NotificationAddSentAt(builder, sentAt):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(sentAt), 0)

def AddSentAt(builder, sentAt):
    NotificationAddSentAt(builder, sentAt)

def NotificationAddMetadata(builder, metadata):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(metadata), 0)

def AddMetadata(builder, metadata):
    NotificationAddMetadata(builder, metadata)

def NotificationStartMetadataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartMetadataVector(builder, numElems):
    return NotificationStartMetadataVector(builder, numElems)

def NotificationEnd(builder):
    return builder.EndObject()

def End(builder):
    return NotificationEnd(builder)
