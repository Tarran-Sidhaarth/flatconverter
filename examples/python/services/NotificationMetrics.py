# DO NOT EDIT!
# python generated by Buffman ðŸ’ª
# Versions:
# 		Buffman: 1.0.0
# 		Flatc: v25.2.10

# namespace: services

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class NotificationMetrics(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = NotificationMetrics()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsNotificationMetrics(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # NotificationMetrics
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # NotificationMetrics
    def NotificationId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # NotificationMetrics
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # NotificationMetrics
    def Delivered(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # NotificationMetrics
    def Opened(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # NotificationMetrics
    def Clicked(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # NotificationMetrics
    def DeliveredAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from common.Timestamp import Timestamp
            obj = Timestamp()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NotificationMetrics
    def OpenedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from common.Timestamp import Timestamp
            obj = Timestamp()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NotificationMetrics
    def ClickedAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from common.Timestamp import Timestamp
            obj = Timestamp()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def NotificationMetricsStart(builder):
    builder.StartObject(8)

def Start(builder):
    NotificationMetricsStart(builder)

def NotificationMetricsAddNotificationId(builder, notificationId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(notificationId), 0)

def AddNotificationId(builder, notificationId):
    NotificationMetricsAddNotificationId(builder, notificationId)

def NotificationMetricsAddType(builder, type):
    builder.PrependInt32Slot(1, type, 0)

def AddType(builder, type):
    NotificationMetricsAddType(builder, type)

def NotificationMetricsAddDelivered(builder, delivered):
    builder.PrependBoolSlot(2, delivered, 0)

def AddDelivered(builder, delivered):
    NotificationMetricsAddDelivered(builder, delivered)

def NotificationMetricsAddOpened(builder, opened):
    builder.PrependBoolSlot(3, opened, 0)

def AddOpened(builder, opened):
    NotificationMetricsAddOpened(builder, opened)

def NotificationMetricsAddClicked(builder, clicked):
    builder.PrependBoolSlot(4, clicked, 0)

def AddClicked(builder, clicked):
    NotificationMetricsAddClicked(builder, clicked)

def NotificationMetricsAddDeliveredAt(builder, deliveredAt):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(deliveredAt), 0)

def AddDeliveredAt(builder, deliveredAt):
    NotificationMetricsAddDeliveredAt(builder, deliveredAt)

def NotificationMetricsAddOpenedAt(builder, openedAt):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(openedAt), 0)

def AddOpenedAt(builder, openedAt):
    NotificationMetricsAddOpenedAt(builder, openedAt)

def NotificationMetricsAddClickedAt(builder, clickedAt):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(clickedAt), 0)

def AddClickedAt(builder, clickedAt):
    NotificationMetricsAddClickedAt(builder, clickedAt)

def NotificationMetricsEnd(builder):
    return builder.EndObject()

def End(builder):
    return NotificationMetricsEnd(builder)
