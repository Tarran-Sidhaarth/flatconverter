# DO NOT EDIT!
# python generated by Buffman ðŸ’ª
# Versions:
# 		Buffman: 1.0.0
# 		Flatc: v25.2.10

# namespace: services

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class GetUserNotificationsResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = GetUserNotificationsResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsGetUserNotificationsResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # GetUserNotificationsResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # GetUserNotificationsResponse
    def Notifications(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from services.Notification import Notification
            obj = Notification()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # GetUserNotificationsResponse
    def NotificationsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # GetUserNotificationsResponse
    def NotificationsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # GetUserNotificationsResponse
    def TotalCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # GetUserNotificationsResponse
    def UserInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from services.User import User
            obj = User()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def GetUserNotificationsResponseStart(builder):
    builder.StartObject(3)

def Start(builder):
    GetUserNotificationsResponseStart(builder)

def GetUserNotificationsResponseAddNotifications(builder, notifications):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(notifications), 0)

def AddNotifications(builder, notifications):
    GetUserNotificationsResponseAddNotifications(builder, notifications)

def GetUserNotificationsResponseStartNotificationsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartNotificationsVector(builder, numElems):
    return GetUserNotificationsResponseStartNotificationsVector(builder, numElems)

def GetUserNotificationsResponseAddTotalCount(builder, totalCount):
    builder.PrependInt32Slot(1, totalCount, 0)

def AddTotalCount(builder, totalCount):
    GetUserNotificationsResponseAddTotalCount(builder, totalCount)

def GetUserNotificationsResponseAddUserInfo(builder, userInfo):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(userInfo), 0)

def AddUserInfo(builder, userInfo):
    GetUserNotificationsResponseAddUserInfo(builder, userInfo)

def GetUserNotificationsResponseEnd(builder):
    return builder.EndObject()

def End(builder):
    return GetUserNotificationsResponseEnd(builder)
