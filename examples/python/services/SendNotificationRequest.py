# DO NOT EDIT!
# Python generated by Buffman ðŸ’ª
# Versions:
#		Buffman: 1.0.0
#		Flatc: v25.2.10

# namespace: services

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class SendNotificationRequest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SendNotificationRequest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsSendNotificationRequest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # SendNotificationRequest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SendNotificationRequest
    def RecipientUserId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SendNotificationRequest
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SendNotificationRequest
    def Title(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SendNotificationRequest
    def Content(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SendNotificationRequest
    def Priority(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SendNotificationRequest
    def Metadata(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from services.SendNotificationRequest_.MetadataEntry import MetadataEntry
            obj = MetadataEntry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # SendNotificationRequest
    def MetadataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # SendNotificationRequest
    def MetadataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def SendNotificationRequestStart(builder):
    builder.StartObject(6)

def Start(builder):
    SendNotificationRequestStart(builder)

def SendNotificationRequestAddRecipientUserId(builder, recipientUserId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(recipientUserId), 0)

def AddRecipientUserId(builder, recipientUserId):
    SendNotificationRequestAddRecipientUserId(builder, recipientUserId)

def SendNotificationRequestAddType(builder, type):
    builder.PrependInt32Slot(1, type, 0)

def AddType(builder, type):
    SendNotificationRequestAddType(builder, type)

def SendNotificationRequestAddTitle(builder, title):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(title), 0)

def AddTitle(builder, title):
    SendNotificationRequestAddTitle(builder, title)

def SendNotificationRequestAddContent(builder, content):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(content), 0)

def AddContent(builder, content):
    SendNotificationRequestAddContent(builder, content)

def SendNotificationRequestAddPriority(builder, priority):
    builder.PrependInt32Slot(4, priority, 0)

def AddPriority(builder, priority):
    SendNotificationRequestAddPriority(builder, priority)

def SendNotificationRequestAddMetadata(builder, metadata):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(metadata), 0)

def AddMetadata(builder, metadata):
    SendNotificationRequestAddMetadata(builder, metadata)

def SendNotificationRequestStartMetadataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartMetadataVector(builder, numElems):
    return SendNotificationRequestStartMetadataVector(builder, numElems)

def SendNotificationRequestEnd(builder):
    return builder.EndObject()

def End(builder):
    return SendNotificationRequestEnd(builder)
