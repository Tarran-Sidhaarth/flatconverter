# DO NOT EDIT!
# python generated by Buffman ðŸ’ª
# Versions:
# 		Buffman: 1.0.0
# 		Flatc: v25.2.10

# namespace: services

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class UserActivity(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UserActivity()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUserActivity(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # UserActivity
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UserActivity
    def ActivityId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UserActivity
    def UserId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UserActivity
    def Action(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UserActivity
    def Resource(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # UserActivity
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from common.Timestamp import Timestamp
            obj = Timestamp()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # UserActivity
    def Properties(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from services.UserActivity_.PropertiesEntry import PropertiesEntry
            obj = PropertiesEntry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # UserActivity
    def PropertiesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # UserActivity
    def PropertiesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # UserActivity
    def SessionId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def UserActivityStart(builder):
    builder.StartObject(7)

def Start(builder):
    UserActivityStart(builder)

def UserActivityAddActivityId(builder, activityId):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(activityId), 0)

def AddActivityId(builder, activityId):
    UserActivityAddActivityId(builder, activityId)

def UserActivityAddUserId(builder, userId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(userId), 0)

def AddUserId(builder, userId):
    UserActivityAddUserId(builder, userId)

def UserActivityAddAction(builder, action):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(action), 0)

def AddAction(builder, action):
    UserActivityAddAction(builder, action)

def UserActivityAddResource(builder, resource):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(resource), 0)

def AddResource(builder, resource):
    UserActivityAddResource(builder, resource)

def UserActivityAddTimestamp(builder, timestamp):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(timestamp), 0)

def AddTimestamp(builder, timestamp):
    UserActivityAddTimestamp(builder, timestamp)

def UserActivityAddProperties(builder, properties):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(properties), 0)

def AddProperties(builder, properties):
    UserActivityAddProperties(builder, properties)

def UserActivityStartPropertiesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartPropertiesVector(builder, numElems):
    return UserActivityStartPropertiesVector(builder, numElems)

def UserActivityAddSessionId(builder, sessionId):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(sessionId), 0)

def AddSessionId(builder, sessionId):
    UserActivityAddSessionId(builder, sessionId)

def UserActivityEnd(builder):
    return builder.EndObject()

def End(builder):
    return UserActivityEnd(builder)
