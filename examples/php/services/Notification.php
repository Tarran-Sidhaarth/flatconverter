// DO NOT EDIT!
// php generated by Buffman ğŸ’ª
// Versions:
// 		Buffman: 1.0.0
// 		Flatc: v25.2.10
// automatically generated by the FlatBuffers compiler, do not modify

namespace services;

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

class Notification extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return Notification
     */
    public static function getRootAsNotification(ByteBuffer $bb)
    {
        $obj = new Notification();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return Notification
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    public function getNotificationId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    public function getRecipientUserId()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @return int
     */
    public function getType()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : \services\NotificationType::NOTIFICATION_TYPE_UNKNOWN;
    }

    public function getTitle()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    public function getContent()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @return int
     */
    public function getPriority()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : \services\Priority::PRIORITY_LOW;
    }

    /**
     * @return int
     */
    public function getStatus()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : \common\Status::STATUS_UNKNOWN;
    }

    public function getCreatedAt()
    {
        $obj = new Timestamp();
        $o = $this->__offset(18);
        return $o != 0 ? $obj->init($this->__indirect($o + $this->bb_pos), $this->bb) : 0;
    }

    public function getSentAt()
    {
        $obj = new Timestamp();
        $o = $this->__offset(20);
        return $o != 0 ? $obj->init($this->__indirect($o + $this->bb_pos), $this->bb) : 0;
    }

    /**
     * @returnVectorOffset
     */
    public function getMetadata($j)
    {
        $o = $this->__offset(22);
        $obj = new MetadataEntry();
        return $o != 0 ? $obj->init($this->__indirect($this->__vector($o) + $j * 4), $this->bb) : null;
    }

    /**
     * @return int
     */
    public function getMetadataLength()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startNotification(FlatBufferBuilder $builder)
    {
        $builder->StartObject(10);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return Notification
     */
    public static function createNotification(FlatBufferBuilder $builder, $notification_id, $recipient_user_id, $type, $title, $content, $priority, $status, $created_at, $sent_at, $metadata)
    {
        $builder->startObject(10);
        self::addNotificationId($builder, $notification_id);
        self::addRecipientUserId($builder, $recipient_user_id);
        self::addType($builder, $type);
        self::addTitle($builder, $title);
        self::addContent($builder, $content);
        self::addPriority($builder, $priority);
        self::addStatus($builder, $status);
        self::addCreatedAt($builder, $created_at);
        self::addSentAt($builder, $sent_at);
        self::addMetadata($builder, $metadata);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addNotificationId(FlatBufferBuilder $builder, $notificationId)
    {
        $builder->addOffsetX(0, $notificationId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addRecipientUserId(FlatBufferBuilder $builder, $recipientUserId)
    {
        $builder->addOffsetX(1, $recipientUserId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addType(FlatBufferBuilder $builder, $type)
    {
        $builder->addIntX(2, $type, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addTitle(FlatBufferBuilder $builder, $title)
    {
        $builder->addOffsetX(3, $title, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addContent(FlatBufferBuilder $builder, $content)
    {
        $builder->addOffsetX(4, $content, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addPriority(FlatBufferBuilder $builder, $priority)
    {
        $builder->addIntX(5, $priority, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addStatus(FlatBufferBuilder $builder, $status)
    {
        $builder->addIntX(6, $status, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addCreatedAt(FlatBufferBuilder $builder, $createdAt)
    {
        $builder->addOffsetX(7, $createdAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addSentAt(FlatBufferBuilder $builder, $sentAt)
    {
        $builder->addOffsetX(8, $sentAt, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addMetadata(FlatBufferBuilder $builder, $metadata)
    {
        $builder->addOffsetX(9, $metadata, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createMetadataVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startMetadataVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endNotification(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
