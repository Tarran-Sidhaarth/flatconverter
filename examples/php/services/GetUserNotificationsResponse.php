// DO NOT EDIT!
// Php generated by Buffman ğŸ’ª
// Versions:
//		Buffman: 1.0.0
//		Flatc: v25.2.10
// automatically generated by the FlatBuffers compiler, do not modify

namespace services;

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

class GetUserNotificationsResponse extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return GetUserNotificationsResponse
     */
    public static function getRootAsGetUserNotificationsResponse(ByteBuffer $bb)
    {
        $obj = new GetUserNotificationsResponse();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return GetUserNotificationsResponse
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /**
     * @returnVectorOffset
     */
    public function getNotifications($j)
    {
        $o = $this->__offset(4);
        $obj = new Notification();
        return $o != 0 ? $obj->init($this->__indirect($this->__vector($o) + $j * 4), $this->bb) : null;
    }

    /**
     * @return int
     */
    public function getNotificationsLength()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    /**
     * @return int
     */
    public function getTotalCount()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    public function getUserInfo()
    {
        $obj = new User();
        $o = $this->__offset(8);
        return $o != 0 ? $obj->init($this->__indirect($o + $this->bb_pos), $this->bb) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startGetUserNotificationsResponse(FlatBufferBuilder $builder)
    {
        $builder->StartObject(3);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return GetUserNotificationsResponse
     */
    public static function createGetUserNotificationsResponse(FlatBufferBuilder $builder, $notifications, $total_count, $user_info)
    {
        $builder->startObject(3);
        self::addNotifications($builder, $notifications);
        self::addTotalCount($builder, $total_count);
        self::addUserInfo($builder, $user_info);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addNotifications(FlatBufferBuilder $builder, $notifications)
    {
        $builder->addOffsetX(0, $notifications, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createNotificationsVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startNotificationsVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addTotalCount(FlatBufferBuilder $builder, $totalCount)
    {
        $builder->addIntX(1, $totalCount, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addUserInfo(FlatBufferBuilder $builder, $userInfo)
    {
        $builder->addOffsetX(2, $userInfo, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endGetUserNotificationsResponse(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
