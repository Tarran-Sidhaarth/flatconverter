// DO NOT EDIT!
// Php generated by Buffman ğŸ’ª
// Versions:
//		Buffman: 1.0.0
//		Flatc: v25.2.10
// automatically generated by the FlatBuffers compiler, do not modify

namespace services;

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

class UserActivity extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return UserActivity
     */
    public static function getRootAsUserActivity(ByteBuffer $bb)
    {
        $obj = new UserActivity();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return UserActivity
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    public function getActivityId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    public function getUserId()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    public function getAction()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    public function getResource()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    public function getTimestamp()
    {
        $obj = new Timestamp();
        $o = $this->__offset(12);
        return $o != 0 ? $obj->init($this->__indirect($o + $this->bb_pos), $this->bb) : 0;
    }

    /**
     * @returnVectorOffset
     */
    public function getProperties($j)
    {
        $o = $this->__offset(14);
        $obj = new PropertiesEntry();
        return $o != 0 ? $obj->init($this->__indirect($this->__vector($o) + $j * 4), $this->bb) : null;
    }

    /**
     * @return int
     */
    public function getPropertiesLength()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->__vector_len($o) : 0;
    }

    public function getSessionId()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startUserActivity(FlatBufferBuilder $builder)
    {
        $builder->StartObject(7);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return UserActivity
     */
    public static function createUserActivity(FlatBufferBuilder $builder, $activity_id, $user_id, $action, $resource, $timestamp, $properties, $session_id)
    {
        $builder->startObject(7);
        self::addActivityId($builder, $activity_id);
        self::addUserId($builder, $user_id);
        self::addAction($builder, $action);
        self::addResource($builder, $resource);
        self::addTimestamp($builder, $timestamp);
        self::addProperties($builder, $properties);
        self::addSessionId($builder, $session_id);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addActivityId(FlatBufferBuilder $builder, $activityId)
    {
        $builder->addOffsetX(0, $activityId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addUserId(FlatBufferBuilder $builder, $userId)
    {
        $builder->addOffsetX(1, $userId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addAction(FlatBufferBuilder $builder, $action)
    {
        $builder->addOffsetX(2, $action, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addResource(FlatBufferBuilder $builder, $resource)
    {
        $builder->addOffsetX(3, $resource, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addTimestamp(FlatBufferBuilder $builder, $timestamp)
    {
        $builder->addOffsetX(4, $timestamp, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param VectorOffset
     * @return void
     */
    public static function addProperties(FlatBufferBuilder $builder, $properties)
    {
        $builder->addOffsetX(5, $properties, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param array offset array
     * @return int vector offset
     */
    public static function createPropertiesVector(FlatBufferBuilder $builder, array $data)
    {
        $builder->startVector(4, count($data), 4);
        for ($i = count($data) - 1; $i >= 0; $i--) {
            $builder->putOffset($data[$i]);
        }
        return $builder->endVector();
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int $numElems
     * @return void
     */
    public static function startPropertiesVector(FlatBufferBuilder $builder, $numElems)
    {
        $builder->startVector(4, $numElems, 4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addSessionId(FlatBufferBuilder $builder, $sessionId)
    {
        $builder->addOffsetX(6, $sessionId, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endUserActivity(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
