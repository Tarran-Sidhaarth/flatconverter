// DO NOT EDIT!
// Php generated by Buffman ğŸ’ª
// Versions:
//		Buffman: 0.0.1
//		Flatc: v25.2.10
// automatically generated by the FlatBuffers compiler, do not modify

namespace common;

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

class Address extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return Address
     */
    public static function getRootAsAddress(ByteBuffer $bb)
    {
        $obj = new Address();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return Address
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    public function getStreet()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    public function getCity()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    public function getState()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    public function getPostalCode()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    public function getCountry()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->__string($o + $this->bb_pos) : null;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startAddress(FlatBufferBuilder $builder)
    {
        $builder->StartObject(5);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return Address
     */
    public static function createAddress(FlatBufferBuilder $builder, $street, $city, $state, $postal_code, $country)
    {
        $builder->startObject(5);
        self::addStreet($builder, $street);
        self::addCity($builder, $city);
        self::addState($builder, $state);
        self::addPostalCode($builder, $postal_code);
        self::addCountry($builder, $country);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addStreet(FlatBufferBuilder $builder, $street)
    {
        $builder->addOffsetX(0, $street, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCity(FlatBufferBuilder $builder, $city)
    {
        $builder->addOffsetX(1, $city, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addState(FlatBufferBuilder $builder, $state)
    {
        $builder->addOffsetX(2, $state, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addPostalCode(FlatBufferBuilder $builder, $postalCode)
    {
        $builder->addOffsetX(3, $postalCode, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param StringOffset
     * @return void
     */
    public static function addCountry(FlatBufferBuilder $builder, $country)
    {
        $builder->addOffsetX(4, $country, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endAddress(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
