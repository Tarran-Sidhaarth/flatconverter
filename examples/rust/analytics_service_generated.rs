// DO NOT EDIT!
// rust generated by Buffman ðŸ’ª
// Versions:
// 		Buffman: 1.0.0
// 		Flatc: v25.2.10


// @generated

use crate::status_generated::*;
use crate::notification_service_generated::*;
use crate::user_service_generated::*;
use crate::timestamp_generated::*;
use crate::address_generated::*;
use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod services {

  use crate::status_generated::*;
  use crate::notification_service_generated::*;
  use crate::user_service_generated::*;
  use crate::timestamp_generated::*;
  use crate::address_generated::*;
  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum UserActivityOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct UserActivity<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for UserActivity<'a> {
  type Inner = UserActivity<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> UserActivity<'a> {
  pub const VT_ACTIVITY_ID: flatbuffers::VOffsetT = 4;
  pub const VT_USER_ID: flatbuffers::VOffsetT = 6;
  pub const VT_ACTION: flatbuffers::VOffsetT = 8;
  pub const VT_RESOURCE: flatbuffers::VOffsetT = 10;
  pub const VT_TIMESTAMP: flatbuffers::VOffsetT = 12;
  pub const VT_PROPERTIES: flatbuffers::VOffsetT = 14;
  pub const VT_SESSION_ID: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    UserActivity { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args UserActivityArgs<'args>
  ) -> flatbuffers::WIPOffset<UserActivity<'bldr>> {
    let mut builder = UserActivityBuilder::new(_fbb);
    if let Some(x) = args.session_id { builder.add_session_id(x); }
    if let Some(x) = args.properties { builder.add_properties(x); }
    if let Some(x) = args.timestamp { builder.add_timestamp(x); }
    if let Some(x) = args.resource { builder.add_resource(x); }
    if let Some(x) = args.action { builder.add_action(x); }
    if let Some(x) = args.user_id { builder.add_user_id(x); }
    if let Some(x) = args.activity_id { builder.add_activity_id(x); }
    builder.finish()
  }


  #[inline]
  pub fn activity_id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(UserActivity::VT_ACTIVITY_ID, None)}
  }
  #[inline]
  pub fn user_id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(UserActivity::VT_USER_ID, None)}
  }
  #[inline]
  pub fn action(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(UserActivity::VT_ACTION, None)}
  }
  #[inline]
  pub fn resource(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(UserActivity::VT_RESOURCE, None)}
  }
  #[inline]
  pub fn timestamp(&self) -> Option<super::common::Timestamp<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::common::Timestamp>>(UserActivity::VT_TIMESTAMP, None)}
  }
  #[inline]
  pub fn properties(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<user_activity_::PropertiesEntry<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<user_activity_::PropertiesEntry>>>>(UserActivity::VT_PROPERTIES, None)}
  }
  #[inline]
  pub fn session_id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(UserActivity::VT_SESSION_ID, None)}
  }
}

impl flatbuffers::Verifiable for UserActivity<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("activity_id", Self::VT_ACTIVITY_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("user_id", Self::VT_USER_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("action", Self::VT_ACTION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("resource", Self::VT_RESOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::common::Timestamp>>("timestamp", Self::VT_TIMESTAMP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<user_activity_::PropertiesEntry>>>>("properties", Self::VT_PROPERTIES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("session_id", Self::VT_SESSION_ID, false)?
     .finish();
    Ok(())
  }
}
pub struct UserActivityArgs<'a> {
    pub activity_id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub user_id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub action: Option<flatbuffers::WIPOffset<&'a str>>,
    pub resource: Option<flatbuffers::WIPOffset<&'a str>>,
    pub timestamp: Option<flatbuffers::WIPOffset<super::common::Timestamp<'a>>>,
    pub properties: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<user_activity_::PropertiesEntry<'a>>>>>,
    pub session_id: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for UserActivityArgs<'a> {
  #[inline]
  fn default() -> Self {
    UserActivityArgs {
      activity_id: None,
      user_id: None,
      action: None,
      resource: None,
      timestamp: None,
      properties: None,
      session_id: None,
    }
  }
}

pub struct UserActivityBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> UserActivityBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_activity_id(&mut self, activity_id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(UserActivity::VT_ACTIVITY_ID, activity_id);
  }
  #[inline]
  pub fn add_user_id(&mut self, user_id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(UserActivity::VT_USER_ID, user_id);
  }
  #[inline]
  pub fn add_action(&mut self, action: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(UserActivity::VT_ACTION, action);
  }
  #[inline]
  pub fn add_resource(&mut self, resource: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(UserActivity::VT_RESOURCE, resource);
  }
  #[inline]
  pub fn add_timestamp(&mut self, timestamp: flatbuffers::WIPOffset<super::common::Timestamp<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::common::Timestamp>>(UserActivity::VT_TIMESTAMP, timestamp);
  }
  #[inline]
  pub fn add_properties(&mut self, properties: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<user_activity_::PropertiesEntry<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(UserActivity::VT_PROPERTIES, properties);
  }
  #[inline]
  pub fn add_session_id(&mut self, session_id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(UserActivity::VT_SESSION_ID, session_id);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> UserActivityBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    UserActivityBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<UserActivity<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for UserActivity<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("UserActivity");
      ds.field("activity_id", &self.activity_id());
      ds.field("user_id", &self.user_id());
      ds.field("action", &self.action());
      ds.field("resource", &self.resource());
      ds.field("timestamp", &self.timestamp());
      ds.field("properties", &self.properties());
      ds.field("session_id", &self.session_id());
      ds.finish()
  }
}
pub enum NotificationMetricsOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct NotificationMetrics<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for NotificationMetrics<'a> {
  type Inner = NotificationMetrics<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> NotificationMetrics<'a> {
  pub const VT_NOTIFICATION_ID: flatbuffers::VOffsetT = 4;
  pub const VT_TYPE_: flatbuffers::VOffsetT = 6;
  pub const VT_DELIVERED: flatbuffers::VOffsetT = 8;
  pub const VT_OPENED: flatbuffers::VOffsetT = 10;
  pub const VT_CLICKED: flatbuffers::VOffsetT = 12;
  pub const VT_DELIVERED_AT: flatbuffers::VOffsetT = 14;
  pub const VT_OPENED_AT: flatbuffers::VOffsetT = 16;
  pub const VT_CLICKED_AT: flatbuffers::VOffsetT = 18;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    NotificationMetrics { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args NotificationMetricsArgs<'args>
  ) -> flatbuffers::WIPOffset<NotificationMetrics<'bldr>> {
    let mut builder = NotificationMetricsBuilder::new(_fbb);
    if let Some(x) = args.clicked_at { builder.add_clicked_at(x); }
    if let Some(x) = args.opened_at { builder.add_opened_at(x); }
    if let Some(x) = args.delivered_at { builder.add_delivered_at(x); }
    builder.add_type_(args.type_);
    if let Some(x) = args.notification_id { builder.add_notification_id(x); }
    builder.add_clicked(args.clicked);
    builder.add_opened(args.opened);
    builder.add_delivered(args.delivered);
    builder.finish()
  }


  #[inline]
  pub fn notification_id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NotificationMetrics::VT_NOTIFICATION_ID, None)}
  }
  #[inline]
  pub fn type_(&self) -> NotificationType {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<NotificationType>(NotificationMetrics::VT_TYPE_, Some(NotificationType::NOTIFICATION_TYPE_UNKNOWN)).unwrap()}
  }
  #[inline]
  pub fn delivered(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(NotificationMetrics::VT_DELIVERED, Some(false)).unwrap()}
  }
  #[inline]
  pub fn opened(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(NotificationMetrics::VT_OPENED, Some(false)).unwrap()}
  }
  #[inline]
  pub fn clicked(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(NotificationMetrics::VT_CLICKED, Some(false)).unwrap()}
  }
  #[inline]
  pub fn delivered_at(&self) -> Option<super::common::Timestamp<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::common::Timestamp>>(NotificationMetrics::VT_DELIVERED_AT, None)}
  }
  #[inline]
  pub fn opened_at(&self) -> Option<super::common::Timestamp<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::common::Timestamp>>(NotificationMetrics::VT_OPENED_AT, None)}
  }
  #[inline]
  pub fn clicked_at(&self) -> Option<super::common::Timestamp<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::common::Timestamp>>(NotificationMetrics::VT_CLICKED_AT, None)}
  }
}

impl flatbuffers::Verifiable for NotificationMetrics<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("notification_id", Self::VT_NOTIFICATION_ID, false)?
     .visit_field::<NotificationType>("type_", Self::VT_TYPE_, false)?
     .visit_field::<bool>("delivered", Self::VT_DELIVERED, false)?
     .visit_field::<bool>("opened", Self::VT_OPENED, false)?
     .visit_field::<bool>("clicked", Self::VT_CLICKED, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::common::Timestamp>>("delivered_at", Self::VT_DELIVERED_AT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::common::Timestamp>>("opened_at", Self::VT_OPENED_AT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::common::Timestamp>>("clicked_at", Self::VT_CLICKED_AT, false)?
     .finish();
    Ok(())
  }
}
pub struct NotificationMetricsArgs<'a> {
    pub notification_id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub type_: NotificationType,
    pub delivered: bool,
    pub opened: bool,
    pub clicked: bool,
    pub delivered_at: Option<flatbuffers::WIPOffset<super::common::Timestamp<'a>>>,
    pub opened_at: Option<flatbuffers::WIPOffset<super::common::Timestamp<'a>>>,
    pub clicked_at: Option<flatbuffers::WIPOffset<super::common::Timestamp<'a>>>,
}
impl<'a> Default for NotificationMetricsArgs<'a> {
  #[inline]
  fn default() -> Self {
    NotificationMetricsArgs {
      notification_id: None,
      type_: NotificationType::NOTIFICATION_TYPE_UNKNOWN,
      delivered: false,
      opened: false,
      clicked: false,
      delivered_at: None,
      opened_at: None,
      clicked_at: None,
    }
  }
}

pub struct NotificationMetricsBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> NotificationMetricsBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_notification_id(&mut self, notification_id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NotificationMetrics::VT_NOTIFICATION_ID, notification_id);
  }
  #[inline]
  pub fn add_type_(&mut self, type_: NotificationType) {
    self.fbb_.push_slot::<NotificationType>(NotificationMetrics::VT_TYPE_, type_, NotificationType::NOTIFICATION_TYPE_UNKNOWN);
  }
  #[inline]
  pub fn add_delivered(&mut self, delivered: bool) {
    self.fbb_.push_slot::<bool>(NotificationMetrics::VT_DELIVERED, delivered, false);
  }
  #[inline]
  pub fn add_opened(&mut self, opened: bool) {
    self.fbb_.push_slot::<bool>(NotificationMetrics::VT_OPENED, opened, false);
  }
  #[inline]
  pub fn add_clicked(&mut self, clicked: bool) {
    self.fbb_.push_slot::<bool>(NotificationMetrics::VT_CLICKED, clicked, false);
  }
  #[inline]
  pub fn add_delivered_at(&mut self, delivered_at: flatbuffers::WIPOffset<super::common::Timestamp<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::common::Timestamp>>(NotificationMetrics::VT_DELIVERED_AT, delivered_at);
  }
  #[inline]
  pub fn add_opened_at(&mut self, opened_at: flatbuffers::WIPOffset<super::common::Timestamp<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::common::Timestamp>>(NotificationMetrics::VT_OPENED_AT, opened_at);
  }
  #[inline]
  pub fn add_clicked_at(&mut self, clicked_at: flatbuffers::WIPOffset<super::common::Timestamp<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::common::Timestamp>>(NotificationMetrics::VT_CLICKED_AT, clicked_at);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> NotificationMetricsBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    NotificationMetricsBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<NotificationMetrics<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for NotificationMetrics<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("NotificationMetrics");
      ds.field("notification_id", &self.notification_id());
      ds.field("type_", &self.type_());
      ds.field("delivered", &self.delivered());
      ds.field("opened", &self.opened());
      ds.field("clicked", &self.clicked());
      ds.field("delivered_at", &self.delivered_at());
      ds.field("opened_at", &self.opened_at());
      ds.field("clicked_at", &self.clicked_at());
      ds.finish()
  }
}
pub enum UserAnalyticsRequestOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct UserAnalyticsRequest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for UserAnalyticsRequest<'a> {
  type Inner = UserAnalyticsRequest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> UserAnalyticsRequest<'a> {
  pub const VT_USER_ID: flatbuffers::VOffsetT = 4;
  pub const VT_START_DATE: flatbuffers::VOffsetT = 6;
  pub const VT_END_DATE: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    UserAnalyticsRequest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args UserAnalyticsRequestArgs<'args>
  ) -> flatbuffers::WIPOffset<UserAnalyticsRequest<'bldr>> {
    let mut builder = UserAnalyticsRequestBuilder::new(_fbb);
    if let Some(x) = args.end_date { builder.add_end_date(x); }
    if let Some(x) = args.start_date { builder.add_start_date(x); }
    if let Some(x) = args.user_id { builder.add_user_id(x); }
    builder.finish()
  }


  #[inline]
  pub fn user_id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(UserAnalyticsRequest::VT_USER_ID, None)}
  }
  #[inline]
  pub fn start_date(&self) -> Option<super::common::Timestamp<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::common::Timestamp>>(UserAnalyticsRequest::VT_START_DATE, None)}
  }
  #[inline]
  pub fn end_date(&self) -> Option<super::common::Timestamp<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::common::Timestamp>>(UserAnalyticsRequest::VT_END_DATE, None)}
  }
}

impl flatbuffers::Verifiable for UserAnalyticsRequest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("user_id", Self::VT_USER_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::common::Timestamp>>("start_date", Self::VT_START_DATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::common::Timestamp>>("end_date", Self::VT_END_DATE, false)?
     .finish();
    Ok(())
  }
}
pub struct UserAnalyticsRequestArgs<'a> {
    pub user_id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub start_date: Option<flatbuffers::WIPOffset<super::common::Timestamp<'a>>>,
    pub end_date: Option<flatbuffers::WIPOffset<super::common::Timestamp<'a>>>,
}
impl<'a> Default for UserAnalyticsRequestArgs<'a> {
  #[inline]
  fn default() -> Self {
    UserAnalyticsRequestArgs {
      user_id: None,
      start_date: None,
      end_date: None,
    }
  }
}

pub struct UserAnalyticsRequestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> UserAnalyticsRequestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_user_id(&mut self, user_id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(UserAnalyticsRequest::VT_USER_ID, user_id);
  }
  #[inline]
  pub fn add_start_date(&mut self, start_date: flatbuffers::WIPOffset<super::common::Timestamp<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::common::Timestamp>>(UserAnalyticsRequest::VT_START_DATE, start_date);
  }
  #[inline]
  pub fn add_end_date(&mut self, end_date: flatbuffers::WIPOffset<super::common::Timestamp<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::common::Timestamp>>(UserAnalyticsRequest::VT_END_DATE, end_date);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> UserAnalyticsRequestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    UserAnalyticsRequestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<UserAnalyticsRequest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for UserAnalyticsRequest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("UserAnalyticsRequest");
      ds.field("user_id", &self.user_id());
      ds.field("start_date", &self.start_date());
      ds.field("end_date", &self.end_date());
      ds.finish()
  }
}
pub enum UserAnalyticsResponseOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct UserAnalyticsResponse<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for UserAnalyticsResponse<'a> {
  type Inner = UserAnalyticsResponse<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> UserAnalyticsResponse<'a> {
  pub const VT_USER: flatbuffers::VOffsetT = 4;
  pub const VT_ACTIVITIES: flatbuffers::VOffsetT = 6;
  pub const VT_NOTIFICATION_METRICS: flatbuffers::VOffsetT = 8;
  pub const VT_TOTAL_ACTIVITIES: flatbuffers::VOffsetT = 10;
  pub const VT_TOTAL_NOTIFICATIONS_SENT: flatbuffers::VOffsetT = 12;
  pub const VT_TOTAL_NOTIFICATIONS_OPENED: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    UserAnalyticsResponse { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args UserAnalyticsResponseArgs<'args>
  ) -> flatbuffers::WIPOffset<UserAnalyticsResponse<'bldr>> {
    let mut builder = UserAnalyticsResponseBuilder::new(_fbb);
    builder.add_total_notifications_opened(args.total_notifications_opened);
    builder.add_total_notifications_sent(args.total_notifications_sent);
    builder.add_total_activities(args.total_activities);
    if let Some(x) = args.notification_metrics { builder.add_notification_metrics(x); }
    if let Some(x) = args.activities { builder.add_activities(x); }
    if let Some(x) = args.user { builder.add_user(x); }
    builder.finish()
  }


  #[inline]
  pub fn user(&self) -> Option<User<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<User>>(UserAnalyticsResponse::VT_USER, None)}
  }
  #[inline]
  pub fn activities(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<UserActivity<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<UserActivity>>>>(UserAnalyticsResponse::VT_ACTIVITIES, None)}
  }
  #[inline]
  pub fn notification_metrics(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<NotificationMetrics<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<NotificationMetrics>>>>(UserAnalyticsResponse::VT_NOTIFICATION_METRICS, None)}
  }
  #[inline]
  pub fn total_activities(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(UserAnalyticsResponse::VT_TOTAL_ACTIVITIES, Some(0)).unwrap()}
  }
  #[inline]
  pub fn total_notifications_sent(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(UserAnalyticsResponse::VT_TOTAL_NOTIFICATIONS_SENT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn total_notifications_opened(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(UserAnalyticsResponse::VT_TOTAL_NOTIFICATIONS_OPENED, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for UserAnalyticsResponse<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<User>>("user", Self::VT_USER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<UserActivity>>>>("activities", Self::VT_ACTIVITIES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<NotificationMetrics>>>>("notification_metrics", Self::VT_NOTIFICATION_METRICS, false)?
     .visit_field::<i32>("total_activities", Self::VT_TOTAL_ACTIVITIES, false)?
     .visit_field::<i32>("total_notifications_sent", Self::VT_TOTAL_NOTIFICATIONS_SENT, false)?
     .visit_field::<i32>("total_notifications_opened", Self::VT_TOTAL_NOTIFICATIONS_OPENED, false)?
     .finish();
    Ok(())
  }
}
pub struct UserAnalyticsResponseArgs<'a> {
    pub user: Option<flatbuffers::WIPOffset<User<'a>>>,
    pub activities: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<UserActivity<'a>>>>>,
    pub notification_metrics: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<NotificationMetrics<'a>>>>>,
    pub total_activities: i32,
    pub total_notifications_sent: i32,
    pub total_notifications_opened: i32,
}
impl<'a> Default for UserAnalyticsResponseArgs<'a> {
  #[inline]
  fn default() -> Self {
    UserAnalyticsResponseArgs {
      user: None,
      activities: None,
      notification_metrics: None,
      total_activities: 0,
      total_notifications_sent: 0,
      total_notifications_opened: 0,
    }
  }
}

pub struct UserAnalyticsResponseBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> UserAnalyticsResponseBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_user(&mut self, user: flatbuffers::WIPOffset<User<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<User>>(UserAnalyticsResponse::VT_USER, user);
  }
  #[inline]
  pub fn add_activities(&mut self, activities: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<UserActivity<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(UserAnalyticsResponse::VT_ACTIVITIES, activities);
  }
  #[inline]
  pub fn add_notification_metrics(&mut self, notification_metrics: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<NotificationMetrics<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(UserAnalyticsResponse::VT_NOTIFICATION_METRICS, notification_metrics);
  }
  #[inline]
  pub fn add_total_activities(&mut self, total_activities: i32) {
    self.fbb_.push_slot::<i32>(UserAnalyticsResponse::VT_TOTAL_ACTIVITIES, total_activities, 0);
  }
  #[inline]
  pub fn add_total_notifications_sent(&mut self, total_notifications_sent: i32) {
    self.fbb_.push_slot::<i32>(UserAnalyticsResponse::VT_TOTAL_NOTIFICATIONS_SENT, total_notifications_sent, 0);
  }
  #[inline]
  pub fn add_total_notifications_opened(&mut self, total_notifications_opened: i32) {
    self.fbb_.push_slot::<i32>(UserAnalyticsResponse::VT_TOTAL_NOTIFICATIONS_OPENED, total_notifications_opened, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> UserAnalyticsResponseBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    UserAnalyticsResponseBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<UserAnalyticsResponse<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for UserAnalyticsResponse<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("UserAnalyticsResponse");
      ds.field("user", &self.user());
      ds.field("activities", &self.activities());
      ds.field("notification_metrics", &self.notification_metrics());
      ds.field("total_activities", &self.total_activities());
      ds.field("total_notifications_sent", &self.total_notifications_sent());
      ds.field("total_notifications_opened", &self.total_notifications_opened());
      ds.finish()
  }
}
pub enum SystemMetricsRequestOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct SystemMetricsRequest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SystemMetricsRequest<'a> {
  type Inner = SystemMetricsRequest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> SystemMetricsRequest<'a> {
  pub const VT_START_DATE: flatbuffers::VOffsetT = 4;
  pub const VT_END_DATE: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    SystemMetricsRequest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args SystemMetricsRequestArgs<'args>
  ) -> flatbuffers::WIPOffset<SystemMetricsRequest<'bldr>> {
    let mut builder = SystemMetricsRequestBuilder::new(_fbb);
    if let Some(x) = args.end_date { builder.add_end_date(x); }
    if let Some(x) = args.start_date { builder.add_start_date(x); }
    builder.finish()
  }


  #[inline]
  pub fn start_date(&self) -> Option<super::common::Timestamp<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::common::Timestamp>>(SystemMetricsRequest::VT_START_DATE, None)}
  }
  #[inline]
  pub fn end_date(&self) -> Option<super::common::Timestamp<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::common::Timestamp>>(SystemMetricsRequest::VT_END_DATE, None)}
  }
}

impl flatbuffers::Verifiable for SystemMetricsRequest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::common::Timestamp>>("start_date", Self::VT_START_DATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::common::Timestamp>>("end_date", Self::VT_END_DATE, false)?
     .finish();
    Ok(())
  }
}
pub struct SystemMetricsRequestArgs<'a> {
    pub start_date: Option<flatbuffers::WIPOffset<super::common::Timestamp<'a>>>,
    pub end_date: Option<flatbuffers::WIPOffset<super::common::Timestamp<'a>>>,
}
impl<'a> Default for SystemMetricsRequestArgs<'a> {
  #[inline]
  fn default() -> Self {
    SystemMetricsRequestArgs {
      start_date: None,
      end_date: None,
    }
  }
}

pub struct SystemMetricsRequestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> SystemMetricsRequestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_start_date(&mut self, start_date: flatbuffers::WIPOffset<super::common::Timestamp<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::common::Timestamp>>(SystemMetricsRequest::VT_START_DATE, start_date);
  }
  #[inline]
  pub fn add_end_date(&mut self, end_date: flatbuffers::WIPOffset<super::common::Timestamp<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::common::Timestamp>>(SystemMetricsRequest::VT_END_DATE, end_date);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> SystemMetricsRequestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    SystemMetricsRequestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SystemMetricsRequest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for SystemMetricsRequest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("SystemMetricsRequest");
      ds.field("start_date", &self.start_date());
      ds.field("end_date", &self.end_date());
      ds.finish()
  }
}
pub enum SystemMetricsResponseOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct SystemMetricsResponse<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SystemMetricsResponse<'a> {
  type Inner = SystemMetricsResponse<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> SystemMetricsResponse<'a> {
  pub const VT_TOTAL_USERS: flatbuffers::VOffsetT = 4;
  pub const VT_ACTIVE_USERS: flatbuffers::VOffsetT = 6;
  pub const VT_TOTAL_NOTIFICATIONS_SENT: flatbuffers::VOffsetT = 8;
  pub const VT_NOTIFICATION_OPEN_RATE: flatbuffers::VOffsetT = 10;
  pub const VT_ACTIVITY_COUNTS: flatbuffers::VOffsetT = 12;
  pub const VT_GENERATED_AT: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    SystemMetricsResponse { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args SystemMetricsResponseArgs<'args>
  ) -> flatbuffers::WIPOffset<SystemMetricsResponse<'bldr>> {
    let mut builder = SystemMetricsResponseBuilder::new(_fbb);
    builder.add_notification_open_rate(args.notification_open_rate);
    if let Some(x) = args.generated_at { builder.add_generated_at(x); }
    if let Some(x) = args.activity_counts { builder.add_activity_counts(x); }
    builder.add_total_notifications_sent(args.total_notifications_sent);
    builder.add_active_users(args.active_users);
    builder.add_total_users(args.total_users);
    builder.finish()
  }


  #[inline]
  pub fn total_users(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(SystemMetricsResponse::VT_TOTAL_USERS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn active_users(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(SystemMetricsResponse::VT_ACTIVE_USERS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn total_notifications_sent(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(SystemMetricsResponse::VT_TOTAL_NOTIFICATIONS_SENT, Some(0)).unwrap()}
  }
  #[inline]
  pub fn notification_open_rate(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SystemMetricsResponse::VT_NOTIFICATION_OPEN_RATE, Some(0.0)).unwrap()}
  }
  #[inline]
  pub fn activity_counts(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<system_metrics_response_::ActivityCountsEntry<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<system_metrics_response_::ActivityCountsEntry>>>>(SystemMetricsResponse::VT_ACTIVITY_COUNTS, None)}
  }
  #[inline]
  pub fn generated_at(&self) -> Option<super::common::Timestamp<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<super::common::Timestamp>>(SystemMetricsResponse::VT_GENERATED_AT, None)}
  }
}

impl flatbuffers::Verifiable for SystemMetricsResponse<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>("total_users", Self::VT_TOTAL_USERS, false)?
     .visit_field::<i32>("active_users", Self::VT_ACTIVE_USERS, false)?
     .visit_field::<i32>("total_notifications_sent", Self::VT_TOTAL_NOTIFICATIONS_SENT, false)?
     .visit_field::<f64>("notification_open_rate", Self::VT_NOTIFICATION_OPEN_RATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<system_metrics_response_::ActivityCountsEntry>>>>("activity_counts", Self::VT_ACTIVITY_COUNTS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<super::common::Timestamp>>("generated_at", Self::VT_GENERATED_AT, false)?
     .finish();
    Ok(())
  }
}
pub struct SystemMetricsResponseArgs<'a> {
    pub total_users: i32,
    pub active_users: i32,
    pub total_notifications_sent: i32,
    pub notification_open_rate: f64,
    pub activity_counts: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<system_metrics_response_::ActivityCountsEntry<'a>>>>>,
    pub generated_at: Option<flatbuffers::WIPOffset<super::common::Timestamp<'a>>>,
}
impl<'a> Default for SystemMetricsResponseArgs<'a> {
  #[inline]
  fn default() -> Self {
    SystemMetricsResponseArgs {
      total_users: 0,
      active_users: 0,
      total_notifications_sent: 0,
      notification_open_rate: 0.0,
      activity_counts: None,
      generated_at: None,
    }
  }
}

pub struct SystemMetricsResponseBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> SystemMetricsResponseBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_total_users(&mut self, total_users: i32) {
    self.fbb_.push_slot::<i32>(SystemMetricsResponse::VT_TOTAL_USERS, total_users, 0);
  }
  #[inline]
  pub fn add_active_users(&mut self, active_users: i32) {
    self.fbb_.push_slot::<i32>(SystemMetricsResponse::VT_ACTIVE_USERS, active_users, 0);
  }
  #[inline]
  pub fn add_total_notifications_sent(&mut self, total_notifications_sent: i32) {
    self.fbb_.push_slot::<i32>(SystemMetricsResponse::VT_TOTAL_NOTIFICATIONS_SENT, total_notifications_sent, 0);
  }
  #[inline]
  pub fn add_notification_open_rate(&mut self, notification_open_rate: f64) {
    self.fbb_.push_slot::<f64>(SystemMetricsResponse::VT_NOTIFICATION_OPEN_RATE, notification_open_rate, 0.0);
  }
  #[inline]
  pub fn add_activity_counts(&mut self, activity_counts: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<system_metrics_response_::ActivityCountsEntry<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SystemMetricsResponse::VT_ACTIVITY_COUNTS, activity_counts);
  }
  #[inline]
  pub fn add_generated_at(&mut self, generated_at: flatbuffers::WIPOffset<super::common::Timestamp<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<super::common::Timestamp>>(SystemMetricsResponse::VT_GENERATED_AT, generated_at);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> SystemMetricsResponseBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    SystemMetricsResponseBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SystemMetricsResponse<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for SystemMetricsResponse<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("SystemMetricsResponse");
      ds.field("total_users", &self.total_users());
      ds.field("active_users", &self.active_users());
      ds.field("total_notifications_sent", &self.total_notifications_sent());
      ds.field("notification_open_rate", &self.notification_open_rate());
      ds.field("activity_counts", &self.activity_counts());
      ds.field("generated_at", &self.generated_at());
      ds.finish()
  }
}
pub enum TrackUserActivityResponseOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct TrackUserActivityResponse<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TrackUserActivityResponse<'a> {
  type Inner = TrackUserActivityResponse<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> TrackUserActivityResponse<'a> {
  pub const VT_SUCCESS: flatbuffers::VOffsetT = 4;
  pub const VT_MESSAGE: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    TrackUserActivityResponse { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args TrackUserActivityResponseArgs<'args>
  ) -> flatbuffers::WIPOffset<TrackUserActivityResponse<'bldr>> {
    let mut builder = TrackUserActivityResponseBuilder::new(_fbb);
    if let Some(x) = args.message { builder.add_message(x); }
    builder.add_success(args.success);
    builder.finish()
  }


  #[inline]
  pub fn success(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(TrackUserActivityResponse::VT_SUCCESS, Some(false)).unwrap()}
  }
  #[inline]
  pub fn message(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TrackUserActivityResponse::VT_MESSAGE, None)}
  }
}

impl flatbuffers::Verifiable for TrackUserActivityResponse<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<bool>("success", Self::VT_SUCCESS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("message", Self::VT_MESSAGE, false)?
     .finish();
    Ok(())
  }
}
pub struct TrackUserActivityResponseArgs<'a> {
    pub success: bool,
    pub message: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for TrackUserActivityResponseArgs<'a> {
  #[inline]
  fn default() -> Self {
    TrackUserActivityResponseArgs {
      success: false,
      message: None,
    }
  }
}

pub struct TrackUserActivityResponseBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> TrackUserActivityResponseBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_success(&mut self, success: bool) {
    self.fbb_.push_slot::<bool>(TrackUserActivityResponse::VT_SUCCESS, success, false);
  }
  #[inline]
  pub fn add_message(&mut self, message: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TrackUserActivityResponse::VT_MESSAGE, message);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> TrackUserActivityResponseBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    TrackUserActivityResponseBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TrackUserActivityResponse<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for TrackUserActivityResponse<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("TrackUserActivityResponse");
      ds.field("success", &self.success());
      ds.field("message", &self.message());
      ds.finish()
  }
}
#[allow(unused_imports, dead_code)]
pub mod user_activity_ {

  use crate::status_generated::*;
  use crate::notification_service_generated::*;
  use crate::user_service_generated::*;
  use crate::timestamp_generated::*;
  use crate::address_generated::*;
  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum PropertiesEntryOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct PropertiesEntry<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PropertiesEntry<'a> {
  type Inner = PropertiesEntry<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> PropertiesEntry<'a> {
  pub const VT_KEY: flatbuffers::VOffsetT = 4;
  pub const VT_VALUE: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    PropertiesEntry { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args PropertiesEntryArgs<'args>
  ) -> flatbuffers::WIPOffset<PropertiesEntry<'bldr>> {
    let mut builder = PropertiesEntryBuilder::new(_fbb);
    if let Some(x) = args.value { builder.add_value(x); }
    if let Some(x) = args.key { builder.add_key(x); }
    builder.finish()
  }


  #[inline]
  pub fn key(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PropertiesEntry::VT_KEY, None)}
  }
  #[inline]
  pub fn value(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PropertiesEntry::VT_VALUE, None)}
  }
}

impl flatbuffers::Verifiable for PropertiesEntry<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("key", Self::VT_KEY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("value", Self::VT_VALUE, false)?
     .finish();
    Ok(())
  }
}
pub struct PropertiesEntryArgs<'a> {
    pub key: Option<flatbuffers::WIPOffset<&'a str>>,
    pub value: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for PropertiesEntryArgs<'a> {
  #[inline]
  fn default() -> Self {
    PropertiesEntryArgs {
      key: None,
      value: None,
    }
  }
}

pub struct PropertiesEntryBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> PropertiesEntryBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_key(&mut self, key: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PropertiesEntry::VT_KEY, key);
  }
  #[inline]
  pub fn add_value(&mut self, value: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PropertiesEntry::VT_VALUE, value);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> PropertiesEntryBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    PropertiesEntryBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<PropertiesEntry<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for PropertiesEntry<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("PropertiesEntry");
      ds.field("key", &self.key());
      ds.field("value", &self.value());
      ds.finish()
  }
}
}  // pub mod UserActivity_

#[allow(unused_imports, dead_code)]
pub mod system_metrics_response_ {

  use crate::status_generated::*;
  use crate::notification_service_generated::*;
  use crate::user_service_generated::*;
  use crate::timestamp_generated::*;
  use crate::address_generated::*;
  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum ActivityCountsEntryOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ActivityCountsEntry<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ActivityCountsEntry<'a> {
  type Inner = ActivityCountsEntry<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ActivityCountsEntry<'a> {
  pub const VT_KEY: flatbuffers::VOffsetT = 4;
  pub const VT_VALUE: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ActivityCountsEntry { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ActivityCountsEntryArgs<'args>
  ) -> flatbuffers::WIPOffset<ActivityCountsEntry<'bldr>> {
    let mut builder = ActivityCountsEntryBuilder::new(_fbb);
    builder.add_value(args.value);
    if let Some(x) = args.key { builder.add_key(x); }
    builder.finish()
  }


  #[inline]
  pub fn key(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ActivityCountsEntry::VT_KEY, None)}
  }
  #[inline]
  pub fn value(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ActivityCountsEntry::VT_VALUE, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ActivityCountsEntry<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("key", Self::VT_KEY, false)?
     .visit_field::<i32>("value", Self::VT_VALUE, false)?
     .finish();
    Ok(())
  }
}
pub struct ActivityCountsEntryArgs<'a> {
    pub key: Option<flatbuffers::WIPOffset<&'a str>>,
    pub value: i32,
}
impl<'a> Default for ActivityCountsEntryArgs<'a> {
  #[inline]
  fn default() -> Self {
    ActivityCountsEntryArgs {
      key: None,
      value: 0,
    }
  }
}

pub struct ActivityCountsEntryBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ActivityCountsEntryBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_key(&mut self, key: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ActivityCountsEntry::VT_KEY, key);
  }
  #[inline]
  pub fn add_value(&mut self, value: i32) {
    self.fbb_.push_slot::<i32>(ActivityCountsEntry::VT_VALUE, value, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ActivityCountsEntryBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ActivityCountsEntryBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ActivityCountsEntry<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ActivityCountsEntry<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ActivityCountsEntry");
      ds.field("key", &self.key());
      ds.field("value", &self.value());
      ds.finish()
  }
}
}  // pub mod SystemMetricsResponse_
}  // pub mod services

