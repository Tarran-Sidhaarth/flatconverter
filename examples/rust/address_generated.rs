// DO NOT EDIT!
// rust generated by Buffman ðŸ’ª
// Versions:
// 		Buffman: 1.0.0
// 		Flatc: v25.2.10


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod common {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum AddressOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Address<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Address<'a> {
  type Inner = Address<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Address<'a> {
  pub const VT_STREET: flatbuffers::VOffsetT = 4;
  pub const VT_CITY: flatbuffers::VOffsetT = 6;
  pub const VT_STATE: flatbuffers::VOffsetT = 8;
  pub const VT_POSTAL_CODE: flatbuffers::VOffsetT = 10;
  pub const VT_COUNTRY: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Address { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args AddressArgs<'args>
  ) -> flatbuffers::WIPOffset<Address<'bldr>> {
    let mut builder = AddressBuilder::new(_fbb);
    if let Some(x) = args.country { builder.add_country(x); }
    if let Some(x) = args.postal_code { builder.add_postal_code(x); }
    if let Some(x) = args.state { builder.add_state(x); }
    if let Some(x) = args.city { builder.add_city(x); }
    if let Some(x) = args.street { builder.add_street(x); }
    builder.finish()
  }


  #[inline]
  pub fn street(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Address::VT_STREET, None)}
  }
  #[inline]
  pub fn city(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Address::VT_CITY, None)}
  }
  #[inline]
  pub fn state(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Address::VT_STATE, None)}
  }
  #[inline]
  pub fn postal_code(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Address::VT_POSTAL_CODE, None)}
  }
  #[inline]
  pub fn country(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Address::VT_COUNTRY, None)}
  }
}

impl flatbuffers::Verifiable for Address<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("street", Self::VT_STREET, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("city", Self::VT_CITY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("state", Self::VT_STATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("postal_code", Self::VT_POSTAL_CODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("country", Self::VT_COUNTRY, false)?
     .finish();
    Ok(())
  }
}
pub struct AddressArgs<'a> {
    pub street: Option<flatbuffers::WIPOffset<&'a str>>,
    pub city: Option<flatbuffers::WIPOffset<&'a str>>,
    pub state: Option<flatbuffers::WIPOffset<&'a str>>,
    pub postal_code: Option<flatbuffers::WIPOffset<&'a str>>,
    pub country: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for AddressArgs<'a> {
  #[inline]
  fn default() -> Self {
    AddressArgs {
      street: None,
      city: None,
      state: None,
      postal_code: None,
      country: None,
    }
  }
}

pub struct AddressBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> AddressBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_street(&mut self, street: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Address::VT_STREET, street);
  }
  #[inline]
  pub fn add_city(&mut self, city: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Address::VT_CITY, city);
  }
  #[inline]
  pub fn add_state(&mut self, state: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Address::VT_STATE, state);
  }
  #[inline]
  pub fn add_postal_code(&mut self, postal_code: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Address::VT_POSTAL_CODE, postal_code);
  }
  #[inline]
  pub fn add_country(&mut self, country: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Address::VT_COUNTRY, country);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> AddressBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    AddressBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Address<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Address<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Address");
      ds.field("street", &self.street());
      ds.field("city", &self.city());
      ds.field("state", &self.state());
      ds.field("postal_code", &self.postal_code());
      ds.field("country", &self.country());
      ds.finish()
  }
}
}  // pub mod common

