// DO NOT EDIT!
// Rust generated by Buffman ðŸ’ª
// Versions:
//		Buffman: 0.0.1
//		Flatc: v25.2.10


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod common {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_STATUS: i32 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_STATUS: i32 = 4;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_STATUS: [Status; 5] = [
  Status::STATUS_UNKNOWN,
  Status::STATUS_ACTIVE,
  Status::STATUS_INACTIVE,
  Status::STATUS_PENDING,
  Status::STATUS_SUSPENDED,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct Status(pub i32);
#[allow(non_upper_case_globals)]
impl Status {
  pub const STATUS_UNKNOWN: Self = Self(0);
  pub const STATUS_ACTIVE: Self = Self(1);
  pub const STATUS_INACTIVE: Self = Self(2);
  pub const STATUS_PENDING: Self = Self(3);
  pub const STATUS_SUSPENDED: Self = Self(4);

  pub const ENUM_MIN: i32 = 0;
  pub const ENUM_MAX: i32 = 4;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::STATUS_UNKNOWN,
    Self::STATUS_ACTIVE,
    Self::STATUS_INACTIVE,
    Self::STATUS_PENDING,
    Self::STATUS_SUSPENDED,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::STATUS_UNKNOWN => Some("STATUS_UNKNOWN"),
      Self::STATUS_ACTIVE => Some("STATUS_ACTIVE"),
      Self::STATUS_INACTIVE => Some("STATUS_INACTIVE"),
      Self::STATUS_PENDING => Some("STATUS_PENDING"),
      Self::STATUS_SUSPENDED => Some("STATUS_SUSPENDED"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for Status {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for Status {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i32>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for Status {
    type Output = Status;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i32>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for Status {
  type Scalar = i32;
  #[inline]
  fn to_little_endian(self) -> i32 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i32) -> Self {
    let b = i32::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for Status {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i32::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Status {}
}  // pub mod common

